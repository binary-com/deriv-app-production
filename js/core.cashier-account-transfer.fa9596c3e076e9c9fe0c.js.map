{"version":3,"sources":["webpack:///./templates/_common/components/loading.jsx","webpack:///./App/Containers/CashierModal/error.jsx","webpack:///./App/Containers/CashierModal/virtual.jsx","webpack:///./App/Containers/CashierModal/no-balance.jsx","webpack:///./App/Containers/CashierModal/AccountTransfer/account-transfer-form.jsx","webpack:///./App/Containers/CashierModal/AccountTransfer/account-transfer-no-account.jsx","webpack:///./App/Containers/CashierModal/AccountTransfer/account-transfer-receipt.jsx","webpack:///./App/Containers/CashierModal/account-transfer.jsx"],"names":["Loading","className","is_invisible","theme","id","classNames","invisible","Array","from","map","x","inx","key","onClickButton","button_text","footer","header","message","button_link","Error","address_line_1","address_postcode","localize","address_state","email","phone","residence","clearErrorMessage","closeCashierModal","toggleCashierModal","acceptTNC","tncApproval","AccountError","props","details","error_fields","join","interpolation","escapeValue","propTypes","error","connect","modules","setErrorMessage","this","setTimeout","Virtual","has_real_account","client","openRealAccountSignup","render","currency","NoBalance","setModalIndex","account","balance","AccountTransferForm","decimals","CurrencyUtils","max","transfer_limit","onTransferPassthrough","transfer_between_accounts","actions","setSubmitting","accounts_to","mt_accounts_to","validateAmount","mt_accounts_from","text","value","is_selected_from_mt","is_selected_from_crypto","is_disabled","is_selected_from","disabled","to_accounts","amount","handleChange","from_accounts","selected_from","validateField","field","touched","undefined","transfer_fee","minimum_fee","website_name","isSubmitting","Component","accounts_list","PropTypes","object","onChangeTransferFrom","onChangeTransferTo","requestTransferBetweenAccounts","cashier","account_transfer","selected_to","AccountTransferNoAccount","icon","i18n_default_text","React","AccountTransferReceipt","amount_transferred","receipt","withRouter","config","resetAccountTransfer","AccountTransfer","setActiveTab","container","onMount","is_virtual","is_loading","is_show_full_page","length","has_no_account","has_no_accounts_balance","Fragment","is_transfer_successful","array","string","bool","func","onMountAccountTransfer"],"mappings":"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","file":"js/core.cashier-account-transfer.fa9596c3e076e9c9fe0c.js","sourcesContent":["import classNames from 'classnames';\nimport React      from 'react';\n\nconst Loading = ({ className, is_invisible, theme, id }) => (\n    <div\n        id={id}\n        className={\n            classNames(\n                'barspinner',\n                `barspinner--${ theme || 'dark'}`,\n                { invisible: is_invisible },\n                className,\n            )\n        }\n    >\n        { Array.from(new Array(5)).map((x, inx) => (\n            <div key={inx} className={`barspinner__rect barspinner__rect--${inx + 1} rect${inx + 1}`} />\n        ))}\n    </div>\n);\n\nexport default Loading;\n","import PropTypes    from 'prop-types';\nimport React        from 'react';\nimport { Button }   from 'deriv-components';\nimport Localize     from 'App/Components/Elements/localize.jsx';\nimport ButtonLink   from 'App/Components/Routes/button-link.jsx';\nimport { localize } from 'App/i18n';\nimport Icon         from 'Assets/icon.jsx';\nimport { WS }       from 'Services';\nimport { connect }  from 'Stores/connect';\n\nconst ErrorComponent = ({\n    header,\n    message,\n    button_link,\n    onClickButton,\n    button_text,\n    footer,\n}) => (\n    <div className='cashier__wrapper'>\n        <Icon icon='IconCashierError' className='cashier-error__icon' />\n        {header && <h2 className='cashier-error__header'>{header}</h2>}\n        {message && <p className='cashier__paragraph'>{message}</p>}\n        {button_link &&\n        <ButtonLink\n            className='cashier-error__button'\n            to={button_link}\n            onClick={onClickButton}\n            primary\n            large\n        >\n            <span className='btn__text'>{button_text}</span>\n        </ButtonLink>\n        }\n        {!button_link && button_text &&\n            <Button\n                className='cashier-error__button'\n                onClick={onClickButton}\n                text={button_text}\n                primary\n                large\n            />\n        }\n        {footer && <h2 className='cashier-error__footer'>{footer}</h2>}\n    </div>\n);\n\nclass Error extends React.Component {\n    error_fields = {\n        address_city    : localize('Town/City'),\n        address_line_1  : localize('First line of home address'),\n        address_postcode: localize('Postal Code/ZIP'),\n        address_state   : localize('State/Province'),\n        email           : localize('Email address'),\n        phone           : localize('Telephone'),\n        residence       : localize('Country of Residence'),\n    };\n\n    onClickButton = () => {\n        if (typeof this.props.error.onClickButton === 'function') {\n            this.props.error.onClickButton();\n        }\n        this.clearErrorMessage();\n    }\n\n    closeCashierModal = () => {\n        this.onClickButton();\n        this.props.toggleCashierModal();\n    }\n\n    clearErrorMessage = () => {\n        this.props.setErrorMessage('');\n    };\n\n    acceptTNC = async () => {\n        await WS.tncApproval();\n        this.onClickButton();\n    };\n\n    render() {\n        let AccountError;\n        switch (this.props.error.code) {\n            case 'InvalidToken':\n                AccountError = (\n                    <ErrorComponent\n                        header={localize('Identity confirmation failed')}\n                        message={<Localize i18n_default_text='It looks like your link is incorrect or no longer valid.' />}\n                        onClickButton={this.onClickButton}\n                        button_text={localize('Request a new link')}\n                    />\n                );\n                break;\n            case 'ASK_TNC_APPROVAL':\n                AccountError = (\n                    <ErrorComponent\n                        header={localize('Our terms and conditions have changed')}\n                        message={\n                            <Localize\n                                i18n_default_text='Please accept our updated <0>terms and conditions</0> to continue.'\n                                components={[ (\n                                    <a\n                                        key={0}\n                                        className='link'\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                        href='https://www.deriv.com/terms-and-conditions/#general'\n                                    />\n                                ) ]}\n                            />\n                        }\n                        onClickButton={this.acceptTNC}\n                        button_text={localize('I accept')}\n                    />\n                );\n                break;\n            case 'ASK_FIX_DETAILS':\n                AccountError = (\n                    <ErrorComponent\n                        header={localize('Update your personal details')}\n                        message={\n                            <React.Fragment>\n                                <Localize i18n_default_text={'We can\\'t validate your personal details because there is some information missing.'} />&nbsp;\n                                {this.props.error.fields ?\n                                    <Localize\n                                        i18n_default_text={'Please update your {{details}} to continue.'}\n                                        values={{\n                                            details      : this.props.error.fields.map(field => (this.error_fields[field] || field)).join(', '),\n                                            interpolation: { escapeValue: false },\n                                        }}\n                                    />\n                                    :\n                                    <Localize i18n_default_text={'Please update your details to continue.'} />\n                                }\n                            </React.Fragment>\n                        }\n                        button_link='/account/personal-details'\n                        onClickButton={this.closeCashierModal}\n                        button_text={localize('Update my details')}\n                        footer={\n                            <Localize\n                                i18n_default_text='Need help? <0>Contact us</0>.'\n                                components={[ (\n                                    <a\n                                        key={0}\n                                        className='link'\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                        href='https://www.deriv.com/help-centre/'\n                                    />\n                                ) ]}\n                            />\n                        }\n                    />\n                );\n                break;\n            case 'WrongResponse':\n                AccountError = (\n                    <ErrorComponent\n                        header={this.props.error.message}\n                        onClickButton={this.onClickButton}\n                        button_text={localize('Try again')}\n                    />\n                );\n                break;\n            default:\n                AccountError = <ErrorComponent header={this.props.error.message} />;\n                break;\n        }\n        return AccountError;\n    }\n}\n\nError.propTypes = {\n    error             : PropTypes.object,\n    setErrorMessage   : PropTypes.func,\n    toggleCashierModal: PropTypes.func,\n};\n\nexport default connect(\n    ({ modules, ui }) => ({\n        setErrorMessage   : modules.cashier.setErrorMessage,\n        toggleCashierModal: ui.toggleCashierModal,\n    })\n)(Error);\n","import PropTypes    from 'prop-types';\nimport React        from 'react';\nimport { Button }   from 'deriv-components';\nimport Localize     from 'App/Components/Elements/localize.jsx';\nimport { localize } from 'App/i18n';\nimport { connect }  from 'Stores/connect';\n\nclass Virtual extends React.Component {\n    onClickSignup = () => {\n        this.props.toggleCashierModal();\n        setTimeout(this.props.openRealAccountSignup, 500);\n    };\n\n    render = () => {\n        return (\n            <div className='cashier__wrapper cashier__center-align-wrapper'>\n                <div className='cashier__center-align-content'>\n                    <h2 className='cashier-error__header cashier__virtual-header'>\n                        <Localize i18n_default_text={'You\\'re currently using a demo account'} />\n                    </h2>\n                    {this.props.has_real_account ?\n                        <React.Fragment>\n                            <p className='cashier__paragraph cashier__text'>\n                                <Localize i18n_default_text='You need to switch to a real money account to use this feature.' />\n                                <br />\n                                <Localize i18n_default_text='You can do this by selecting a real account from the Account Switcher.' />\n                            </p>\n                            <div className='cashier__account-switch-icon' />\n                        </React.Fragment>\n                        :\n                        <React.Fragment>\n                            <p className='cashier__paragraph cashier__text'>\n                                <Localize i18n_default_text={'You need a real money account to use this feature. It\\'s easy to create a real money account and start trading.'} />\n                            </p>\n                            <Button\n                                className='cashier-error__button'\n                                has_effect\n                                text={localize('Create my real account')}\n                                onClick={this.onClickSignup}\n                                primary\n                                large\n                            />\n                        </React.Fragment>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nVirtual.propTypes = {\n    has_real_account     : PropTypes.bool,\n    openRealAccountSignup: PropTypes.func,\n    toggleCashierModal   : PropTypes.func,\n};\n\nexport default connect(\n    ({ client, ui }) => ({\n        has_real_account     : client.has_any_real_account,\n        openRealAccountSignup: ui.openRealAccountSignup,\n        toggleCashierModal   : ui.toggleCashierModal,\n    })\n)(Virtual);\n\n","import PropTypes        from 'prop-types';\nimport React            from 'react';\nimport { Button }       from 'deriv-components';\nimport Icon             from 'Assets/icon.jsx';\nimport Localize         from 'App/Components/Elements/localize.jsx';\nimport { localize }     from 'App/i18n';\nimport { connect }      from 'Stores/connect';\n\nclass NoBalance extends React.Component {\n    onClickDeposit = () => {\n        // index of deposit tab in the cashier modal is 0\n        this.props.setModalIndex(0);\n    };\n\n    render = () => {\n        return (\n            <div className='cashier__wrapper cashier__no-balance'>\n                <Icon icon='IconNoBalance' className='cashier__no-balance-icon' />\n                <h2 className='withdraw__header'><Localize i18n_default_text='You have no funds in your {{currency}} account' values={{ currency: this.props.currency.toUpperCase() }} /></h2>\n                <p className='cashier__text'><Localize i18n_default_text='Please make a deposit to use this feature.' /></p>\n                <Button\n                    className='cashier__no-balance-button'\n                    has_effect\n                    text={localize('Deposit now')}\n                    onClick={this.onClickDeposit}\n                    primary\n                    large\n                />\n            </div>\n        );\n    }\n}\n\nNoBalance.propTypes = {\n    currency     : PropTypes.string,\n    setModalIndex: PropTypes.func,\n};\n\nexport default connect(\n    ({ client, ui }) => ({\n        currency     : client.currency,\n        setModalIndex: ui.setModalIndex,\n    })\n)(NoBalance);\n\n","import classNames             from 'classnames';\nimport PropTypes              from 'prop-types';\nimport React                  from 'react';\nimport {\n    Button,\n    Dropdown,\n    Input,\n    Money }                   from 'deriv-components';\nimport {\n    Field,\n    Formik,\n    Form }                    from 'formik';\nimport CurrencyUtils          from 'deriv-shared/utils/currency';\nimport Localize               from 'App/Components/Elements/localize.jsx';\nimport { website_name }       from 'App/Constants/app-config';\nimport { localize }           from 'App/i18n';\nimport Icon                   from 'Assets/icon.jsx';\nimport { connect }            from 'Stores/connect';\nimport {\n    getPreBuildDVRs,\n    validNumber }             from 'Utils/Validator/declarative-validation-rules';\nimport Loading                from '../../../../templates/_common/components/loading.jsx';\n\nconst AccountOption = ({ account, idx }) => (\n    <React.Fragment key={idx}>\n        {(account.currency || account.mt_icon) &&\n            <Icon\n                icon='IconAccountsCurrency'\n                className='account-transfer__currency-icon'\n                type={account.mt_icon || account.currency.toLowerCase()}\n                height={16}\n                width={16}\n            />\n        }\n        <span className='account-transfer__currency'>{account.text}</span>\n        <span className='account-transfer__balance'>(<Money amount={account.balance} currency={account.currency} />)</span>\n    </React.Fragment>\n);\n\nclass AccountTransferForm extends React.Component {\n    validateAmount = (amount) => {\n        let error;\n\n        if (!amount) {\n            error = localize('This field is required.');\n        } else if (!validNumber(amount, { type: 'float', decimals: CurrencyUtils.getDecimalPlaces(this.props.selected_from.currency), min: this.props.transfer_limit.min, max: this.props.transfer_limit.max })) {\n            error = getPreBuildDVRs().number.message;\n        } else if (+this.props.selected_from.balance < +amount) {\n            error = localize('Insufficient balance.');\n        }\n\n        return error;\n    }\n\n    onTransferPassthrough = async (values, actions) => {\n        const transfer_between_accounts = await this.props.requestTransferBetweenAccounts({\n            amount: values.amount,\n        });\n        if (transfer_between_accounts.error) {\n            actions.setSubmitting(false);\n        }\n    };\n\n    render() {\n        const accounts_from    = [];\n        const mt_accounts_from = [];\n        const accounts_to      = [];\n        const mt_accounts_to   = [];\n\n        this.props.accounts_list.forEach((account, idx) => {\n            const text  = <AccountOption idx={idx} account={account} />;\n            const value = account.value;\n            (account.is_mt ? mt_accounts_from : accounts_from).push({\n                text,\n                value,\n            });\n            const is_selected_from        = account.value === this.props.selected_from.value;\n            const is_selected_from_mt     = this.props.selected_from.is_mt && account.is_mt;\n            const is_selected_from_crypto = this.props.selected_from.is_crypto && account.is_crypto;\n            // account from and to cannot be the same\n            // cannot transfer to MT account from MT\n            // cannot transfer to crypto account from crypto\n            const is_disabled = is_selected_from_mt || is_selected_from || is_selected_from_crypto;\n            (account.is_mt ? mt_accounts_to : accounts_to).push({\n                text,\n                value,\n                disabled: is_disabled,\n            });\n        });\n\n        const from_accounts = {\n            [localize('Deriv accounts')]: accounts_from,\n            ...(mt_accounts_from.length && { [localize('DMT5 accounts')]: mt_accounts_from }),\n        };\n\n        const to_accounts = {\n            [localize('Deriv accounts')]: accounts_to,\n            ...(mt_accounts_to.length && { [localize('DMT5 accounts')]: mt_accounts_to }),\n        };\n\n        return (\n            <div className='cashier__wrapper--align-left'>\n                <React.Fragment>\n                    <Formik\n                        initialValues={{\n                            amount: '',\n                        }}\n                        onSubmit={this.onTransferPassthrough}\n                    >\n                        {\n                            ({ errors, isSubmitting, isValid, touched, validateField, handleChange }) => (\n                                <React.Fragment>\n                                    {isSubmitting ?\n                                        <div className='cashier__loader-wrapper'>\n                                            <Loading className='cashier__loader' />\n                                        </div>\n                                        :\n                                        <Form>\n                                            <Dropdown\n                                                id='transfer_from'\n                                                className='cashier__drop-down account-transfer__drop-down'\n                                                classNameDisplay='cashier__drop-down-display'\n                                                classNameDisplaySpan='cashier__drop-down-display-span'\n                                                classNameItems='cashier__drop-down-items'\n                                                classNameLabel='cashier__drop-down-label'\n                                                label={localize('From')}\n                                                list={from_accounts}\n                                                name='transfer_from'\n                                                value={this.props.selected_from.value}\n                                                onChange={(e) => {\n                                                    this.props.onChangeTransferFrom(e);\n                                                    handleChange(e);\n                                                    validateField('amount');\n                                                }}\n                                            />\n                                            <Icon className='cashier__transferred-icon account-transfer__transfer-icon' icon='IconBack' />\n                                            <Dropdown\n                                                id='transfer_to'\n                                                className='cashier__drop-down account-transfer__drop-down'\n                                                classNameDisplay='cashier__drop-down-display'\n                                                classNameDisplaySpan='cashier__drop-down-display-span'\n                                                classNameItems='cashier__drop-down-items'\n                                                classNameLabel='cashier__drop-down-label'\n                                                label={localize('To')}\n                                                list={to_accounts}\n                                                name='transfer_to'\n                                                value={this.props.selected_to.value}\n                                                onChange={this.props.onChangeTransferTo}\n                                            />\n                                            <Field name='amount' validate={this.validateAmount}>\n                                                {({ field }) => (\n                                                    <Input\n                                                        { ...field }\n                                                        onChange={(e) => {\n                                                            this.props.setErrorMessage('');\n                                                            handleChange(e);\n                                                        }}\n                                                        className='cashier__input cashier__input--long dc-input--no-placeholder'\n                                                        type='text'\n                                                        label={localize('Amount')}\n                                                        error={ touched.amount && errors.amount }\n                                                        required\n                                                        leading_icon={\n                                                            this.props.selected_from.currency ?\n                                                                <span className={classNames('symbols', `symbols--${this.props.selected_from.currency.toLowerCase()}`)} />\n                                                                : undefined\n                                                        }\n                                                        autoComplete='off'\n                                                        maxLength='30'\n                                                        hint={\n                                                            this.props.transfer_limit.min &&\n                                                            this.props.transfer_limit.max &&\n                                                            <Localize\n                                                                i18n_default_text='Transfer limits: <0 />-<1 />'\n                                                                components={[\n                                                                    <Money\n                                                                        key={0}\n                                                                        amount={this.props.transfer_limit.min}\n                                                                        currency={this.props.selected_from.currency}\n                                                                    />,\n                                                                    <Money\n                                                                        key={1}\n                                                                        amount={this.props.transfer_limit.max}\n                                                                        currency={this.props.selected_from.currency}\n                                                                    />,\n                                                                ]}\n                                                            />\n                                                        }\n                                                    />\n                                                )}\n                                            </Field>\n                                            <div>\n                                                <div className='account-transfer__notes'>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span><Localize i18n_default_text='Transfer limits may vary depending on changes in exchange rates.' /></span>\n                                                    </div>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span>\n                                                            <Localize\n                                                                i18n_default_text='Transfers are subject to a {{transfer_fee}}% transfer fee or {{currency}} {{minimum_fee}}, whichever is higher.'\n                                                                values={{\n                                                                    transfer_fee: this.props.transfer_fee,\n                                                                    currency    : this.props.selected_from.currency,\n                                                                    minimum_fee : this.props.minimum_fee,\n                                                                }}\n                                                            />\n                                                        </span>\n                                                    </div>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span><Localize i18n_default_text='Transfers are possible only between your fiat and cryptocurrency accounts (and vice versa), or between your {{website_name}} account and your {{website_name}} MT5 (DMT5) account (or vice versa).' values={{ website_name }} /></span>\n                                                    </div>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span><Localize i18n_default_text='Transfers may be unavailable at times such as when the market is closed (weekends or holidays), periods of high volatility, or when there are technical issues.' /></span>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className='cashier__form-submit'>\n                                                {this.props.error.message &&\n                                                <React.Fragment>\n                                                    <Icon icon='IconEmergency' className='cashier__form-error-icon' />\n                                                    <Icon icon='IconError' className='cashier__form-error-small-icon' />\n                                                    <p className='cashier__form-error'>\n                                                        {this.props.error.message}\n                                                    </p>\n                                                </React.Fragment>\n                                                }\n                                                <Button\n                                                    className='cashier__form-submit-button'\n                                                    type='submit'\n                                                    is_disabled={!isValid || isSubmitting}\n                                                    primary\n                                                    large\n                                                >\n                                                    <Localize i18n_default_text='Transfer' />\n                                                </Button>\n                                            </div>\n                                        </Form>\n                                    }\n                                </React.Fragment>\n                            )\n                        }\n                    </Formik>\n                </React.Fragment>\n            </div>\n        );\n    }\n}\n\nAccountTransferForm.propTypes = {\n    accounts_list                 : PropTypes.array,\n    error                         : PropTypes.object,\n    minimum_fee                   : PropTypes.string,\n    onChangeTransferFrom          : PropTypes.func,\n    onChangeTransferTo            : PropTypes.func,\n    requestTransferBetweenAccounts: PropTypes.func,\n    selected_from                 : PropTypes.object,\n    selected_to                   : PropTypes.object,\n    setErrorMessage               : PropTypes.func,\n    transfer_fee                  : PropTypes.number,\n    transfer_limit                : PropTypes.object,\n};\n\nexport default connect(\n    ({ modules }) => ({\n        accounts_list                 : modules.cashier.config.account_transfer.accounts_list,\n        minimum_fee                   : modules.cashier.config.account_transfer.minimum_fee,\n        onChangeTransferFrom          : modules.cashier.onChangeTransferFrom,\n        onChangeTransferTo            : modules.cashier.onChangeTransferTo,\n        requestTransferBetweenAccounts: modules.cashier.requestTransferBetweenAccounts,\n        selected_from                 : modules.cashier.config.account_transfer.selected_from,\n        selected_to                   : modules.cashier.config.account_transfer.selected_to,\n        setErrorMessage               : modules.cashier.setErrorMessage,\n        transfer_fee                  : modules.cashier.config.account_transfer.transfer_fee,\n        transfer_limit                : modules.cashier.config.account_transfer.transfer_limit,\n    })\n)(AccountTransferForm);\n","import React    from 'react';\nimport Icon     from 'Assets/icon.jsx';\nimport Localize from 'App/Components/Elements/localize.jsx';\n\nclass AccountTransferNoAccount extends React.Component {\n    render = () => {\n        return (\n            <div className='cashier__wrapper cashier__no-balance'>\n                <Icon icon='IconNoBalance' className='cashier__no-balance-icon' />\n                <h2 className='withdraw__header'><Localize i18n_default_text='You need at least two accounts' /></h2>\n                <p className='cashier__text'><Localize i18n_default_text='Please create a second account (Deriv or DMT5) to enable fund transfers.' /></p>\n                {/* TODO: add account opening CTA and MT5 account opening CTA once ready */}\n            </div>\n        );\n    }\n}\n\nexport default AccountTransferNoAccount;\n","import classNames     from 'classnames';\nimport PropTypes      from 'prop-types';\nimport React          from 'react';\nimport { withRouter } from 'react-router';\nimport { Button }     from 'deriv-components';\nimport Localize       from 'App/Components/Elements/localize.jsx';\nimport { localize }   from 'App/i18n';\nimport Icon           from 'Assets/icon.jsx';\nimport { connect }    from 'Stores/connect';\n\nclass AccountTransferReceipt extends React.Component {\n    componentWillUnmount() {\n        this.props.resetAccountTransfer();\n    }\n\n    render() {\n        const {\n            receipt,\n            selected_from,\n            selected_to,\n        } = this.props;\n\n        return (\n            <div className='cashier__wrapper account-transfer__receipt'>\n                <Icon icon='IconTransferDone' className='account-transfer__receipt-icon' />\n                <h2 className='cashier__header'>\n                    <Localize i18n_default_text='Your funds have been transferred.' />\n                </h2>\n                <div className='cashier__transferred-amount cashier__text--bold'>\n                    <span\n                        className={classNames('symbols', `symbols--${selected_from.currency.toLowerCase()}`)}\n                    />\n                    {receipt.amount_transferred}\n                </div>\n                <div className='cashier__transferred-details-wrapper'>\n                    <span className='account-transfer__transfer-details-from'>\n                        <Icon\n                            icon='IconAccountsCurrency'\n                            type={selected_from.mt_icon || selected_from.currency.toLowerCase()}\n                            height={16}\n                            width={16}\n                        />\n                        <span className='cashier__transferred-details'>\n                            <span className='cashier__text--bold'>{selected_from.text}</span>\n                        </span>\n                    </span>\n                    <Icon className='cashier__transferred-icon' icon='IconBack' />\n                    <span className='account-transfer__transfer-details-to'>\n                        <Icon\n                            icon='IconAccountsCurrency'\n                            type={selected_to.mt_icon || selected_to.currency.toLowerCase()}\n                            height={16}\n                            width={16}\n                        />\n                        <span className='cashier__transferred-details'>\n                            <span className='cashier__text--bold'>{selected_to.text}</span>\n                        </span>\n                    </span>\n                </div>\n                <Button\n                    className='account-transfer__button-done'\n                    has_effect\n                    text={localize('Done')}\n                    onClick={this.props.resetAccountTransfer}\n                    primary\n                    large\n                />\n            </div>\n        );\n    }\n}\n\nAccountTransferReceipt.propTypes = {\n    receipt             : PropTypes.object,\n    resetAccountTransfer: PropTypes.func,\n    selected_from       : PropTypes.object,\n    selected_to         : PropTypes.object,\n};\n\nexport default withRouter(connect(\n    ({ modules }) => ({\n        receipt             : modules.cashier.config.account_transfer.receipt,\n        resetAccountTransfer: modules.cashier.resetAccountTransfer,\n        selected_from       : modules.cashier.config.account_transfer.selected_from,\n        selected_to         : modules.cashier.config.account_transfer.selected_to,\n    })\n)(AccountTransferReceipt));\n","import PropTypes                from 'prop-types';\nimport React                    from 'react';\nimport { connect }              from 'Stores/connect';\nimport AccountTransferForm      from './AccountTransfer/account-transfer-form.jsx';\nimport AccountTransferNoAccount from './AccountTransfer/account-transfer-no-account.jsx';\nimport AccountTransferReceipt   from './AccountTransfer/account-transfer-receipt.jsx';\nimport Error                    from './error.jsx';\nimport NoBalance                from './no-balance.jsx';\nimport Virtual                  from './virtual.jsx';\nimport Loading                  from '../../../templates/_common/components/loading.jsx';\n\nclass AccountTransfer extends React.Component {\n    componentDidMount() {\n        this.props.setActiveTab(this.props.container);\n        this.props.onMount();\n    }\n\n    render() {\n        if (this.props.is_virtual) {\n            return <Virtual />;\n        }\n        if (this.props.is_loading) {\n            return <Loading className='cashier__loader' />;\n        }\n        if (this.props.error.is_show_full_page ||\n            (this.props.error.message && !this.props.accounts_list.length)) {\n            // for errors with CTA hide the form and show the error,\n            // for others show them at the bottom of the form next to submit button\n            return <Error error={this.props.error} />;\n        }\n        if (this.props.has_no_account) {\n            return <AccountTransferNoAccount />;\n        }\n        if (this.props.has_no_accounts_balance) {\n            return <NoBalance />;\n        }\n        return (\n            <React.Fragment>\n                {this.props.is_transfer_successful\n                    ? <AccountTransferReceipt />\n                    : <AccountTransferForm error={this.props.error} />\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nAccountTransfer.propTypes = {\n    accounts_list          : PropTypes.array,\n    container              : PropTypes.string,\n    error                  : PropTypes.object,\n    has_no_account         : PropTypes.bool,\n    has_no_accounts_balance: PropTypes.bool,\n    is_loading             : PropTypes.bool,\n    is_transfer_successful : PropTypes.bool,\n    is_virtual             : PropTypes.bool,\n    onMount                : PropTypes.func,\n    setActiveTab           : PropTypes.func,\n};\n\nexport default connect(\n    ({ client, modules }) => ({\n        is_virtual             : client.is_virtual,\n        accounts_list          : modules.cashier.config.account_transfer.accounts_list,\n        container              : modules.cashier.config.account_transfer.container,\n        error                  : modules.cashier.config.account_transfer.error,\n        has_no_account         : modules.cashier.config.account_transfer.has_no_account,\n        has_no_accounts_balance: modules.cashier.config.account_transfer.has_no_accounts_balance,\n        is_loading             : modules.cashier.is_loading,\n        is_transfer_successful : modules.cashier.config.account_transfer.is_transfer_successful,\n        onMount                : modules.cashier.onMountAccountTransfer,\n        setActiveTab           : modules.cashier.setActiveTab,\n    })\n)(AccountTransfer);\n"],"sourceRoot":""}