{"version":3,"sources":["webpack:///./App/Containers/CashierModal/error.jsx","webpack:///./App/Containers/CashierModal/transfer-no-balance.jsx","webpack:///./App/Containers/CashierModal/AccountTransfer/account-transfer-form.jsx","webpack:///./App/Containers/CashierModal/AccountTransfer/account-transfer-no-account.jsx","webpack:///./App/Containers/CashierModal/AccountTransfer/account-transfer-receipt.jsx","webpack:///./App/Containers/CashierModal/account-transfer.jsx"],"names":["Error","onClickButton","props","error","link","window","open","urlFor","undefined","setErrorMessage","className","icon","Array","isArray","this","message","map","idx","key","button_text","has_effect","text","onClick","React","Component","propTypes","PropTypes","object","func","connect","modules","cashier","render","website_name","localize","TransferNoBalance","setModalIndex","errors","amount","account","AccountOption","balance","AccountTransferForm","currency","transfer_between_accounts","actions","setSubmitting","accounts_to","mt_accounts_to","validateTransferPassthrough","mt_accounts_from","value","is_selected_from_mt","is_selected_from_crypto","is_disabled","is_selected_from","disabled","to_accounts","handleChange","from_accounts","selected_from","onChangeTransferFrom","id","classNameDisplay","classNameDisplaySpan","classNameItems","classNameLabel","label","list","name","selected_to","onChange","onChangeTransferTo","field","touched","transfer_limit","i18n_default_text","transfer_fee","minimum_fee","isSubmitting","accounts_list","array","requestTransferBetweenAccounts","account_transfer","AccountTransferNoAccount","AccountTransferReceipt","amount_transferred","receipt","withRouter","config","resetAccountTransfer","AccountTransfer","setActiveTab","container","onMount","Fragment","is_loading","has_no_account","has_no_balance","is_transfer_successful","string","bool","ui","onMountAccountTransfer"],"mappings":"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","file":"js/3.9ad6ef30372111a43555.js","sourcesContent":["import PropTypes    from 'prop-types';\nimport React        from 'react';\nimport Button       from 'deriv-components/lib/button';\nimport { urlFor }   from '_common/url';\nimport Icon         from 'Assets/icon.jsx';\nimport { connect }  from 'Stores/connect';\n\nclass Error extends React.Component {\n    onClickButton = () => {\n        if (this.props.error.link) {\n            window.open(urlFor(this.props.error.link, undefined, undefined, true));\n        } else if (typeof this.props.error.onClickButton === 'function') {\n            this.props.error.onClickButton();\n        }\n        this.props.setErrorMessage('');\n    };\n\n    render() {\n        return (\n            <div className='cashier__wrapper'>\n                <Icon icon='IconCashierError' className='cashier-error__icon' />\n                {Array.isArray(this.props.error.message) ?\n                    this.props.error.message.map((message, idx) =>\n                        <p className='cashier-error__text' key={idx}>{message}</p>\n                    )\n                    :\n                    <p className='cashier-error__text'>{this.props.error.message}</p>\n                }\n                {this.props.error.button_text &&\n                <Button\n                    className='btn--primary--default cashier-error__button'\n                    has_effect\n                    text={this.props.error.button_text}\n                    onClick={this.onClickButton}\n                />\n                }\n            </div>\n        );\n    }\n}\n\nError.propTypes = {\n    error          : PropTypes.object,\n    setErrorMessage: PropTypes.func,\n};\n\nexport default connect(\n    ({ modules }) => ({\n        setErrorMessage: modules.cashier.setErrorMessage,\n    })\n)(Error);\n","import PropTypes        from 'prop-types';\nimport React            from 'react';\nimport { Button }       from 'deriv-components';\nimport Icon             from 'Assets/icon.jsx';\nimport Localize         from 'App/Components/Elements/localize.jsx';\nimport { website_name } from 'App/Constants/app-config';\nimport { localize }     from 'App/i18n';\n\nclass TransferNoBalance extends React.Component {\n    onClickDeposit = () => {\n        // index of deposit tab in the cashier modal is 0\n        this.props.setModalIndex(0);\n    };\n\n    render = () => {\n        return (\n            <div className='cashier__wrapper account-transfer__no-balance'>\n                <Icon icon='IconNoBalance' className='account-transfer__no-balance-icon' />\n                <h2 className='withdraw__header'><Localize i18n_default_text='You have no funds in your {{website_name}} account' values={{ website_name }} /></h2>\n                <p className='cashier__text'><Localize i18n_default_text='Please make a deposit to enable fund transfers.' /></p>\n                <Button\n                    className='btn--primary--default account-transfer__no-balance-button'\n                    has_effect\n                    text={localize('Deposit now')}\n                    onClick={this.onClickDeposit}\n                />\n            </div>\n        );\n    }\n}\n\nTransferNoBalance.propTypes = {\n    setModalIndex: PropTypes.func,\n};\n\nexport default TransferNoBalance;\n","import classNames             from 'classnames';\nimport PropTypes              from 'prop-types';\nimport React                  from 'react';\nimport {\n    Button,\n    Dropdown,\n    Input,\n    Money }                   from 'deriv-components';\nimport {\n    Field,\n    Formik,\n    Form }                    from 'formik';\nimport CurrencyUtils          from 'deriv-shared/utils/currency';\nimport Localize               from 'App/Components/Elements/localize.jsx';\nimport { website_name }       from 'App/Constants/app-config';\nimport { localize }           from 'App/i18n';\nimport Icon                   from 'Assets/icon.jsx';\nimport { connect }            from 'Stores/connect';\nimport {\n    getPreBuildDVRs,\n    validNumber }             from 'Utils/Validator/declarative-validation-rules';\nimport Loading                from '../../../../templates/_common/components/loading.jsx';\n\nconst validateTransfer = (values, { balance, currency, transfer_limit }) => {\n    const errors = {};\n\n    if (!values.amount) {\n        errors.amount = localize('This field is required.');\n    } else if (!validNumber(values.amount, { type: 'float', decimals: CurrencyUtils.getDecimalPlaces(currency), min: transfer_limit.min, max: transfer_limit.max })) {\n        errors.amount = getPreBuildDVRs().number.message;\n    } else if (+balance < +values.amount) {\n        errors.amount = localize('Insufficient balance.');\n    }\n\n    return errors;\n};\n\nconst AccountOption = ({ account, idx }) => (\n    <React.Fragment key={idx}>\n        {(account.currency || account.mt_icon) &&\n            <Icon\n                icon='IconAccountsCurrency'\n                className='account-transfer__currency-icon'\n                type={account.mt_icon || account.currency.toLowerCase()}\n                height={16}\n                width={16}\n            />\n        }\n        <span className='account-transfer__currency'>{account.text}</span>\n        <span className='account-transfer__balance'>(<Money amount={account.balance} currency={account.currency} />)</span>\n    </React.Fragment>\n);\n\nclass AccountTransferForm extends React.Component {\n    validateTransferPassthrough = (values) => (\n        validateTransfer(values, {\n            balance       : this.props.selected_from.balance,\n            currency      : this.props.selected_from.currency,\n            transfer_limit: this.props.transfer_limit,\n        })\n    );\n\n    onTransferPassthrough = async (values, actions) => {\n        const transfer_between_accounts = await this.props.requestTransferBetweenAccounts({\n            amount: values.amount,\n        });\n        if (transfer_between_accounts.error) {\n            actions.setSubmitting(false);\n        }\n    };\n\n    render() {\n        const accounts_from    = [];\n        const mt_accounts_from = [];\n        const accounts_to      = [];\n        const mt_accounts_to   = [];\n\n        this.props.accounts_list.forEach((account, idx) => {\n            const text  = <AccountOption idx={idx} account={account} />;\n            const value = account.value;\n            (account.is_mt ? mt_accounts_from : accounts_from).push({\n                text,\n                value,\n            });\n            const is_selected_from        = account.value === this.props.selected_from.value;\n            const is_selected_from_mt     = this.props.selected_from.is_mt && account.is_mt;\n            const is_selected_from_crypto = this.props.selected_from.is_crypto && account.is_crypto;\n            // account from and to cannot be the same\n            // cannot transfer to MT account from MT\n            // cannot transfer to crypto account from crypto\n            const is_disabled = is_selected_from_mt || is_selected_from || is_selected_from_crypto;\n            (account.is_mt ? mt_accounts_to : accounts_to).push({\n                text,\n                value,\n                disabled: is_disabled,\n            });\n        });\n\n        const from_accounts = {\n            [localize('Deriv accounts')]: accounts_from,\n            ...(mt_accounts_from.length && { [localize('DMT5 accounts')]: mt_accounts_from }),\n        };\n\n        const to_accounts = {\n            [localize('Deriv accounts')]: accounts_to,\n            ...(mt_accounts_to.length && { [localize('DMT5 accounts')]: mt_accounts_to }),\n        };\n\n        return (\n            <div className='cashier__wrapper--align-left'>\n                <React.Fragment>\n                    <Formik\n                        initialValues={{\n                            amount: '',\n                        }}\n                        validate={this.validateTransferPassthrough}\n                        onSubmit={this.onTransferPassthrough}\n                    >\n                        {\n                            ({ errors, isSubmitting, isValid, touched, handleChange }) => (\n                                <React.Fragment>\n                                    {isSubmitting ?\n                                        <div className='cashier__loader-wrapper'>\n                                            <Loading className='cashier__loader' />\n                                        </div>\n                                        :\n                                        <Form>\n                                            <Dropdown\n                                                id='transfer_from'\n                                                className='cashier__drop-down account-transfer__drop-down'\n                                                classNameDisplay='cashier__drop-down-display'\n                                                classNameDisplaySpan='cashier__drop-down-display-span'\n                                                classNameItems='cashier__drop-down-items'\n                                                classNameLabel='cashier__drop-down-label'\n                                                label={localize('From')}\n                                                list={from_accounts}\n                                                name='transfer_from'\n                                                value={this.props.selected_from.value}\n                                                onChange={this.props.onChangeTransferFrom}\n                                            />\n                                            <Icon className='cashier__transferred-icon account-transfer__transfer-icon' icon='IconBack' />\n                                            <Dropdown\n                                                id='transfer_to'\n                                                className='cashier__drop-down account-transfer__drop-down'\n                                                classNameDisplay='cashier__drop-down-display'\n                                                classNameDisplaySpan='cashier__drop-down-display-span'\n                                                classNameItems='cashier__drop-down-items'\n                                                classNameLabel='cashier__drop-down-label'\n                                                label={localize('To')}\n                                                list={to_accounts}\n                                                name='transfer_to'\n                                                value={this.props.selected_to.value}\n                                                onChange={this.props.onChangeTransferTo}\n                                            />\n                                            <Field name='amount'>\n                                                {({ field }) => (\n                                                    <Input\n                                                        { ...field }\n                                                        onChange={(e) => {\n                                                            this.props.setErrorMessage('');\n                                                            handleChange(e);\n                                                        }}\n                                                        className='cashier__input-long dc-input--no-placeholder'\n                                                        type='text'\n                                                        label={localize('Amount')}\n                                                        error={ touched.amount && errors.amount }\n                                                        required\n                                                        leading_icon={\n                                                            this.props.selected_from.currency ?\n                                                                <span className={classNames('cashier__amount-symbol', 'symbols', `symbols--${this.props.selected_from.currency.toLowerCase()}`)} />\n                                                                : undefined\n                                                        }\n                                                        autoComplete='off'\n                                                        maxLength='30'\n                                                        hint={\n                                                            this.props.transfer_limit.max &&\n                                                            <Localize\n                                                                i18n_default_text='Transfer limit: <0 />'\n                                                                components={[\n                                                                    <Money\n                                                                        key={0}\n                                                                        amount={this.props.transfer_limit.max}\n                                                                        currency={this.props.selected_from.currency}\n                                                                    />,\n                                                                ]}\n                                                            />\n                                                        }\n                                                    />\n                                                )}\n                                            </Field>\n                                            <div>\n                                                <div className='account-transfer__notes'>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span><Localize i18n_default_text='Transfer limits may vary depending on changes in exchange rates.' /></span>\n                                                    </div>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span>\n                                                            <Localize\n                                                                i18n_default_text='Transfers are subject to a {{transfer_fee}}% transfer fee or {{currency}} {{minimum_fee}}, whichever is higher.'\n                                                                values={{\n                                                                    transfer_fee: this.props.transfer_fee,\n                                                                    currency    : this.props.selected_from.currency,\n                                                                    minimum_fee : this.props.minimum_fee,\n                                                                }}\n                                                            />\n                                                        </span>\n                                                    </div>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span><Localize i18n_default_text='Transfers are possible only between your fiat and cryptocurrency accounts (and vice versa), or between your {{website_name}} account and your {{website_name}} MT5 (DMT5) account (or vice versa).' values={{ website_name }} /></span>\n                                                    </div>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span><Localize i18n_default_text='Transfers may be unavailable at times such as when the market is closed (weekends or holidays), periods of high volatility, or when there are technical issues.' /></span>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className='cashier__form-submit'>\n                                                {this.props.error.message &&\n                                                <React.Fragment>\n                                                    <Icon icon='IconEmergency' className='cashier__form-error-icon' />\n                                                    <Icon icon='IconError' className='cashier__form-error-small-icon' />\n                                                    <p className='cashier__form-error'>\n                                                        {this.props.error.message}\n                                                    </p>\n                                                </React.Fragment>\n                                                }\n                                                <Button\n                                                    className='cashier__form-submit-button btn--primary--default'\n                                                    type='submit'\n                                                    is_disabled={!isValid || isSubmitting}\n                                                >\n                                                    <Localize i18n_default_text='Transfer' />\n                                                </Button>\n                                            </div>\n                                        </Form>\n                                    }\n                                </React.Fragment>\n                            )\n                        }\n                    </Formik>\n                </React.Fragment>\n            </div>\n        );\n    }\n}\n\nAccountTransferForm.propTypes = {\n    accounts_list                 : PropTypes.array,\n    error                         : PropTypes.object,\n    minimum_fee                   : PropTypes.string,\n    onChangeTransferFrom          : PropTypes.func,\n    onChangeTransferTo            : PropTypes.func,\n    requestTransferBetweenAccounts: PropTypes.func,\n    selected_from                 : PropTypes.object,\n    selected_to                   : PropTypes.object,\n    setErrorMessage               : PropTypes.func,\n    transfer_fee                  : PropTypes.number,\n    transfer_limit                : PropTypes.object,\n};\n\nexport default connect(\n    ({ modules }) => ({\n        accounts_list                 : modules.cashier.config.account_transfer.accounts_list,\n        minimum_fee                   : modules.cashier.config.account_transfer.minimum_fee,\n        onChangeTransferFrom          : modules.cashier.onChangeTransferFrom,\n        onChangeTransferTo            : modules.cashier.onChangeTransferTo,\n        requestTransferBetweenAccounts: modules.cashier.requestTransferBetweenAccounts,\n        selected_from                 : modules.cashier.config.account_transfer.selected_from,\n        selected_to                   : modules.cashier.config.account_transfer.selected_to,\n        setErrorMessage               : modules.cashier.setErrorMessage,\n        transfer_fee                  : modules.cashier.config.account_transfer.transfer_fee,\n        transfer_limit                : modules.cashier.config.account_transfer.transfer_limit,\n    })\n)(AccountTransferForm);\n","import React    from 'react';\nimport Icon     from 'Assets/icon.jsx';\nimport Localize from 'App/Components/Elements/localize.jsx';\n\nclass AccountTransferNoAccount extends React.Component {\n    render = () => {\n        return (\n            <div className='cashier__wrapper account-transfer__no-balance'>\n                <Icon icon='IconNoBalance' className='account-transfer__no-balance-icon' />\n                <h2 className='withdraw__header'><Localize i18n_default_text='You need at least two accounts' /></h2>\n                <p className='cashier__text'><Localize i18n_default_text='Please create a second account (Deriv or DMT5) to enable fund transfers.' /></p>\n                {/* TODO: add account opening CTA and MT5 account opening CTA once ready */}\n            </div>\n        );\n    }\n}\n\nexport default AccountTransferNoAccount;\n","import classNames     from 'classnames';\nimport PropTypes      from 'prop-types';\nimport React          from 'react';\nimport { withRouter } from 'react-router';\nimport { Button }     from 'deriv-components';\nimport Localize       from 'App/Components/Elements/localize.jsx';\nimport { localize }   from 'App/i18n';\nimport Icon           from 'Assets/icon.jsx';\nimport { connect }    from 'Stores/connect';\n\nclass AccountTransferReceipt extends React.Component {\n    componentWillUnmount() {\n        this.props.resetAccountTransfer();\n    }\n\n    render() {\n        const {\n            receipt,\n            selected_from,\n            selected_to,\n        } = this.props;\n\n        return (\n            <div className='cashier__wrapper account-transfer__receipt'>\n                <Icon icon='IconTransferDone' className='account-transfer__receipt-icon' />\n                <h2 className='cashier__header'>\n                    <Localize i18n_default_text='Your funds have been transferred.' />\n                </h2>\n                <div className='cashier__transferred-amount cashier__text--bold'>\n                    <span\n                        className={classNames('symbols', `symbols--${selected_from.currency.toLowerCase()}`)}\n                    />\n                    {receipt.amount_transferred}\n                </div>\n                <div className='cashier__transferred-details-wrapper'>\n                    <span className='account-transfer__transfer-details-from'>\n                        <Icon\n                            icon='IconAccountsCurrency'\n                            type={selected_from.mt_icon || selected_from.currency.toLowerCase()}\n                            height={16}\n                            width={16}\n                        />\n                        <span className='cashier__transferred-details'>\n                            <span className='cashier__text--bold'>{selected_from.text}</span>\n                        </span>\n                    </span>\n                    <Icon className='cashier__transferred-icon' icon='IconBack' />\n                    <span className='account-transfer__transfer-details-to'>\n                        <Icon\n                            icon='IconAccountsCurrency'\n                            type={selected_to.mt_icon || selected_to.currency.toLowerCase()}\n                            height={16}\n                            width={16}\n                        />\n                        <span className='cashier__transferred-details'>\n                            <span className='cashier__text--bold'>{selected_to.text}</span>\n                        </span>\n                    </span>\n                </div>\n                <Button\n                    className='btn--primary--default account-transfer__button-done'\n                    has_effect\n                    text={localize('Done')}\n                    onClick={this.props.resetAccountTransfer}\n                />\n            </div>\n        );\n    }\n}\n\nAccountTransferReceipt.propTypes = {\n    receipt             : PropTypes.object,\n    resetAccountTransfer: PropTypes.func,\n    selected_from       : PropTypes.object,\n    selected_to         : PropTypes.object,\n};\n\nexport default withRouter(connect(\n    ({ modules }) => ({\n        receipt             : modules.cashier.config.account_transfer.receipt,\n        resetAccountTransfer: modules.cashier.resetAccountTransfer,\n        selected_from       : modules.cashier.config.account_transfer.selected_from,\n        selected_to         : modules.cashier.config.account_transfer.selected_to,\n    })\n)(AccountTransferReceipt));\n","import PropTypes                from 'prop-types';\nimport React                    from 'react';\nimport { connect }              from 'Stores/connect';\nimport AccountTransferForm      from './AccountTransfer/account-transfer-form.jsx';\nimport AccountTransferNoAccount from './AccountTransfer/account-transfer-no-account.jsx';\nimport AccountTransferReceipt   from './AccountTransfer/account-transfer-receipt.jsx';\nimport Error                    from './error.jsx';\nimport TransferNoBalance        from './transfer-no-balance.jsx';\nimport Loading                  from '../../../templates/_common/components/loading.jsx';\n\nclass AccountTransfer extends React.Component {\n    componentDidMount() {\n        this.props.setActiveTab(this.props.container);\n        this.props.onMount();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.props.is_loading ?\n                    <Loading className='cashier__loader' />\n                    :\n                    <React.Fragment>\n                        {/* for errors with CTA hide the form and show the error,\n                         for others show them at the bottom of the form next to submit button */}\n                        {this.props.error.button_text ?\n                            <Error error={this.props.error} />\n                            :\n                            (this.props.has_no_account ?\n                                <AccountTransferNoAccount />\n                                :\n                                (this.props.has_no_balance ?\n                                    <TransferNoBalance setModalIndex={this.props.setModalIndex} />\n                                    :\n                                    (this.props.is_transfer_successful ?\n                                        <AccountTransferReceipt />\n                                        :\n                                        <AccountTransferForm error={this.props.error} />\n                                    )\n                                )\n                            )\n                        }\n                    </React.Fragment>\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nAccountTransfer.propTypes = {\n    container             : PropTypes.string,\n    error                 : PropTypes.object,\n    has_no_account        : PropTypes.bool,\n    has_no_balance        : PropTypes.bool,\n    is_loading            : PropTypes.bool,\n    is_transfer_successful: PropTypes.bool,\n    onMount               : PropTypes.func,\n    setActiveTab          : PropTypes.func,\n    setModalIndex         : PropTypes.func,\n};\n\nexport default connect(\n    ({ modules, ui }) => ({\n        container             : modules.cashier.config.account_transfer.container,\n        error                 : modules.cashier.config.account_transfer.error,\n        has_no_account        : modules.cashier.config.account_transfer.has_no_account,\n        has_no_balance        : modules.cashier.config.account_transfer.has_no_balance,\n        is_loading            : modules.cashier.is_loading,\n        is_transfer_successful: modules.cashier.config.account_transfer.is_transfer_successful,\n        onMount               : modules.cashier.onMountAccountTransfer,\n        setActiveTab          : modules.cashier.setActiveTab,\n        setModalIndex         : ui.setModalIndex,\n    })\n)(AccountTransfer);\n"],"sourceRoot":""}