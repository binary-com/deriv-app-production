{"version":3,"sources":["webpack://deriv-bot/./src/assets/sass/dialog.scss","webpack://deriv-bot/./src/assets/sass/google-drive.scss","webpack://deriv-bot/./src/assets/sass/saveload-modal.scss","webpack://deriv-bot/./src/assets/sass/contract-result-overlay.scss","webpack://deriv-bot/./src/assets/sass/trade-animation.scss","webpack://deriv-bot/./src/assets/sass/scratch/toolbar.scss","webpack://deriv-bot/./src/assets/sass/journal.scss","webpack://deriv-bot/./src/assets/sass/contract-card.scss","webpack://deriv-bot/./src/assets/sass/summary.scss","webpack://deriv-bot/./src/assets/sass/transactions.scss","webpack://deriv-bot/./src/assets/sass/run-panel.scss","webpack://deriv-bot/./src/assets/sass/scratch/flyout.scss","webpack://deriv-bot/./src/assets/sass/notification-messages.scss","webpack://deriv-bot/./src/assets/sass/scratch/workspace.scss","webpack://deriv-bot/./src/assets/sass/scratch/toolbox.scss","webpack://deriv-bot/./src/assets/sass/quick-strategy.scss"],"names":[],"mappings":"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","file":"bot.main.css","sourcesContent":["/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n/**\n* @define bot-dialog\n**/\n.bot-dialog {\n    &__content {\n        display: flex;\n        flex-direction: column;\n        font-size: 14px;\n        padding: 16px;\n    }\n    &__header {\n        font-weight: 700;\n        text-align: left;\n        margin-bottom: 16px;\n    }\n    &__text {\n        text-align: left;\n        line-height: 40px;\n    }\n    &__footer {\n        align-self: flex-end;\n        justify-content: flex-end;\n        display: flex;\n    }\n    &__cancel {\n        margin: 1.6rem 1.6rem 0 0 !important;\n    }\n    &__ok {\n        margin-top: 1.6rem;\n    }\n}","/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n.picker-dialog {\n    z-index: 9999 !important;\n}","/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n.dc-modal {\n    $saveload-modal : 'modal--saveload';\n\n    &__container {\n        &_#{$saveload-modal} {\n            width: 450px;\n\n            .modal__content {\n                padding: 26px;\n            }\n            .modal__footer {\n                text-align: right;\n\n                &--button {\n                    margin: 1.4rem 1.6rem 1.4rem 0;\n                    display: inline-block;\n                }\n            }\n            .modal__content-row {\n                padding: 21px 21px 35px;\n            }\n        }\n    }\n}\n\n// TODO: [fix-dc-bundle] Fix import issue with Deriv Component stylesheets (app should take precedence, and not repeat)\ndiv.radio-group {\n    &__saveload-type {\n        display: flex;\n        justify-content: center;\n        margin-top: 0;\n\n        .dc-radio {\n            &-group {\n                &__item {\n                    display: flex;\n                    flex-direction: column;\n                    padding: 8px;\n                    width: 104px;\n                    border: solid 1px var(--general-active);\n                    border-radius: 4px;\n\n                    &-disabled {\n                        .saveload-type__text {\n                            color: var(--general-disabled) !important;\n                        }\n                        .dc-radio-group__circle {\n                            border-color: var(--general-disabled) !important;\n                        }\n                    }\n                }\n                &__circle {\n                    align-self: flex-start;\n                }\n                &__label {\n                    align-self: center;\n                }\n            }\n        }\n    }\n}\n\n.saveload-type {\n    &__checkbox-text {\n        font-size: 14px;\n        font-weight: bold;\n        line-height: 1.43;\n        letter-spacing: normal;\n        color: var(--text-prominent);\n    }\n    &__checkbox-description {\n        font-size: 14px;\n        font-weight: normal;\n        line-height: 1.43;\n        letter-spacing: normal;\n        color: var(--text-prominent);\n        margin: 8px 0 0 20px;\n    }\n    &__container {\n        text-align: center;\n    }\n    &__radio {\n        text-align: center;\n    }\n    &__radio-text {\n        font-size: 14px;\n        font-weight: bold;\n        margin-top: 8px;\n        line-height: 1.43;\n        letter-spacing: normal;\n        color: var(--text-prominent);\n\n        &--disabled {\n            color: var(--text-disabled);\n        }\n    }\n    &__drive-status {\n        cursor: pointer;\n        position: absolute;\n        margin-top: 20px;\n        font-weight: bold;\n        color: var(--brand-red-coral);\n        width: 80px;\n    }\n}","/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n@keyframes animate-fade-in {\n    0% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n\n.db-contract-card__result {\n    $contract_result: &;\n\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border-radius: $BORDER_RADIUS;\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n    box-sizing: border-box;\n    z-index: 2;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: var(--overlay-inside-dialog);\n    animation: animate-fade-in 0.3s;\n\n    &:hover {\n        background: 0;\n\n        #{$contract_result}-caption {\n            opacity: 0;\n        }\n    }\n    &-caption {\n        display: flex;\n        align-items: center;\n        transition: opacity 0.25s linear;\n        font-weight: bold;\n        font-size: 16px;\n    }\n    &-icon {\n        margin-left: 10px;\n    }\n    &--won {\n        background-image: $COLOR_LIGHT_GREEN_GRADIENT; // TODO: Update when gradients are added.\n\n        > #{$contract_result}-caption {\n            color: var(--text-profit-success);\n        }\n    }\n    &--lost {\n        background-image: $COLOR_LIGHT_RED_GRADIENT; // TODO: Update when gradients are added.\n\n        > #{$contract_result}-caption {\n            color: var(--text-loss-danger);\n        }\n    }\n}","/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n@keyframes animate-progress {\n    0% {\n        width: 0%;\n    }\n    100% {\n        width: calc(50% - 3.5px);\n    }\n}\n\n@keyframes animate-progress-complete {\n    0% {\n        width: 50%;\n    }\n    100% {\n        width: calc(100% - 5px);\n    }\n}\n\n@keyframes animate-circle {\n    0% {\n        transform: scale(0);\n    }\n    50% {\n        transform: scale(1.5);\n    }\n    100% {\n        transform: scale(0);\n    }\n}\n\n@keyframes animate-circle-appear {\n    0% {\n        transform: scale(0);\n    }\n    100% {\n        transform: scale(1);\n    }\n}\n\n@keyframes animate-circle-pop {\n    0% {\n        transform: scale(0);\n    }\n    50% {\n        transform: scale(1);\n    }\n    100% {\n        transform: scale(0);\n    }\n}\n\n.animation {\n    $static-circle-diameter: 6px;\n    $dynamic-circle-diameter: 10px;\n    $animation: &;\n\n    &__container {\n        width: auto;\n        padding: 5px 12px;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-evenly;\n        border-radius: 4px;\n        border: solid 1px var(--border-normal);\n        position: relative;\n    }\n    &__text {\n        font-size: 12px;\n        font-weight: bold;\n        text-align: center;\n        margin-bottom: 5px;\n        line-height: 18px;\n    }\n    &__progress {\n        display: flex;\n        justify-content: space-between;\n        position: relative;\n\n        .circular-wrapper {\n            width: $static-circle-diameter;\n            height: $static-circle-diameter;\n            display: flex;\n\n            .static-circle {\n                width: $static-circle-diameter;\n                height: $static-circle-diameter;\n                background-color: var(--border-normal);\n                border-radius: 100%;\n                align-self: center;\n                z-index: 1;\n            }\n            .dynamic-circle {\n                border-radius: 100%;\n                height: $dynamic-circle-diameter;\n                width: $dynamic-circle-diameter;\n                margin-left: -2px;\n                margin-top: -2px;\n                opacity: 0.32;\n                position: absolute;\n            }\n        }\n        &-line {\n            background-color: var(--border-normal);\n            height: 2px;\n            width: 100%;\n            top: 30%;\n            position: absolute;\n        }\n        &-bar {\n            background-color: var(--status-success);\n            width: 0;\n            height: 100%;\n        }\n        &-3 {\n            animation: animate-progress 0.5s 1;\n            animation-fill-mode: forwards;\n        }\n        &-4 {\n            width: calc(50% - 3.5px);\n        }\n        &-5 {\n            animation: animate-progress-complete 0.5s 1;\n            animation-fill-mode: forwards;\n        }\n    }\n    &--running {\n        #{$animation}__progress {\n            .circular-wrapper {\n                &.completed, &.active {\n                    .static-circle {\n                        background-color: var(--status-success);\n                        border: 2px solid var(--status-success);\n                        transform: scale(1.2);\n                    }\n                }\n                &.active {\n                    .dynamic-circle {\n                        animation: animate-circle 0.8s infinite;\n                        animation-timing-function: cubic-bezier(0.25, 0.1, 0.25, 1);\n                        background-color: var(--status-success);\n                        // transform: translate(-50%, -50%);\n                        // z-index: 1;\n                    }\n                }\n                .static-circle {\n                    animation: animate-circle-appear 1s;\n                    background-color: var(--status-warning);\n                }\n                .dynamic-circle {\n                    animation: animate-circle 1s;\n                    background-color: var(--status-warning);\n                    transform: scale(0);\n                }\n            }\n        }\n    }\n    &--completed {\n        border: 1px solid var(--general-main-1);\n    }\n    &--hidden {\n        visibility: hidden;\n    }\n}\n","/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n.toolbar {\n    height: 56px;\n    display: flex;\n    justify-content: space-between;\n    box-shadow: inset 0 1px 0 0 var(--general-section-1), inset 0 -1px 0 0 var(--general-section-1);\n    padding: 5px 6px;\n\n    &__btn {\n        &--icon {\n            display: flex;\n            justify-content: center;\n            margin: 0 4px;\n            height: calc(56px - 18px);\n\n            > * {\n                align-self: center;\n            }\n            &-text {\n                @include typeface(--title-center-bold-active, none);\n            }\n        }\n        &--start {\n            height: 40px !important;\n            margin-right: 0px !important;\n        }\n    }\n    //TODO remove this after popover bug fixes\n    &__bubble {\n        left: 130px !important;\n        top: 95px !important;\n        background: var(--border-normal) !important;\n    }\n    &__section {\n        display: flex;\n\n        > * {\n            align-self: center;\n            margin: 0 4px;\n        }\n    }\n    &__icon {\n        cursor: pointer;\n        border: none;\n        margin: auto 12px;\n        height: 16px;\n        width: 16px;\n\n        &--stop {\n            stroke: var(--text-prominent);\n        }\n        &--disabled {\n            stroke: var(--general-disabled);\n            pointer-events: none;\n        }\n    }\n    &__group {\n        display: flex;\n        border-radius: $BORDER_RADIUS;\n        border: solid 1px var(--border-normal);\n        height: 40px;\n\n        &-btn {\n            padding: 0px 12px;\n            height: 40px;\n\n            > * {\n                align-self: center;\n            }\n        }\n    }\n    &__form {\n        width: 18%;\n        min-width: 160px;\n        height: 40px;\n\n        &-field {\n            margin-bottom: 0;\n\n            input {\n                width: 80%;\n            }\n            input::-ms-clear {\n                display: none;\n            }\n        }\n    }\n    &__animation {\n        width: 354px;\n    }\n}\n\n.loader {\n    border: 1px solid var(--general-active);\n    border-top: 1px solid var(--brand-secondary);\n    border-radius: 50%;\n    width: 15px;\n    height: 15px;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n.vertical-divider {\n    width: 1px;\n    height: 17px;\n    margin: 8px;\n    background-color: var(--border-normal);\n}\n","/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n/**\n * @define journal\n */\n.journal {\n    &__table {\n        display: block;\n        font-size: 10px;\n\n        &--header {\n            position: fixed;\n            display: table;\n            font-size: 12px;\n            font-weight: bold;\n            line-height: 40px;\n            width: 100%;\n            border-bottom: 1px solid var(--general-section-1);\n        }\n        &--body {\n            &:before {\n                content: '';\n                display: block;\n                height: 40px;\n            }\n        }\n        &--th {\n            background-color: var(--general-main-1);\n            text-align: left;\n            padding-left: 16px;\n\n            &:nth-child(1) {\n                width: 30%;\n            }\n            &:nth-child(2) {\n                width: 70%;\n            }\n        }\n        &--tr {\n            &:nth-child(odd) {\n                background: var(--general-main-1);\n            }\n            &:nth-child(even) {\n                background: var(--general-section-1);\n            }\n        }\n        &--td {\n            height: 40px;\n            display: table-cell;\n            vertical-align: middle;\n            padding: 8px 0 8px 16px;\n            line-height: 16px;\n            word-break: break-word;\n\n            &:nth-child(1) {\n                width: 30%;\n            }\n            &:nth-child(2) {\n                width: 70%;\n            }\n        }\n        &--date, &--time {\n            line-height: 1.4em;\n        }\n        &--bold {\n            font-weight: 700;\n        }\n        &--red {\n            color: var(--text-loss-danger);\n        }\n        &--green {\n            color: var(--text-profit-success);\n        }\n        &--blue {\n            color: var(--status-info);\n        }\n    }\n}","/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n.db-contract-card {\n    $contract-card: &;\n\n    border: 1px solid var(--border-disabled);\n    border-radius: $BORDER_RADIUS;\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: column;\n    height: 151px;\n    min-height: 151px;\n    position: relative;\n    margin: -1px;\n\n    &__underlying {\n        border-radius: $BORDER_RADIUS - 1px;\n        display: grid;\n        grid-template-columns: 1fr 1.5fr;\n        padding: 11px 5px;\n\n        &-name {\n            display: flex;\n            align-items: center;\n        }\n        &-symbol {\n            margin-left: 8px;\n            font-size: 12px;\n            font-weight: bold;\n        }\n        &-type {\n            display: flex;\n            align-items: center;\n\n            &-label {\n                margin-left: 8px;\n                font-size: 12px;\n                font-weight: bold;\n            }\n            &-icon {\n                display: flex;\n                align-self: center;\n            }\n        }\n    }\n    &__separator {\n        margin: 0 8px;\n        height: 2px;\n        border-top: 1px solid var(--border-disabled);\n    }\n    &__stats {\n        margin: auto 15px;\n        padding: 8px 0;\n    }\n    &__grid {\n        display: grid;\n        grid-template-columns: 1.5fr 1fr;\n        padding: 2px 20px;\n    }\n    &__profit-loss,\n    &__indicative-price,\n    &__purchase-price,\n    &__potential-payout {\n        align-items: center;\n        display: flex;\n        text-align: center;\n        height: 16px;\n\n        &-label {\n            font-size: 10px;\n            color: var(--text-general);\n        }\n        &-amount {\n            min-height: 16px;\n            font-size: 12px;\n            font-weight: bold;\n        }\n    }\n    &__profit-loss {\n        &--positive {\n            color: var(--text-profit-success);\n\n            &:before {\n                content: '+';\n                color: inherit;\n            }\n        }\n        &--negative {\n            color: var(--text-loss-danger);\n\n            &:before {\n                content: '-';\n                color: inherit;\n            }\n        }\n        &--is-crypto {\n            margin-left: -6px;\n        }\n    }\n    &__indicative-movement {\n        display: flex;\n        align-items: center;\n        width: 16px;\n        margin-left: 2px;\n    }\n    &--inactive {\n        background-color: var(--general-section-1);\n        border: 1px solid var(--general-main-1);\n        font-size: 14px;\n        justify-content: center;\n        margin: auto;\n        text-align: center;\n    }\n    &--is-winning {\n        #{$contract-card}__underlying {\n            background-image: var(--gradient-success);\n        }\n    }\n    &--is-losing {\n        #{$contract-card}__underlying {\n            background-image: var(--gradient-danger);\n        }\n    }\n    &--is-loading {\n        background-color: inherit;\n        border: 1px solid var(--general-main-1);\n    }\n    &--completed {\n        border: 1px solid var(--general-main-1);\n\n        &:hover {\n            border: 1px solid var(--border-disabled);\n        }\n    }\n}\n","/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n.summary {\n    height: calc(100vh - 324px);\n    padding: 16px;\n\n    &__tiles {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: space-between;\n        margin: 24px 0;\n    }\n    &__tile {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        border-radius: $BORDER_RADIUS;\n        width: 32%;\n        max-width: 32%;\n        text-align: center;\n        background-color: var(--general-section-1);\n        padding: 8px 8px 0;\n        margin-bottom: 2%;\n        height: 56px;\n\n        &-title {\n            height: 18px;\n            margin-bottom: 4px;\n            @include typeface(--small-center-bold-black, none);\n        }\n        &-content {\n            height: 18px;\n            margin-bottom: 4px;\n            @include typeface(--small-center-normal-black, none);\n        }\n    }\n    &__amount {\n        @include typeface(--small-center-normal-black, none);\n\n        &--positive {\n            font-weight: bold;\n            color: var(--text-profit-success);\n        }\n        &--negative {\n            font-weight: bold;\n            color: var(--text-loss-danger);\n        }\n    }\n}","/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n.transactions {\n    &__header {\n        display: flex;\n        font-size: 12px;\n        font-weight: bold;\n        line-height: 40px;\n        width: 100%;\n        padding-left: 31px;\n        border-bottom: 1px solid var(--border-normal);\n\n        &--col {\n            display: table-cell;\n            vertical-align: middle;\n\n            &:nth-child(1) {\n                width: 35%;\n            }\n            &:nth-child(2) {\n                width: 30%;\n            }\n            &:nth-child(3) {\n                width: 35%;\n            }\n        }\n    }\n    &__item {\n        display: table;\n        font-size: 10px;\n        text-align: left;\n        width: 90%;\n        height: 40px;\n        border: 1px solid var(--border-normal);\n        border-collapse: initial;\n        border-radius: 4px;\n        margin: 8px 0 0 16px;\n        padding: 0 8px;\n    }\n    &__inline {\n        display: inline-block;\n        margin-right: 5px;\n    }\n    &__middle {\n        vertical-align: middle;\n    }\n    &__margin-bottom {\n        margin-bottom: 6px;\n    }\n    &_row {\n        display: flex;\n    }\n    &__col {\n        padding: 4px 0;\n        vertical-align: middle;\n\n        &:nth-child(1) {\n            width: 45%;\n        }\n        &:nth-child(2) {\n            width: 35%;\n        }\n        &:nth-child(3) {\n            width: 15%;\n        }\n        &:nth-child(4) {\n            width: 5%;\n        }\n    }\n    &__green {\n        color: var(--text-profit-success);\n        font-weight: bold;\n\n        &:before {\n            content: '+';\n        }\n    }\n    &__red {\n        color: var(--text-loss-danger);\n        font-weight: bold;\n\n        &:before {\n            content: '-';\n        }\n    }\n}","/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n/**\n* @define -panel\n**/\n// TODO: [fix-dc-bundle] Fix import issue with Deriv Component stylesheets (app should take precedence, and not repeat)\ndiv.run-panel {\n    height: calc(100% - 140px);\n    top: 104px;\n    z-index: 9;\n\n    &__footer {\n        text-align: center;\n        height: 152px;\n        margin: 16px 0;\n    }\n    &__buttons {\n        display: inline-flex !important;\n        justify-content: space-between;\n        width: 67%;\n        height: 6rem;\n        align-items: center;\n    }\n    &__icon-info {\n        vertical-align: middle;\n    }\n    &__info {\n        display: inline-block;\n        font-size: 10px;\n\n        //TODO remove this after popover bug fixes\n        &--bubble {\n            left: calc(100vw - 156px) !important;\n            width: 400px !important;\n\n            .dc-popover__bubble__arrow {\n                left: 83% !important;\n            }\n        }\n    }\n    &__animation {\n        height: 64px;\n        margin: 0 16px;\n    }\n}","/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n@keyframes animate-fade-in {\n    0% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n\n.flyout {\n    $flyout        : &;\n    $default-margin: 15px;\n    $button-padding: 5px 20px;\n\n    position: absolute;\n    left: 250px;\n    background-color: var(--general-main-1);\n    height: calc(100% - 40px);\n    max-height: calc(100% - 40px);\n    z-index: 1;\n    border-radius: 10px;\n    font-size: 2em;\n    margin-left: $default-margin;\n    margin-top: 20px;\n    box-shadow: 0 2px 8px 0 $COLOR_LIGHT_BLACK_2;\n    min-width: 400px;\n\n    &__item:hover {\n        .flyout__button-add--hide {\n            display: flex !important;\n            animation: animate-fade-in 0.3s;\n        }\n    }\n    &__content {\n        overflow: auto;\n        padding: 5px 25px;\n        height: calc(100% - 56px);\n    }\n    &__block-workspace {\n        margin-bottom: $default-margin;\n    }\n    &__button {\n        &-new {\n            width: 100%;\n            font-size: 100%;\n            box-shadow: 0 2px 8px 0 $COLOR_LIGHT_BLACK_2;\n            margin: $default-margin 0;\n            background-color: var(--general-main-1);\n        }\n        &-add {\n            color: var(--general-main-1);\n\n            &--hide {\n                display: none !important;\n            }\n        }\n        &-back {\n            padding: 0 15px;\n            align-self: center;\n            background-color: transparent;\n            color: $COLOR_BLACK;\n\n            svg {\n                vertical-align: middle;\n            }\n            &:focus {\n                outline: none;\n            }\n        }\n        &-next,\n        &-previous {\n            margin-left: 1em;\n            color: $COLOR_LIGHT_BLACK_1;\n            background-color: var(--general-section-1);\n            display: flex;\n\n            &:focus {\n                outline: none;\n            }\n        }\n    }\n    &__item {\n        line-height: 1.3em;\n        font-size: 14px;\n\n        &:not(:last-of-type) {\n            margin-bottom: 30px;\n        }\n        &-header {\n            display: flex;\n            margin-top: $default-margin;\n            margin-bottom: 10px;\n        }\n        &-label {\n            font-weight: bold;\n            font-size: 18px;\n            line-height: 2em;\n        }\n        &-buttons {\n            margin-left: auto;\n            align-self: center;\n        }\n        &-info {\n            cursor: pointer;\n            font-weight: bold;\n            display: block;\n            color: $COLOR_RED;\n        }\n        &-description {\n            font-size: 14px;\n            margin-bottom: 1em;\n            line-height: 1.3em;\n        }\n    }\n    &__image {\n        width: 100%;\n        height: auto;\n        border-radius: 0.5em;\n\n    }\n    &__video {\n        width: 100%;\n        height: 20vh;\n        border-radius: 0.5em;\n    }\n    &__help {\n        padding: 0;\n        height: 100%;\n\n        &-header {\n            padding: 15px;\n            display: flex;\n            background-color: var(--general-section-1);\n        }\n        &-content {\n            padding: 1.5em;\n            font-size: 0.8em;\n            overflow-y: auto;\n            height: calc(100vh - 295px);\n\n            #{$flyout}__item {\n                margin-bottom: 0.8em;\n            }\n        }\n        &-title {\n            align-self: center;\n            font-size: 16px;\n            font-weight: bold;\n        }\n        &-footer {\n            display: flex;\n            justify-content: flex-end;\n            padding: 0.5em 0.8em;\n            border-top: solid 0.1em var(--general-section-1);\n        }\n    }\n    &__search {\n        left: 0;\n        padding: 0;\n\n        &-header {\n            padding: 20px;\n            background-color: var(--general-disabled);\n            display: flex;\n            justify-content: space-between;\n\n            &-text {\n                font-size: 16px;\n                font-weight: bold;\n                align-self: center;\n            }\n            &-results {\n                color: $COLOR_GREEN_5;\n            }\n        }\n        &-empty {\n            padding: 25px 0;\n            font-size: 16px;\n            font-weight: bold;\n        }\n        #{$flyout}__help-content {\n            height: calc(100% - 60px);\n        }\n    }\n    &__normal {\n        &-content {\n            height: 100%;\n        }\n    }\n}","/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n.notifications-container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: calc(100% - 30px);\n    height: 100%;\n\n    .notification-messages {\n        transition: transform 0.3s ease, opacity 0.25s linear;\n    }\n    &--is-panel-open {\n        .notification-messages {\n            transform: translate3d(calc(-346px), 0, 0);\n        }\n    }\n}\n","/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n// #scratch_area {\n//     position: absolute;\n//     height: 100%;\n//     width: 100%;\n// }\n\n#scratch_div {\n    position: relative;\n}\n\n.blocklyTextRootBlockHeader {\n    font-size: 16px;\n    font-weight: 500;\n    color: #333;\n}\n\n.blocklyMainWorkspaceScrollbar {\n    display: none;\n}\n","/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n$category-colours: (\n    search             : #afffda,\n\n    trade_parameters   : #f3f3f3,\n    purchase_conditions: #f3f3f3,\n    sell_conditions    : #f3f3f3,\n    trade_results      : #f3f3f3,\n\n    contract_details   : #f3f3f3,\n    analysis           : #f3f3f3,\n    tick_analysis      : #f3f3f3,\n    indicators         : #f3f3f3,\n    stats              : #f3f3f3,\n\n    utility            : #f3f3f3,\n    math               : #f3f3f3,\n    text               : #f3f3f3,\n    logic              : #f3f3f3,\n    lists              : #f3f3f3,\n    custom_functions   : #f3f3f3,\n    variables          : #f3f3f3,\n    loops              : #f3f3f3,\n    time               : #f3f3f3,\n    misc               : #f3f3f3,\n    notifications      : #f3f3f3\n);\n\n.toolbox {\n    $toolbox         : &;\n    $white           : #fff;\n    $lightgrey       : #ebebeb;\n    $grey            : #f4f4f6;\n    $gray20          : #333;\n    $category-text-spacing: 10px;\n\n    background-color: $white;\n    border: 1px solid $lightgrey;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n    position: absolute;\n    user-select: none;\n    z-index: 1;\n    width: 250px;\n\n    &__header {\n        padding: 8px;\n        margin-bottom: 10px;\n        position: relative;\n        font-weight: bold;\n        font-size: 1.6em;\n        background-color: $grey;\n        text-align: center;\n    }\n    &__item {\n        display: flex;\n        flex-direction: row;\n    }\n    &__category-arrow {\n        display: flex;\n        margin: auto;\n\n        &--back {\n            margin-left: $category-text-spacing;\n            fill: $gray20;\n            transform: rotate(90deg);\n        }\n        &--open {\n            margin-right: $category-text-spacing;\n            transform: rotate(270deg);\n        }\n    }\n    &__category-colour {\n        width: 5px;\n        flex-shrink: 0;\n    }\n    @each $category, $colour in $category-colours {\n        &__category {\n            &--#{$category} {\n                #{$toolbox}__category-colour {\n                    background-color: $colour;\n                }\n            }\n        }\n        &__category-return {\n            #{$toolbox}__category {\n                &--#{$category} {\n                    background-color: $lightgrey;\n                    color: $gray20;\n                    max-height: 38px;\n                }\n            }\n        }\n    }\n\n    &__category-menu {\n        display: flex;\n        flex-direction: column;\n        flex-grow: 1;\n        min-height: 0;\n        overflow-y: auto;\n        overflow-x: hidden;\n    }\n    &__category-return {\n        cursor: pointer;\n        text-align: center;\n\n        #{$toolbox}__label {\n            margin-left: -($category-text-spacing * 2);\n        }\n    }\n    &__category-text {\n        align-self: center;\n        margin: $category-text-spacing;\n        width: 100%;\n    }\n    &__description {\n        font-size: 12px;\n        line-height: 1.4;\n    }\n    &__icon {\n        display: flex;\n        align-self: center;\n        margin-right: $category-text-spacing;\n\n        > svg {\n            height: 25px;\n            width: 25px;\n        }\n    }\n    &__label {\n        font-weight: bold;\n        font-size: 14px;\n        line-height: 1.4;\n    }\n    &__row {\n        cursor: pointer;\n        border-top: 1px solid $lightgrey;\n\n        &:last-of-type {\n            border-bottom: 1px solid $lightgrey;\n        }\n\n        @each $category, $colour in $category-colours {\n            #{$toolbox}__category {\n                &--#{$category} {\n                    &:hover:not(#{$toolbox}__category--selected) {\n                        background-image: linear-gradient(to right, $white 25%, transparentize($colour, 0.8) 100%);\n                    }\n                }\n                &--#{$category}#{$toolbox}__category--selected {\n                    background-color: transparentize($colour, 0.9);\n                    transition: background-color 0.25s ease;\n                }\n            }\n        }\n    }\n    &__separator {\n        padding: 10px 0;\n        border-top: 1px solid $lightgrey;\n    }\n    &__button.btn {\n        margin: 16px auto;\n        padding: 0;\n        width: 152px;\n        height: 32px;\n        color: var(--text-colored-background);\n        font-size: 14px;\n        font-weight: bold;\n        line-height: 1.4;\n    }\n}","/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-white: #ffffff;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-orange: #ff6444;\n$color-yellow: #ffad3a;\n$color-blue: #377cfc;\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK      : #000000;\n$COLOR_BLACK_2    : #1d1f20;\n$COLOR_BLACK_3    : #0e0e0e;\n$COLOR_GREEN_1    : #39b19d;\n$COLOR_GREEN_2    : #2d9f93;\n$COLOR_GREEN_3    : #21ce99;\n$COLOR_GREEN_4    : #00a79e;\n$COLOR_GREEN_5    : #4bb4b3;\n$COLOR_ORANGE     : #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE     : #4f60ae;\n$COLOR_RED        : #e31c4b;\n$COLOR_RED_2      : #cc2e3d;\n$COLOR_RED_3      : #ec3f3f;\n$COLOR_CORAL_RED  : #ff444f;\n$COLOR_SKY_BLUE   : #2196f3;\n$COLOR_WHITE      : #ffffff;\n$COLOR_BLUE       : #1c5ae3;\n// Light theme\n$COLOR_LIGHT_BLACK_1        : rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2        : rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3        : rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4        : rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID  : #f4f4f6;\n$COLOR_LIGHT_GRAY_1         : #999cac;\n$COLOR_LIGHT_GRAY_2         : rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3         : #eaeced;\n$COLOR_LIGHT_GRAY_4         : #6e6e6e;\n$COLOR_LIGHT_GRAY_5         : #c2c2c2;\n$COLOR_LIGHT_GREEN_GRADIENT : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT   : linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT : linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT : linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1         : #0b0e18;\n$COLOR_DARK_BLUE_2         : #101320;\n$COLOR_DARK_BLUE_3         : #191c31;\n$COLOR_DARK_BLUE_4         : #202641;\n$COLOR_DARK_BLUE_5         : #2a3052;\n$COLOR_DARK_BLUE_6         : #555975;\n$COLOR_DARK_BLUE_7         : #7f8397;\n$COLOR_DARK_BLUE_8         : rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT   : linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1         : #282a37;\n$COLOR_DARK_GRAY_2         : #303342;\n$COLOR_DARK_GRAY_3         : #555975;\n$COLOR_DARK_GRAY_4         : #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH  : 240px;\n$POSITIONS_DRAWER_MARGIN : 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    }\n    @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: ($key: $val);\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    }\n    @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    }\n    @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    }\n    @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);\n\n    $size  : nth($typeface_config, 1); // font-size\n    $align : nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color : nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after, &[data-tooltip-pos=top]:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos=right]:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos=left]:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos=bottom]:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'heading'   3rem,\n    'large'     2.8rem,\n    'title'     1.6rem,\n    'paragraph' 1.4rem,\n    'small'     1.2rem,\n    'xsmall'    1rem,\n    'xxsmall'   0.8rem,\n    'xxxsmall'  0.6rem,\n);\n\n$FONT_COLORS: (\n    'active'   var(--text-colored-background),\n    'black'    var(--text-general),\n    'grey'     var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green'    var(--text-profit-success),\n    'red'      var(--text-loss-danger),\n);\n\n$FONT_WEIGHTS: (\n    'bold'     700,\n    'semibold' 500,\n    'normal'   400,\n    'light'    300,\n);\n\n$TEXT_ALIGN: (\n    'center' center,\n    'left'   left,\n    'right'  right,\n);\n\n$LINEHEIGHTS: (\n    'large' : 1.75,\n    'medium': 1.5,\n    'small' : 1.25,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon.active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n// /*\n//  * Devices breakpoints - TODO: define proper breakpoints\n//  */\n// @mixin breakpoints($val) {\n//     $big-desktop: '(max-width: 1800px)';\n//     $tab-land   : '(max-width: 1200px)';\n//     $tab-port   : '(max-width: 900px)';\n//     $phone-xl   : '(max-width: 599px)';\n//     $phone-lg   : '(max-width: 480px)';\n\n//     @if $val == big-desktop {\n//         @media #{$big-desktop} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-land {\n//         @media #{$tab-land} {\n//             @content;\n//         }\n//     }\n//     @else if $val == tab-port {\n//         @media #{$tab-port} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-xl {\n//         @media #{$phone-xl} {\n//             @content;\n//         }\n//     }\n//     @else if $val == phone-lg {\n//         @media #{$phone-lg} {\n//             @content;\n//         }\n//     }\n// }\n\n.dc-modal {\n    $strategy-modal : 'modal--strategy';\n\n    &__container {\n        &_#{$strategy-modal} {\n            .modal__content {\n                padding: 15px 24px;\n            }\n        }\n    }\n}\n\n.quick-strategy {\n    $quick-strategy: &;\n\n    &__description {\n        margin-top: 15px;\n        font-size: 14px;\n        font-weight: normal;\n        line-height: 1.43;\n        color: var(--text-general);\n    }\n    &__tab-content {\n        height: calc(100vh - 330px);\n        overflow: auto;\n        display: flex;\n        flex-direction: column;\n    }\n    &__form {\n        margin-top: auto;\n\n        &-row {\n            width: 100%;\n            display: flex;\n            justify-content: space-between;\n            margin: 16px 0;\n\n            > * {\n                justify-content: center;\n            }\n            #{$quick-strategy}__input {\n                margin: 10px 0 0;\n                width: 196px;\n\n                .dc-field-error {\n                    padding: 0;\n                    left: 0;\n                }\n            }\n        }\n        &-footer {\n            text-align: right;\n\n            #{$quick-strategy}__button {\n                &--create {\n                    height: 40px;\n                    margin: 14px 0 0 auto;\n                }\n            }\n        }\n    }\n    &__option {\n        display: flex;\n\n        > * {\n            align-self: center;\n        }\n        .icons-underlying {\n            margin-top: 5px;\n        }\n    }\n    &__symbol {\n        margin-left: 8px;\n    }\n    &__icon {\n        width: 24px;\n        height: 24px;\n        padding: 3px;\n        margin: 2px;\n        background-color: var(--general-section-1);\n    }\n    &__duration {\n        &-dropdown {\n            width: 194px !important;\n        }\n    }\n}"],"sourceRoot":""}