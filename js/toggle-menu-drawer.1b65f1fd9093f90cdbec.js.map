{"version":3,"sources":["webpack:///./App/Components/Elements/Drawer/drawer-header.jsx","webpack:///./App/Components/Elements/Drawer/drawer-item.jsx","webpack:///./App/Components/Elements/Drawer/drawer-items.jsx","webpack:///./App/Components/Elements/Drawer/drawer.jsx","webpack:///./App/Components/Elements/switch-button.jsx","webpack:///./App/Components/Elements/Drawer/drawer-toggle.jsx","webpack:///./App/Components/Elements/Drawer/toggle-drawer.jsx","webpack:///./App/Containers/Drawer/menu-drawer.jsx","webpack:///./App/Components/Layout/Header/toggle-menu-drawer.jsx"],"names":["DrawerHeader","_ref","alignment","closeBtn","drawer_header_class","classNames","react_default","a","createElement","Fragment","className","onClick","Assets_icon","icon","localize","propTypes","PropTypes","string","func","DrawerItem","drawerItemClicked","_this","props","hideDrawers","collapseItems","React","Component","_this$props","this","link_to","text","custom_action","Routes","to","href","node","drawer_item_component","connect","ui","state","is_collapsed","setState","_this2","items","list_is_collapsed","visibility","parent_item_class","drawer__parent-item--show","drawer_items_class","drawer__items--show","style","map","item","idx","_extends","key","array","Drawer","is_this_drawer_on","setRef","ref","hide","scrollToggle","handleClickOutside","event","contains","target","is_main_drawer_on","is_notifications_drawer_on","is_open","document","body","classList","toggle","children","drawer_bg_class","drawer--show","drawer_class","concat","react_transition_group","in","timeout","enter","enterDone","exit","unmountOnExit","drawer_header_DrawerHeader","oneOfType","object","footer","icon_class","icon_link","bool","drawer_component","SwitchButton","toggled","toggle_style","DrawerToggle","to_toggle","switch_button","ToggleDrawer","showDrawer","showMainDrawer","showNotificationsDrawer","closeDrawer","toggle_class","shape","MenuDrawer","is_dark_mode","is_logged_in","is_mobile","is_positions_drawer_on","toggleDarkMode","togglePositionsDrawer","routes","trade","portfolio","statement","drawer_toggle_DrawerToggle","requestLogout","_ref2","client","is_dark_mode_on","ToggleMenuDrawer","toggle_drawer_drawer_component","menu_drawer"],"mappings":"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","file":"js/toggle-menu-drawer.1b65f1fd9093f90cdbec.js","sourcesContent":["import classNames    from 'classnames';\nimport PropTypes     from 'prop-types';\nimport React         from 'react';\nimport { localize }  from 'App/i18n';\nimport Icon          from 'Assets/icon.jsx';\n\nexport const DrawerHeader = ({\n    alignment,\n    closeBtn,\n}) => {\n    const drawer_header_class = classNames('drawer__header', alignment);\n    return (\n        <React.Fragment>\n            {alignment && alignment === 'right' ?\n                <div className={drawer_header_class}>\n                    <div className='drawer__icons drawer__icons-btn-close' onClick={closeBtn}>\n                        <Icon icon='IconClose' className='drawer__icons-icon-close' />\n                    </div>\n                    <div className='drawer__notifications'>\n                        <h4 className='drawer__notifications-header'>{localize('all notifications')}</h4>\n                    </div>\n                </div>\n                :\n                <div className={drawer_header_class}>\n                    <div className='drawer__icons drawer__icons-btn-close' onClick={closeBtn}>\n                        <Icon icon='IconClose' className='drawer__icons-icon-close' />\n                    </div>\n                    <div className='drawer__icons drawer__brand-logo'>\n                        <div className='drawer__image' />\n                    </div>\n                </div>\n            }\n        </React.Fragment>\n    );\n};\n\nDrawerHeader.propTypes = {\n    alignment: PropTypes.string,\n    closeBtn : PropTypes.func,\n};\n","import PropTypes      from 'prop-types';\nimport React          from 'react';\nimport { connect }    from 'Stores/connect';\nimport { BinaryLink } from '../../Routes';\n\nclass DrawerItem extends React.Component {\n    drawerItemClicked = () => {\n        this.props.hideDrawers();\n        if (this.props.collapseItems) {\n            this.props.collapseItems();\n        }\n    };\n\n    render() {\n        const { link_to, text, icon, custom_action } = this.props;\n\n        return (\n            <div className='drawer__item' onClick={this.drawerItemClicked}>\n                {custom_action ?\n                    <a className='drawer__item-link' onClick={custom_action}>\n                        <span className='drawer__item-link-text'>{icon}{text}</span>\n                    </a>\n                    :\n                    <BinaryLink className='drawer__item-link' to={link_to}>\n                        <span className='drawer__item-link-text'>{icon}{text}</span>\n                    </BinaryLink>\n                }\n            </div>\n        );\n    }\n}\n\nDrawerItem.propTypes = {\n    collapseItems: PropTypes.func,\n    custom_action: PropTypes.func,\n    hideDrawers  : PropTypes.func,\n    href         : PropTypes.string,\n    icon         : PropTypes.node,\n    link_to      : PropTypes.string,\n    text         : PropTypes.string,\n};\n\nconst drawer_item_component = connect(({ ui }) => ({\n    hideDrawers: ui.hideDrawers,\n}))(DrawerItem);\n\nexport { drawer_item_component as DrawerItem };\n","import classNames     from 'classnames';\nimport PropTypes      from 'prop-types';\nimport React          from 'react';\nimport { DrawerItem } from './drawer-item.jsx';\n\nclass DrawerItems extends React.Component {\n    state = { is_collapsed: false };\n\n    collapseItems = () => {\n        this.setState({\n            is_collapsed: !this.state.is_collapsed,\n        });\n    };\n\n    render() {\n        const { is_collapsed } = this.state;\n        const { text, items } = this.props;\n\n        const list_is_collapsed = {\n            visibility: is_collapsed ? 'visible' : 'hidden',\n        };\n        const parent_item_class = classNames('drawer__parent-item', {\n            'drawer__parent-item--show': is_collapsed,\n        });\n        const drawer_items_class = classNames('drawer__items', {\n            'drawer__items--show': is_collapsed,\n        });\n        return (\n            <React.Fragment>\n                <div className='drawer__item' onClick={this.collapseItems}>\n                    <span className={parent_item_class}>{text}</span>\n                </div>\n                <div\n                    className={drawer_items_class}\n                    style={list_is_collapsed}\n                >\n                    <div className='items-group'>\n                        {items.map((item, idx) => (\n                            <DrawerItem key={idx} {...item} collapseItems={this.collapseItems} />\n                        ))}\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nDrawerItems.propTypes = {\n    items: PropTypes.array,\n    text : PropTypes.string,\n};\n\nexport { DrawerItems };\n","import classNames       from 'classnames';\nimport PropTypes        from 'prop-types';\nimport React            from 'react';\nimport { CSSTransition }   from 'react-transition-group';\nimport { connect }      from 'Stores/connect';\nimport { DrawerHeader } from './drawer-header.jsx';\n\nclass Drawer extends React.Component {\n    state = {\n        is_this_drawer_on: false,\n    };\n\n    setRef = (node) => {\n        this.ref = node;\n    };\n\n    scrollToggle(state) {\n        this.is_open = state;\n        document.body.classList.toggle('no-scroll', this.is_open);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.alignment === 'left') {\n            state.is_this_drawer_on = props.is_main_drawer_on;\n        } else if (props.alignment === 'right'){\n            state.is_this_drawer_on = props.is_notifications_drawer_on;\n        }\n\n        return state;\n    }\n\n    hide = () => {\n        this.scrollToggle(false);\n        this.props.hideDrawers();\n    };\n\n    handleClickOutside = (event) => {\n        if (this.state.is_this_drawer_on) {\n            if (this.ref && !this.ref.contains(event.target)) {\n                this.hide();\n            }\n        }\n    };\n\n    render() {\n        const { is_this_drawer_on } = this.state;\n        const { alignment, closeBtn, children } = this.props;\n\n        const drawer_bg_class = classNames('drawer__bg', {\n            'drawer--show': is_this_drawer_on,\n        });\n        const drawer_class = classNames('drawer', { [`drawer--${alignment}`]: alignment });\n\n        return (\n            <CSSTransition\n                in={is_this_drawer_on}\n                timeout={150}\n                classNames={{\n                    enter    : 'drawer__container--enter',\n                    enterDone: 'drawer__container--enter-done',\n                    exit     : 'drawer__container--exit',\n                }}\n                unmountOnExit\n            >\n                <aside className='drawer-container'>\n                    <div\n                        className={drawer_bg_class}\n                        onClick={this.handleClickOutside}\n                    >\n                        <div\n                            ref={this.setRef}\n                            className={drawer_class}\n                        >\n                            <DrawerHeader\n                                alignment={alignment}\n                                closeBtn={closeBtn}\n                            />\n                            {children}\n                        </div>\n                    </div>\n                </aside>\n            </CSSTransition>\n        );\n    }\n}\n\nDrawer.propTypes = {\n    alignment: PropTypes.string,\n    children : PropTypes.oneOfType([\n        PropTypes.array,\n        PropTypes.object,\n    ]),\n    closeBtn                  : PropTypes.func,\n    footer                    : PropTypes.func,\n    hideDrawers               : PropTypes.func,\n    icon_class                : PropTypes.string,\n    icon_link                 : PropTypes.string,\n    is_main_drawer_on         : PropTypes.bool,\n    is_notifications_drawer_on: PropTypes.bool,\n};\n\nconst drawer_component = connect(\n    ({ ui }) => ({\n        is_main_drawer_on         : ui.is_main_drawer_on,\n        is_notifications_drawer_on: ui.is_notifications_drawer_on,\n        hideDrawers               : ui.hideDrawers,\n    })\n)(Drawer);\n\nexport { drawer_component as Drawer };\n","import classNames from 'classnames';\nimport PropTypes  from 'prop-types';\nimport React      from 'react';\n\nconst SwitchButton = ({ style, toggled }) => {\n    const toggle_style = style || 'switch-button';\n    const icon_class = classNames(toggle_style, {\n        [`${toggle_style}--toggled`]: toggled,\n    });\n\n    return (\n        <div className={icon_class} />\n    );\n};\n\nSwitchButton.propTypes = {\n    style  : PropTypes.string,\n    toggled: PropTypes.bool,\n};\n\nexport default SwitchButton;\n","import PropTypes    from 'prop-types';\nimport React        from 'react';\nimport SwitchButton from '../switch-button.jsx';\n\nconst DrawerToggle = ({\n    text,\n    to_toggle,\n    toggle,\n}) => (\n    <div className='drawer-item__toggle' onClick={toggle}>\n        <span>{text}</span>\n        <SwitchButton\n            toggled={to_toggle}\n        />\n    </div>\n);\n\nDrawerToggle.propTypes = {\n    text     : PropTypes.string,\n    to_toggle: PropTypes.bool,\n    toggle   : PropTypes.func,\n};\n\nexport { DrawerToggle };\n","import classNames  from 'classnames';\nimport PropTypes   from 'prop-types';\nimport React       from 'react';\nimport { connect } from 'Stores/connect';\nimport { Drawer }  from './drawer.jsx';\n\nclass ToggleDrawer extends React.Component {\n    showDrawer = () => {\n        const { alignment } = this.props;\n        if (alignment === 'left') {\n            this.props.showMainDrawer();\n        } else if (alignment === 'right') {\n            this.props.showNotificationsDrawer();\n        }\n    };\n\n    closeDrawer = () => {\n        this.props.hideDrawers();\n    };\n\n    render() {\n        const { icon_class, icon, alignment, children } = this.props;\n\n        const toggle_class = classNames('header__navbar-icons', `header__navbar-icons--${icon_class}`);\n\n        return (\n            <React.Fragment>\n                <div className={toggle_class} onClick={this.showDrawer}>\n                    {icon}\n                </div>\n                <Drawer\n                    alignment={alignment}\n                    closeBtn={this.closeDrawer}\n                >\n                    {children}\n                </Drawer>\n            </React.Fragment>\n        );\n    }\n}\n\nToggleDrawer.propTypes = {\n    alignment: PropTypes.string,\n    children : PropTypes.oneOfType([\n        PropTypes.array,\n        PropTypes.object,\n    ]),\n    footer     : PropTypes.func,\n    hideDrawers: PropTypes.func,\n    icon       : PropTypes.shape({\n        className: PropTypes.string,\n    }),\n    icon_class             : PropTypes.string,\n    showMainDrawer         : PropTypes.func,\n    showNotificationsDrawer: PropTypes.func,\n};\n\nconst drawer_component = connect(\n    ({ ui }) => ({\n        showMainDrawer         : ui.showMainDrawer,\n        showNotificationsDrawer: ui.showNotificationsDrawer,\n        hideDrawers            : ui.hideDrawers,\n    })\n)(ToggleDrawer);\n\nexport { drawer_component as ToggleDrawer };\n","import PropTypes         from 'prop-types';\nimport React             from 'react';\nimport { localize }      from 'App/i18n';\nimport {\n    DrawerItem,\n    DrawerToggle }       from 'App/Components/Elements/Drawer';\nimport Icon              from 'Assets/icon.jsx';\nimport routes            from 'Constants/routes';\nimport { requestLogout } from 'Services';\nimport { connect }       from 'Stores/connect';\n\nconst MenuDrawer = ({\n    is_dark_mode,\n    is_logged_in,\n    is_mobile,\n    is_positions_drawer_on,\n    // is_purchase_confirmed,\n    // is_purchase_locked,\n    toggleDarkMode,\n    togglePositionsDrawer,\n    // togglePurchaseLock,\n    // togglePurchaseConfirmation,\n}) => (\n    <div className='drawer__items-container'>\n        <div className='list-items-container'>\n            {is_mobile &&\n            <React.Fragment>\n                <DrawerItem\n                    text={localize('Trade')}\n                    icon={<Icon icon='IconTrade' className='drawer__icon' />}\n                    link_to={routes.trade}\n                />\n                <DrawerItem\n                    text={localize('Portfolio')}\n                    icon={<Icon icon='IconPortfolio' className='drawer__icon' />}\n                    link_to={routes.portfolio}\n                />\n                <DrawerItem\n                    text={localize('Statement')}\n                    icon={<Icon icon='IconReports' className='drawer__icon' />}\n                    link_to={routes.statement}\n                />\n                <hr className='hr' />\n                <DrawerToggle\n                    text={localize('Dark Mode')}\n                    toggle={toggleDarkMode}\n                    to_toggle={is_dark_mode}\n                />\n                {/* Disabled until design is ready\n                <DrawerToggle\n                    text={localize('Purchase Confirmation')}\n                    toggle={togglePurchaseConfirmation}\n                    to_toggle={is_purchase_confirmed}\n                />\n                */}\n                {/* <DrawerToggle */}\n                {/* text={localize('Purchase Lock')} */}\n                {/* toggle={togglePurchaseLock} */}\n                {/* to_toggle={is_purchase_locked} */}\n                {/* /> */}\n            </React.Fragment>}\n        </div>\n        {!!(is_logged_in && is_mobile) &&\n        <div className='drawer__footer'>\n            <DrawerItem\n                icon={<Icon icon='IconLogout' className='drawer__icon' />}\n                text={localize('Logout')}\n                custom_action={() => {\n                    if (is_positions_drawer_on) {\n                        togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n                    }\n                    requestLogout();\n                }}\n            />\n        </div>\n        }\n    </div>\n);\n\nMenuDrawer.propTypes = {\n    is_dark_mode          : PropTypes.bool,\n    is_logged_in          : PropTypes.bool,\n    is_mobile             : PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    // is_purchase_confirmed     : PropTypes.bool,\n    // is_purchase_locked        : PropTypes.bool,\n    toggleDarkMode        : PropTypes.func,\n    togglePositionsDrawer : PropTypes.func,\n    // togglePurchaseConfirmation: PropTypes.func,\n    // togglePurchaseLock        : PropTypes.func,\n};\n\nexport default connect(\n    ({ client, ui }) => ({\n        is_logged_in          : client.is_logged_in,\n        is_dark_mode          : ui.is_dark_mode_on,\n        is_mobile             : ui.is_mobile,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        // is_purchase_confirmed     : ui.is_purchase_confirm_on,\n        // is_purchase_locked        : ui.is_purchase_lock_on,\n        toggleDarkMode        : ui.toggleDarkMode,\n        togglePositionsDrawer : ui.togglePositionsDrawer,\n        // togglePurchaseConfirmation: ui.togglePurchaseConfirmation,\n        // togglePurchaseLock        : ui.togglePurchaseLock,\n    }),\n)(MenuDrawer);\n","import React             from 'react';\nimport Icon              from 'Assets/icon.jsx';\nimport { ToggleDrawer }  from '../../Elements/Drawer';\nimport MenuDrawer        from '../../../Containers/Drawer/menu-drawer.jsx';\n\nconst ToggleMenuDrawer = () => (\n    <ToggleDrawer\n        alignment='left'\n        icon={<Icon icon='IconHamburger' />}\n        icon_class='header__menu-toggle'\n    >\n        <MenuDrawer />\n    </ToggleDrawer>\n);\n\nexport default ToggleMenuDrawer;\n"],"sourceRoot":""}