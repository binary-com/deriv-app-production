{"version":3,"sources":["webpack:///./App/Containers/CashierModal/error.jsx","webpack:///./App/Containers/CashierModal/virtual.jsx","webpack:///./App/Containers/CashierModal/no-balance.jsx","webpack:///./App/Containers/CashierModal/PaymentAgentTransfer/payment-agent-transfer-form.jsx","webpack:///./App/Containers/CashierModal/PaymentAgentTransfer/payment-agent-transfer-receipt.jsx","webpack:///./App/Containers/CashierModal/payment-agent-transfer.jsx"],"names":["ErrorComponent","header","message","button_link","onClickButton","button_text","footer","className","icon","to","onClick","text","Error","error_fields","address_city","localize","address_line_1","address_postcode","address_state","email","phone","residence","props","error","clearErrorMessage","closeCashierModal","toggleCashierModal","setErrorMessage","acceptTNC","WS","tncApproval","AccountError","this","code","i18n_default_text","components","key","target","rel","href","Fragment","fields","values","details","map","field","join","interpolation","escapeValue","React","Component","propTypes","PropTypes","object","func","connect","modules","ui","cashier","setTimeout","Virtual","has_real_account","client","openRealAccountSignup","render","currency","NoBalance","setModalIndex","errors","amount","type","decimals","CurrencyUtils","getDecimalPlaces","transfer_limit","getPreBuildDVRs","number","PaymentAgentTransferForm","validateTransfer","balance","onTransferPassthrough","requestPaymentAgentTransfer","description","transfer_to","loginid","payment_agent_transfer","actions","setSubmitting","validateTransferPassthrough","isSubmitting","handleChange","touched","error_message","statement","resetPaymentAgentTransfer","PaymentAgentTransferReceipt","name","receipt","client_name","PaymentAgentTransfer","setActiveTab","container","onMount","onUnMount","is_virtual","is_loading","is_show_full_page","has_no_balance","is_transfer_successful","string","bool","config","onMountPaymentAgentTransfer"],"mappings":"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","file":"js/4.dadd7c8b8c4c33e321ed.js","sourcesContent":["import PropTypes    from 'prop-types';\nimport React        from 'react';\nimport Button       from 'deriv-components/lib/button';\nimport Localize     from 'App/Components/Elements/localize.jsx';\nimport ButtonLink   from 'App/Components/Routes/button-link.jsx';\nimport { localize } from 'App/i18n';\nimport Icon         from 'Assets/icon.jsx';\nimport { WS }       from 'Services';\nimport { connect }  from 'Stores/connect';\n\nconst ErrorComponent = ({\n    header,\n    message,\n    button_link,\n    onClickButton,\n    button_text,\n    footer,\n}) => (\n    <div className='cashier__wrapper'>\n        <Icon icon='IconCashierError' className='cashier-error__icon' />\n        {header && <h2 className='cashier-error__header'>{header}</h2>}\n        {message && <p className='cashier__paragraph'>{message}</p>}\n        {button_link &&\n        <ButtonLink\n            className='btn--primary--default cashier-error__button'\n            to={button_link}\n            onClick={onClickButton}\n        >\n            <span className='btn__text'>{button_text}</span>\n        </ButtonLink>\n        }\n        {!button_link && button_text &&\n            <Button\n                className='btn--primary--default cashier-error__button'\n                onClick={onClickButton}\n                text={button_text}\n            />\n        }\n        {footer && <h2 className='cashier-error__footer'>{footer}</h2>}\n    </div>\n);\n\nclass Error extends React.Component {\n    error_fields = {\n        address_city    : localize('Town/City'),\n        address_line_1  : localize('First line of home address'),\n        address_postcode: localize('Postal Code/ZIP'),\n        address_state   : localize('State/Province'),\n        email           : localize('Email address'),\n        phone           : localize('Telephone'),\n        residence       : localize('Country of Residence'),\n    };\n\n    onClickButton = () => {\n        if (typeof this.props.error.onClickButton === 'function') {\n            this.props.error.onClickButton();\n        }\n        this.clearErrorMessage();\n    }\n\n    closeCashierModal = () => {\n        this.onClickButton();\n        this.props.toggleCashierModal();\n    }\n\n    clearErrorMessage = () => {\n        this.props.setErrorMessage('');\n    };\n\n    acceptTNC = async () => {\n        await WS.tncApproval();\n        this.onClickButton();\n    };\n\n    render() {\n        let AccountError;\n        switch (this.props.error.code) {\n            case 'InvalidToken':\n                AccountError = (\n                    <ErrorComponent\n                        header={localize('Identity confirmation failed')}\n                        message={<Localize i18n_default_text='It looks like your link is incorrect or no longer valid.' />}\n                        onClickButton={this.onClickButton}\n                        button_text={localize('Request a new link')}\n                    />\n                );\n                break;\n            case 'ASK_TNC_APPROVAL':\n                AccountError = (\n                    <ErrorComponent\n                        header={localize('Our terms and conditions have changed')}\n                        message={\n                            <Localize\n                                i18n_default_text='Please accept our updated <0>terms and conditions</0> to continue.'\n                                components={[ (\n                                    <a\n                                        key={0}\n                                        className='link'\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                        href='https://www.deriv.com/terms-and-conditions/#general'\n                                    />\n                                ) ]}\n                            />\n                        }\n                        onClickButton={this.acceptTNC}\n                        button_text={localize('I accept')}\n                    />\n                );\n                break;\n            case 'ASK_FIX_DETAILS':\n                AccountError = (\n                    <ErrorComponent\n                        header={localize('Update your personal details')}\n                        message={\n                            <React.Fragment>\n                                <Localize i18n_default_text={'We can\\'t validate your personal details because there is some information missing.'} />&nbsp;\n                                {this.props.error.fields ?\n                                    <Localize\n                                        i18n_default_text={'Please update your {{details}} to continue.'}\n                                        values={{\n                                            details      : this.props.error.fields.map(field => (this.error_fields[field] || field)).join(', '),\n                                            interpolation: { escapeValue: false },\n                                        }}\n                                    />\n                                    :\n                                    <Localize i18n_default_text={'Please update your details to continue.'} />\n                                }\n                            </React.Fragment>\n                        }\n                        button_link='/account/personal-details'\n                        onClickButton={this.closeCashierModal}\n                        button_text={localize('Update my details')}\n                        footer={\n                            <Localize\n                                i18n_default_text='Need help? <0>Contact us</0>.'\n                                components={[ (\n                                    <a\n                                        key={0}\n                                        className='link'\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                        href='https://www.deriv.com/help-centre/'\n                                    />\n                                ) ]}\n                            />\n                        }\n                    />\n                );\n                break;\n            case 'WrongResponse':\n                AccountError = (\n                    <ErrorComponent\n                        header={this.props.error.message}\n                        onClickButton={this.onClickButton}\n                        button_text={localize('Try again')}\n                    />\n                );\n                break;\n            default:\n                AccountError = <ErrorComponent header={this.props.error.message} />;\n                break;\n        }\n        return AccountError;\n    }\n}\n\nError.propTypes = {\n    error             : PropTypes.object,\n    setErrorMessage   : PropTypes.func,\n    toggleCashierModal: PropTypes.func,\n};\n\nexport default connect(\n    ({ modules, ui }) => ({\n        setErrorMessage   : modules.cashier.setErrorMessage,\n        toggleCashierModal: ui.toggleCashierModal,\n    })\n)(Error);\n","import PropTypes    from 'prop-types';\nimport React        from 'react';\nimport { Button }   from 'deriv-components';\nimport Localize     from 'App/Components/Elements/localize.jsx';\nimport { localize } from 'App/i18n';\nimport { connect }  from 'Stores/connect';\n\nclass Virtual extends React.Component {\n    onClickSignup = () => {\n        this.props.toggleCashierModal();\n        setTimeout(this.props.openRealAccountSignup, 500);\n    };\n\n    render = () => {\n        return (\n            <div className='cashier__wrapper cashier__center-align-wrapper'>\n                <div className='cashier__center-align-content'>\n                    <h2 className='cashier-error__header cashier__virtual-header'>\n                        <Localize i18n_default_text={'You\\'re currently using a demo account'} />\n                    </h2>\n                    {this.props.has_real_account ?\n                        <React.Fragment>\n                            <p className='cashier__paragraph cashier__text'>\n                                <Localize i18n_default_text='You need to switch to a real money account to use this feature.' />\n                                <br />\n                                <Localize i18n_default_text='You can do this by selecting a real account from the Account Switcher.' />\n                            </p>\n                            <div className='cashier__account-switch-icon' />\n                        </React.Fragment>\n                        :\n                        <React.Fragment>\n                            <p className='cashier__paragraph cashier__text'>\n                                <Localize i18n_default_text={'You need a real money account to use this feature. It\\'s easy to create a real money account and start trading.'} />\n                            </p>\n                            <Button\n                                className='btn--primary--default cashier-error__button'\n                                has_effect\n                                text={localize('Create my real account')}\n                                onClick={this.onClickSignup}\n                            />\n                        </React.Fragment>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nVirtual.propTypes = {\n    has_real_account     : PropTypes.bool,\n    openRealAccountSignup: PropTypes.func,\n    toggleCashierModal   : PropTypes.func,\n};\n\nexport default connect(\n    ({ client, ui }) => ({\n        has_real_account     : client.has_real_account,\n        openRealAccountSignup: ui.openRealAccountSignup,\n        toggleCashierModal   : ui.toggleCashierModal,\n    })\n)(Virtual);\n\n","import PropTypes        from 'prop-types';\nimport React            from 'react';\nimport { Button }       from 'deriv-components';\nimport Icon             from 'Assets/icon.jsx';\nimport Localize         from 'App/Components/Elements/localize.jsx';\nimport { localize }     from 'App/i18n';\nimport { connect }      from 'Stores/connect';\n\nclass NoBalance extends React.Component {\n    onClickDeposit = () => {\n        // index of deposit tab in the cashier modal is 0\n        this.props.setModalIndex(0);\n    };\n\n    render = () => {\n        return (\n            <div className='cashier__wrapper cashier__no-balance'>\n                <Icon icon='IconNoBalance' className='cashier__no-balance-icon' />\n                <h2 className='withdraw__header'><Localize i18n_default_text='You have no funds in your {{currency}} account' values={{ currency: this.props.currency.toUpperCase() }} /></h2>\n                <p className='cashier__text'><Localize i18n_default_text='Please make a deposit to use this feature.' /></p>\n                <Button\n                    className='btn--primary--default cashier__no-balance-button'\n                    has_effect\n                    text={localize('Deposit now')}\n                    onClick={this.onClickDeposit}\n                />\n            </div>\n        );\n    }\n}\n\nNoBalance.propTypes = {\n    currency     : PropTypes.string,\n    setModalIndex: PropTypes.func,\n};\n\nexport default connect(\n    ({ client, ui }) => ({\n        currency     : client.currency,\n        setModalIndex: ui.setModalIndex,\n    })\n)(NoBalance);\n\n","import classNames             from 'classnames';\nimport PropTypes              from 'prop-types';\nimport React                  from 'react';\nimport {\n    Button,\n    Input }                   from 'deriv-components';\nimport {\n    Field,\n    Formik,\n    Form }                    from 'formik';\nimport CurrencyUtils          from 'deriv-shared/utils/currency';\nimport Localize               from 'App/Components/Elements/localize.jsx';\nimport { localize }           from 'App/i18n';\nimport Icon                   from 'Assets/icon.jsx';\nimport { connect }            from 'Stores/connect';\nimport {\n    getPreBuildDVRs,\n    validNumber }             from 'Utils/Validator/declarative-validation-rules';\n\nconst validateTransfer = (values, { balance, currency, transfer_limit }) => {\n    const errors = {};\n\n    if (!values.loginid  || !/^[A-Za-z]+[0-9]+$/.test(values.loginid)) {\n        errors.loginid = localize('Please enter a valid client login ID.');\n    }\n\n    if (!values.amount) {\n        errors.amount = localize('This field is required.');\n    } else if (\n        !validNumber(values.amount, {\n            type    : 'float',\n            decimals: CurrencyUtils.getDecimalPlaces(currency),\n            ...(transfer_limit.min && {\n                min: transfer_limit.min,\n                max: transfer_limit.max,\n            }),\n        })) {\n        errors.amount = getPreBuildDVRs().number.message;\n    } else if (+balance < +values.amount) {\n        errors.amount = localize('Insufficient balance.');\n    }\n\n    if (values.description && !/^[0-9A-Za-z .,'-]{0,250}$/.test(values.description.replace(/\\n/g, ' '))) {\n        errors.description = localize('Please enter a valid description.');\n    }\n\n    return errors;\n};\n\nclass PaymentAgentTransferForm extends React.Component {\n    validateTransferPassthrough = (values) => (\n        validateTransfer(values, {\n            balance       : this.props.balance,\n            currency      : this.props.currency,\n            transfer_limit: this.props.transfer_limit,\n        })\n    );\n\n    onTransferPassthrough = async (values, actions) => {\n        const payment_agent_transfer = await this.props.requestPaymentAgentTransfer({\n            amount     : values.amount,\n            currency   : this.props.currency,\n            description: values.description.replace(/\\n/g, ' '),\n            transfer_to: values.loginid,\n        });\n        if (payment_agent_transfer.error) {\n            actions.setSubmitting(false);\n        }\n    };\n\n    render() {\n        return (\n            <div className='cashier__wrapper--align-left'>\n                <h2 className='cashier__header payment-agent-transfer__header'>\n                    <Localize i18n_default_text='Transfer to client' />\n                </h2>\n                <Formik\n                    initialValues={{\n                        loginid    : '',\n                        amount     : '',\n                        description: '',\n                    }}\n                    validate={this.validateTransferPassthrough}\n                    onSubmit={this.onTransferPassthrough}\n                >\n                    {\n                        ({ errors, isSubmitting, isValid, touched, handleChange }) => (\n                            <Form noValidate>\n                                <Field name='loginid'>\n                                    {({ field }) => (\n                                        <Input\n                                            { ...field }\n                                            onChange={(e) => {\n                                                this.props.setErrorMessage('');\n                                                handleChange(e);\n                                            }}\n                                            className='payment-agent-transfer__input'\n                                            type='text'\n                                            label={localize('Client login ID')}\n                                            error={ touched.loginid && errors.loginid }\n                                            required\n                                            autoComplete='off'\n                                            maxLength='20'\n                                        />\n                                    )}\n                                </Field>\n                                <Field name='amount'>\n                                    {({ field }) => (\n                                        <Input\n                                            { ...field }\n                                            onChange={(e) => {\n                                                this.props.setErrorMessage('');\n                                                handleChange(e);\n                                            }}\n                                            className='payment-agent-transfer__input dc-input--no-placeholder'\n                                            type='text'\n                                            label={localize('Amount')}\n                                            error={ touched.amount && errors.amount }\n                                            required\n                                            leading_icon={\n                                                <span className={classNames('cashier__amount-symbol', 'symbols', `symbols--${(this.props.currency || '').toLowerCase()}`)} />\n                                            }\n                                            autoComplete='off'\n                                            maxLength='30'\n                                        />\n                                    )}\n                                </Field>\n                                <Field name='description'>\n                                    {({ field }) => (\n                                        <Input\n                                            { ...field }\n                                            onChange={(e) => {\n                                                this.props.setErrorMessage('');\n                                                handleChange(e);\n                                            }}\n                                            type='textarea'\n                                            label={localize('Description')}\n                                            error={ touched.description && errors.description }\n                                            required\n                                            autoComplete='off'\n                                            maxLength='250'\n                                        />\n                                    )}\n                                </Field>\n                                <div className='cashier__form-submit'>\n                                    {this.props.error_message &&\n                                    <React.Fragment>\n                                        <Icon icon='IconEmergency' className='cashier__form-error-icon' />\n                                        <Icon icon='IconError' className='cashier__form-error-small-icon' />\n                                        <p className='cashier__form-error'>\n                                            {this.props.error_message}\n                                        </p>\n                                    </React.Fragment>\n                                    }\n                                    <Button\n                                        className='cashier__form-submit-button btn--primary--default'\n                                        type='submit'\n                                        is_disabled={!isValid || isSubmitting}\n                                    >\n                                        <Localize i18n_default_text='Transfer' />\n                                    </Button>\n                                </div>\n                            </Form>\n                        )\n                    }\n                </Formik>\n            </div>\n        );\n    }\n}\n\nPaymentAgentTransferForm.propTypes = {\n    balance                    : PropTypes.string,\n    currency                   : PropTypes.string,\n    error                      : PropTypes.object,\n    requestPaymentAgentTransfer: PropTypes.func,\n    setErrorMessage            : PropTypes.func,\n    transfer_limit             : PropTypes.object,\n};\n\nexport default connect(\n    ({ client, modules }) => ({\n        balance                    : client.balance,\n        currency                   : client.currency,\n        error_message              : modules.cashier.config.payment_agent_transfer.error.message,\n        requestPaymentAgentTransfer: modules.cashier.requestPaymentAgentTransfer,\n        setErrorMessage            : modules.cashier.setErrorMessage,\n        transfer_limit             : modules.cashier.config.payment_agent_transfer.transfer_limit,\n    })\n)(PaymentAgentTransferForm);\n","import classNames     from 'classnames';\nimport PropTypes      from 'prop-types';\nimport React          from 'react';\nimport { withRouter } from 'react-router';\nimport { Button }     from 'deriv-components';\nimport CurrencyUtils  from 'deriv-shared/utils/currency';\nimport Localize       from 'App/Components/Elements/localize.jsx';\nimport { localize }   from 'App/i18n';\nimport Icon           from 'Assets/icon.jsx';\nimport routes         from 'Constants/routes';\nimport { connect }    from 'Stores/connect';\n\nclass PaymentAgentTransferReceipt extends React.Component {\n    openStatement = () => {\n        this.props.history.push(routes.statement);\n        this.props.resetPaymentAgentTransfer();\n        this.props.toggleCashierModal();\n    };\n\n    render() {\n        return (\n            <div className='cashier__wrapper account-transfer__receipt'>\n                <div className='cashier__success'>\n                    <h2 className='cashier__header'>\n                        <Localize i18n_default_text='Your funds have been transferred to {{name}}.' values={{ name: this.props.receipt.client_name }} />\n                    </h2>\n                    <div className='cashier__transferred-amount cashier__text--bold'>\n                        <span\n                            className={classNames('symbols', `symbols--${this.props.currency.toLowerCase()}`)}\n                        />\n                        {CurrencyUtils.formatMoney(this.props.currency, this.props.receipt.amount_transferred, true)}\n                    </div>\n                    <div className='cashier__transferred-details-wrapper'>\n                        <span className='account-transfer__transfer-details-from'>\n                            <Icon\n                                icon='IconAccountsCurrency'\n                                type={this.props.currency.toLowerCase()}\n                                height={16}\n                                width={16}\n                            />\n                            <span className='cashier__transferred-details'>\n                                <span className='cashier__text--bold'>{this.props.currency.toUpperCase()}</span>&nbsp;({this.props.loginid})\n                            </span>\n                        </span>\n                        <Icon className='cashier__transferred-icon' icon='IconBack' />\n                        <span className='account-transfer__transfer-details-to'>\n                            <Icon icon='IconUser' />\n                            <span className='cashier__transferred-details'>\n                                <span className='cashier__text--bold'>{this.props.receipt.client_name}</span>&nbsp;({this.props.receipt.client_id})\n                            </span>\n                        </span>\n                    </div>\n                    <div className='cashier__form-submit payment-agent-transfer__buttons'>\n                        <Button\n                            className='btn--tertiary--default payment-agent__statement-button'\n                            has_effect\n                            text={localize('View in statement')}\n                            onClick={this.openStatement}\n                        />\n                        <Button\n                            className='btn--primary--default payment-agent__done-button payment-agent-transfer__done-button'\n                            has_effect\n                            text={localize('Done')}\n                            onClick={this.props.resetPaymentAgentTransfer}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nPaymentAgentTransferReceipt.propTypes = {\n    currency                 : PropTypes.string,\n    loginid                  : PropTypes.string,\n    receipt                  : PropTypes.object,\n    resetPaymentAgentTransfer: PropTypes.func,\n    toggleCashierModal       : PropTypes.func,\n};\n\nexport default withRouter(connect(\n    ({ client, modules, ui }) => ({\n        currency                 : client.currency,\n        loginid                  : client.loginid,\n        receipt                  : modules.cashier.config.payment_agent_transfer.receipt,\n        resetPaymentAgentTransfer: modules.cashier.resetPaymentAgentTransfer,\n        toggleCashierModal       : ui.toggleCashierModal,\n    })\n)(PaymentAgentTransferReceipt));\n","import PropTypes                   from 'prop-types';\nimport React                       from 'react';\nimport { connect }                 from 'Stores/connect';\nimport PaymentAgentTransferForm    from './PaymentAgentTransfer/payment-agent-transfer-form.jsx';\nimport PaymentAgentTransferReceipt from './PaymentAgentTransfer/payment-agent-transfer-receipt.jsx';\nimport NoBalance                   from './no-balance.jsx';\nimport Error                       from './error.jsx';\nimport Virtual                     from './virtual.jsx';\nimport Loading                     from '../../../templates/_common/components/loading.jsx';\n\nclass PaymentAgentTransfer extends React.Component {\n    componentDidMount() {\n        this.props.setActiveTab(this.props.container);\n        this.props.onMount();\n    }\n\n    componentWillUnmount() {\n        this.props.onUnMount();\n    }\n\n    render() {\n        if (this.props.is_virtual) {\n            return <Virtual />;\n        }\n        if (this.props.is_loading) {\n            return <Loading className='cashier__loader' />;\n        }\n        if (this.props.error.is_show_full_page) {\n            // for errors with CTA hide the form and show the error,\n            // for others show them at the bottom of the form next to submit button\n            return <Error error={this.props.error} />;\n        }\n        if (this.props.has_no_balance) {\n            return <NoBalance />;\n        }\n        return (\n            <React.Fragment>\n                {this.props.is_transfer_successful ?\n                    <PaymentAgentTransferReceipt />\n                    :\n                    <PaymentAgentTransferForm error={this.props.error} />\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nPaymentAgentTransfer.propTypes = {\n    container             : PropTypes.string,\n    error                 : PropTypes.object,\n    has_no_balance        : PropTypes.bool,\n    is_loading            : PropTypes.bool,\n    is_transfer_successful: PropTypes.bool,\n    is_virtual            : PropTypes.bool,\n    onMount               : PropTypes.func,\n    onUnMount             : PropTypes.func,\n    setActiveTab          : PropTypes.func,\n};\n\nexport default connect(\n    ({ client, modules }) => ({\n        is_virtual            : client.is_virtual,\n        container             : modules.cashier.config.payment_agent_transfer.container,\n        error                 : modules.cashier.config.payment_agent_transfer.error,\n        has_no_balance        : modules.cashier.has_no_balance,\n        is_loading            : modules.cashier.is_loading,\n        is_transfer_successful: modules.cashier.config.payment_agent_transfer.is_transfer_successful,\n        onMount               : modules.cashier.onMountPaymentAgentTransfer,\n        onUnMount             : modules.cashier.resetPaymentAgentTransfer,\n        setActiveTab          : modules.cashier.setActiveTab,\n    })\n)(PaymentAgentTransfer);\n"],"sourceRoot":""}