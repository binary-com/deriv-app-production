{"version":3,"sources":["webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Components/Layout/Header/account-info.jsx"],"names":["AccountSwitcher","setWrapperRef","node","_this","wrapper_ref","handleClickOutside","event","accounts_toggle_btn","target","classList","contains","props","is_visible","toggle","handleLogout","is_positions_drawer_on","togglePositionsDrawer","requestLogout","then","cleanUp","React","Component","document","addEventListener","this","removeEventListener","loginid","account_loginid","switchAccount","has_error","clearError","_this2","is_logged_in","real_accounts","account_list","filter","acc","is_virtual","vrt_account","find","main_account_title","length","localize","UpgradeButton","_ref","text","react_default","a","createElement","className","href","urlFor","undefined","rel","ref","map","account","id","concat","key","classNames","acc-switcher__account--selected","onClick","doSwitch","bind","icon","type","is_upgrade_enabled","upgrade_info","can_open_multi","isEmptyObject","virtual_loginid","propTypes","PropTypes","array","string","func","bool","onClickUpgrade","object","account_switcher","connect","_ref2","client","ui","modules","virtual_account_loginid","contract_trade","AccountInfo","balance","currency","is_dialog_on","toggleDialog","acc-info--show","acc-info--is-virtual","title","toLowerCase","react_transition_group","in","timeout","enter","enterDone","exit","unmountOnExit","account_type"],"mappings":"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","file":"js/account-info.1b65f1fd9093f90cdbec.js","sourcesContent":["import classNames        from 'classnames';\nimport PropTypes         from 'prop-types';\nimport React             from 'react';\nimport { localize }      from 'App/i18n';\nimport { urlFor }        from '_common/url';\nimport { isEmptyObject } from '_common/utility';\nimport Icon              from 'Assets/icon.jsx';\nimport { requestLogout } from 'Services/index';\nimport { connect }       from 'Stores/connect';\n\nclass AccountSwitcher extends React.Component {\n    setWrapperRef = (node) => {\n        this.wrapper_ref = node;\n    };\n\n    handleClickOutside = (event) => {\n        const accounts_toggle_btn = !(event.target.classList.contains('acc-info'));\n        if (this.wrapper_ref && !this.wrapper_ref.contains(event.target)\n            && this.props.is_visible && accounts_toggle_btn) {\n            this.props.toggle();\n        }\n    };\n\n    handleLogout = () => {\n        this.props.toggle();\n        if (this.props.is_positions_drawer_on) {\n            this.props.togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n        }\n        requestLogout().then(this.props.cleanUp);\n    };\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    async doSwitch(loginid) {\n        this.props.toggle();\n        if (this.props.account_loginid === loginid) return;\n        await this.props.switchAccount(loginid);\n\n        if (this.props.has_error) {\n            this.props.clearError();\n        }\n    }\n\n    render() {\n        if (!this.props.is_logged_in) return false;\n        // TODO: Once we allow other real accounts (apart from CR), assign correct title and group accounts into list with correct account title/types\n        // e.g - Real, Financial, Gaming, Investment\n        const real_accounts = this.props.account_list.filter(acc => !acc.is_virtual);\n        const vrt_account   = this.props.account_list.find(acc => acc.is_virtual);\n\n        const main_account_title = real_accounts.length > 1 ? localize('Real accounts') : localize('Real account');\n\n        const UpgradeButton = ({ text }) => (\n            <div className='acc-switcher__new-account'>\n                <a\n                    className='acc-switcher__new-account-link'\n                    href={urlFor('user/accounts', undefined, undefined, true)}\n                    rel='noopener noreferrer'\n                    target='_blank'\n                >\n                    {text}\n                </a>\n            </div>\n        );\n\n        return (\n            <div className='acc-switcher__list' ref={this.setWrapperRef}>\n                {\n                    // Make sure this block is not rendered if there are no real accounts\n                    !!(this.props.account_list.length && real_accounts.length) &&\n                    <div className='acc-switcher__list-group'>\n                        <span className='acc-switcher__list-title'>\n                            {main_account_title}\n                        </span>\n                        <div className='acc-switcher__accounts'>\n                            {\n                                real_accounts.map((account) => (\n                                    <div\n                                        id={`dt_${account.loginid}`}\n                                        key={account.loginid}\n                                        className={classNames('acc-switcher__account', {\n                                            'acc-switcher__account--selected': (account.loginid === this.props.account_loginid),\n                                        })}\n                                        onClick={this.doSwitch.bind(this, account.loginid)}\n                                    >\n                                        <span className={'acc-switcher__id'}>\n                                            <Icon\n                                                icon='IconAccountsCurrency'\n                                                className={`acc-switcher__id-icon acc-switcher__id-icon--${account.icon}`}\n                                                type={account.icon}\n                                            />\n                                            {account.loginid}\n                                        </span>\n                                    </div>\n                                ))\n                            }\n                        </div>\n\n                        {   // TODO: Add link to account opening page for upgrade or multi account page for new account.\n                            // Update text below for handling types of account to create :- e.g - Investment\n                            !!(this.props.is_upgrade_enabled && this.props.upgrade_info.can_open_multi) &&\n                            <UpgradeButton text={localize('Add new account')} />\n                        }\n                    </div>\n                }\n                {\n                    !isEmptyObject(vrt_account) &&\n                    <div className='acc-switcher__list--virtual'>\n                        <span className='acc-switcher__list-title'>\n                            {localize('Virtual account')}\n                        </span>\n                        <div className='acc-switcher__accounts'>\n                            <div\n                                id={`dt_${this.props.virtual_loginid}`}\n                                className={classNames('acc-switcher__account', {\n                                    'acc-switcher__account--selected': (this.props.virtual_loginid === this.props.account_loginid),\n                                })}\n                                onClick={this.doSwitch.bind(this, this.props.virtual_loginid)}\n                            >\n                                <span className={classNames('acc-switcher__id', 'acc-switcher__id--virtual')}>\n                                    {this.props.virtual_loginid}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                }\n                { !!(this.props.is_upgrade_enabled && this.props.is_virtual) &&\n                    <UpgradeButton text={localize('Upgrade to Real Account')} />\n                }\n                <div id='dt_logout_button' className='acc-switcher__logout' onClick={this.handleLogout}>\n                    <span className='acc-switcher__logout-text'>{localize('Log out')}</span>\n                    <Icon icon='IconLogout' className='acc-switcher__logout-icon drawer__icon' />\n                </div>\n            </div>\n        );\n    }\n}\n\nAccountSwitcher.propTypes = {\n    account_list          : PropTypes.array,\n    account_loginid       : PropTypes.string,\n    cleanUp               : PropTypes.func,\n    clearError            : PropTypes.func,\n    has_error             : PropTypes.bool,\n    is_logged_in          : PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    is_upgrade_enabled    : PropTypes.bool,\n    is_virtual            : PropTypes.bool,\n    is_visible            : PropTypes.bool,\n    onClickUpgrade        : PropTypes.func,\n    toggle                : PropTypes.func,\n    togglePositionsDrawer : PropTypes.func,\n    upgrade_info          : PropTypes.object,\n    virtual_loginid       : PropTypes.string,\n};\n\nconst account_switcher = connect(\n    ({ client, ui, modules }) => ({\n        account_list          : client.account_list,\n        account_loginid       : client.loginid,\n        is_logged_in          : client.is_logged_in,\n        is_virtual            : client.is_virtual,\n        switchAccount         : client.switchAccount,\n        upgrade_info          : client.upgrade_info,\n        cleanUp               : client.cleanUp,\n        virtual_loginid       : client.virtual_account_loginid,\n        clearError            : modules.contract_trade.clearError,\n        has_error             : modules.contract_trade.has_error,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        togglePositionsDrawer : ui.togglePositionsDrawer,\n    }),\n)(AccountSwitcher);\n\nexport { account_switcher as AccountSwitcher };\n","import classNames          from 'classnames';\nimport PropTypes           from 'prop-types';\nimport React               from 'react';\nimport { CSSTransition }   from 'react-transition-group';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\nimport Icon                from 'Assets/icon.jsx';\n\n// todo fix absolute path\n\nconst AccountInfo = ({\n    balance,\n    currency,\n    loginid,\n    is_dialog_on,\n    is_upgrade_enabled,\n    is_virtual,\n    onClickUpgrade,\n    toggleDialog,\n}) => (\n    <div className='acc-info__wrapper'>\n        <div\n            className={classNames('acc-info', {\n                'acc-info--show'      : is_dialog_on,\n                'acc-info--is-virtual': is_virtual,\n            })}\n            onClick={toggleDialog}\n        >\n            <p\n                className='acc-info__id'\n                title={loginid}\n            >\n                {loginid}&nbsp;\n            </p>\n            {\n                typeof balance !== 'undefined' &&\n                <p className='acc-info__balance'>\n                    <span\n                        className={classNames('symbols', { [`symbols--${(currency || '').toLowerCase()}`]: currency })}\n                    />\n                    {balance}\n                </p>\n            }\n            <Icon icon='IconArrowBold' className='acc-info__select-arrow' />\n        </div>\n        <CSSTransition\n            in={is_dialog_on}\n            timeout={200}\n            classNames={{\n                enter    : 'acc-switcher__wrapper--enter',\n                enterDone: 'acc-switcher__wrapper--enter-done',\n                exit     : 'acc-switcher__wrapper--exit',\n            }}\n            unmountOnExit\n        >\n            <div className='acc-switcher__wrapper'>\n                <AccountSwitcher\n                    is_visible={is_dialog_on}\n                    toggle={toggleDialog}\n                    is_upgrade_enabled={is_upgrade_enabled}\n                    onClickUpgrade={onClickUpgrade}\n                />\n            </div>\n        </CSSTransition>\n    </div>\n);\n\nAccountInfo.propTypes = {\n    account_type      : PropTypes.string,\n    balance           : PropTypes.string,\n    currency          : PropTypes.string,\n    is_dialog_on      : PropTypes.bool,\n    is_upgrade_enabled: PropTypes.bool,\n    is_virtual        : PropTypes.bool,\n    loginid           : PropTypes.string,\n    onClickUpgrade    : PropTypes.func,\n    toggleDialog      : PropTypes.func,\n};\n\nexport default AccountInfo;\n"],"sourceRoot":""}