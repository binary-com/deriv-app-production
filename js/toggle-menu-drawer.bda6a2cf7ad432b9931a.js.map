{"version":3,"sources":["webpack:///./App/Components/Elements/Drawer/drawer-header.jsx","webpack:///./App/Components/Elements/Drawer/drawer-item.jsx","webpack:///./App/Components/Elements/Drawer/drawer-items.jsx","webpack:///./App/Components/Elements/Drawer/drawer.jsx","webpack:///./App/Components/Elements/switch-button.jsx","webpack:///./App/Components/Elements/Drawer/drawer-toggle.jsx","webpack:///./App/Components/Elements/Drawer/toggle-drawer.jsx","webpack:///./App/Containers/Drawer/menu-drawer.jsx","webpack:///./App/Components/Layout/Header/toggle-menu-drawer.jsx"],"names":["DrawerHeader","alignment","closeBtn","drawer_header_class","classNames","Fragment","className","onClick","icon","localize","propTypes","PropTypes","string","func","DrawerItem","drawerItemClicked","props","hideDrawers","collapseItems","this","link_to","text","custom_action","to","React","Component","href","node","drawer_item_component","connect","ui","state","is_collapsed","setState","items","list_is_collapsed","visibility","parent_item_class","drawer_items_class","style","map","item","idx","key","array","Drawer","is_this_drawer_on","setRef","ref","hide","scrollToggle","handleClickOutside","event","contains","target","is_main_drawer_on","is_notifications_drawer_on","is_open","document","body","classList","toggle","children","drawer_bg_class","drawer_class","in","timeout","enter","enterDone","exit","unmountOnExit","oneOfType","object","footer","icon_class","icon_link","bool","drawer_component","SwitchButton","toggled","toggle_style","DrawerToggle","to_toggle","ToggleDrawer","showDrawer","showMainDrawer","showNotificationsDrawer","closeDrawer","toggle_class","shape","MenuDrawer","is_dark_mode","is_logged_in","is_mobile","is_positions_drawer_on","toggleDarkMode","togglePositionsDrawer","routes","trade","portfolio","statement","requestLogout","client","is_dark_mode_on","ToggleMenuDrawer"],"mappings":"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","file":"js/toggle-menu-drawer.bda6a2cf7ad432b9931a.js","sourcesContent":["import classNames    from 'classnames';\nimport PropTypes     from 'prop-types';\nimport React         from 'react';\nimport { localize }  from 'App/i18n';\nimport Icon          from 'Assets/icon.jsx';\n\nexport const DrawerHeader = ({\n    alignment,\n    closeBtn,\n}) => {\n    const drawer_header_class = classNames('drawer__header', alignment);\n    return (\n        <React.Fragment>\n            {alignment && alignment === 'right' ?\n                <div className={drawer_header_class}>\n                    <div className='drawer__icons drawer__icons-btn-close' onClick={closeBtn}>\n                        <Icon icon='IconClose' className='drawer__icons-icon-close' />\n                    </div>\n                    <div className='drawer__notifications'>\n                        <h4 className='drawer__notifications-header'>{localize('all notifications')}</h4>\n                    </div>\n                </div>\n                :\n                <div className={drawer_header_class}>\n                    <div className='drawer__icons drawer__icons-btn-close' onClick={closeBtn}>\n                        <Icon icon='IconClose' className='drawer__icons-icon-close' />\n                    </div>\n                    <div className='drawer__icons drawer__brand-logo'>\n                        <div className='drawer__image' />\n                    </div>\n                </div>\n            }\n        </React.Fragment>\n    );\n};\n\nDrawerHeader.propTypes = {\n    alignment: PropTypes.string,\n    closeBtn : PropTypes.func,\n};\n","import PropTypes      from 'prop-types';\nimport React          from 'react';\nimport { connect }    from 'Stores/connect';\nimport { BinaryLink } from '../../Routes';\n\nclass DrawerItem extends React.Component {\n    drawerItemClicked = () => {\n        this.props.hideDrawers();\n        if (this.props.collapseItems) {\n            this.props.collapseItems();\n        }\n    };\n\n    render() {\n        const { link_to, text, icon, custom_action } = this.props;\n\n        return (\n            <div className='drawer__item' onClick={this.drawerItemClicked}>\n                {custom_action ?\n                    <a className='drawer__item-link' onClick={custom_action}>\n                        <span className='drawer__item-link-text'>{icon}{text}</span>\n                    </a>\n                    :\n                    <BinaryLink className='drawer__item-link' to={link_to}>\n                        <span className='drawer__item-link-text'>{icon}{text}</span>\n                    </BinaryLink>\n                }\n            </div>\n        );\n    }\n}\n\nDrawerItem.propTypes = {\n    collapseItems: PropTypes.func,\n    custom_action: PropTypes.func,\n    hideDrawers  : PropTypes.func,\n    href         : PropTypes.string,\n    icon         : PropTypes.node,\n    link_to      : PropTypes.string,\n    text         : PropTypes.string,\n};\n\nconst drawer_item_component = connect(({ ui }) => ({\n    hideDrawers: ui.hideDrawers,\n}))(DrawerItem);\n\nexport { drawer_item_component as DrawerItem };\n","import classNames     from 'classnames';\nimport PropTypes      from 'prop-types';\nimport React          from 'react';\nimport { DrawerItem } from './drawer-item.jsx';\n\nclass DrawerItems extends React.Component {\n    state = { is_collapsed: false };\n\n    collapseItems = () => {\n        this.setState({\n            is_collapsed: !this.state.is_collapsed,\n        });\n    };\n\n    render() {\n        const { is_collapsed } = this.state;\n        const { text, items } = this.props;\n\n        const list_is_collapsed = {\n            visibility: is_collapsed ? 'visible' : 'hidden',\n        };\n        const parent_item_class = classNames('drawer__parent-item', {\n            'drawer__parent-item--show': is_collapsed,\n        });\n        const drawer_items_class = classNames('drawer__items', {\n            'drawer__items--show': is_collapsed,\n        });\n        return (\n            <React.Fragment>\n                <div className='drawer__item' onClick={this.collapseItems}>\n                    <span className={parent_item_class}>{text}</span>\n                </div>\n                <div\n                    className={drawer_items_class}\n                    style={list_is_collapsed}\n                >\n                    <div className='items-group'>\n                        {items.map((item, idx) => (\n                            <DrawerItem key={idx} {...item} collapseItems={this.collapseItems} />\n                        ))}\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nDrawerItems.propTypes = {\n    items: PropTypes.array,\n    text : PropTypes.string,\n};\n\nexport { DrawerItems };\n","import classNames       from 'classnames';\nimport PropTypes        from 'prop-types';\nimport React            from 'react';\nimport { CSSTransition }   from 'react-transition-group';\nimport { connect }      from 'Stores/connect';\nimport { DrawerHeader } from './drawer-header.jsx';\n\nclass Drawer extends React.Component {\n    state = {\n        is_this_drawer_on: false,\n    };\n\n    setRef = (node) => {\n        this.ref = node;\n    };\n\n    scrollToggle(state) {\n        this.is_open = state;\n        document.body.classList.toggle('no-scroll', this.is_open);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.alignment === 'left') {\n            state.is_this_drawer_on = props.is_main_drawer_on;\n        } else if (props.alignment === 'right'){\n            state.is_this_drawer_on = props.is_notifications_drawer_on;\n        }\n\n        return state;\n    }\n\n    hide = () => {\n        this.scrollToggle(false);\n        this.props.hideDrawers();\n    };\n\n    handleClickOutside = (event) => {\n        if (this.state.is_this_drawer_on) {\n            if (this.ref && !this.ref.contains(event.target)) {\n                this.hide();\n            }\n        }\n    };\n\n    render() {\n        const { is_this_drawer_on } = this.state;\n        const { alignment, closeBtn, children } = this.props;\n\n        const drawer_bg_class = classNames('drawer__bg', {\n            'drawer--show': is_this_drawer_on,\n        });\n        const drawer_class = classNames('drawer', { [`drawer--${alignment}`]: alignment });\n\n        return (\n            <CSSTransition\n                in={is_this_drawer_on}\n                timeout={150}\n                classNames={{\n                    enter    : 'drawer__container--enter',\n                    enterDone: 'drawer__container--enter-done',\n                    exit     : 'drawer__container--exit',\n                }}\n                unmountOnExit\n            >\n                <aside className='drawer-container'>\n                    <div\n                        className={drawer_bg_class}\n                        onClick={this.handleClickOutside}\n                    >\n                        <div\n                            ref={this.setRef}\n                            className={drawer_class}\n                        >\n                            <DrawerHeader\n                                alignment={alignment}\n                                closeBtn={closeBtn}\n                            />\n                            {children}\n                        </div>\n                    </div>\n                </aside>\n            </CSSTransition>\n        );\n    }\n}\n\nDrawer.propTypes = {\n    alignment: PropTypes.string,\n    children : PropTypes.oneOfType([\n        PropTypes.array,\n        PropTypes.object,\n    ]),\n    closeBtn                  : PropTypes.func,\n    footer                    : PropTypes.func,\n    hideDrawers               : PropTypes.func,\n    icon_class                : PropTypes.string,\n    icon_link                 : PropTypes.string,\n    is_main_drawer_on         : PropTypes.bool,\n    is_notifications_drawer_on: PropTypes.bool,\n};\n\nconst drawer_component = connect(\n    ({ ui }) => ({\n        is_main_drawer_on         : ui.is_main_drawer_on,\n        is_notifications_drawer_on: ui.is_notifications_drawer_on,\n        hideDrawers               : ui.hideDrawers,\n    })\n)(Drawer);\n\nexport { drawer_component as Drawer };\n","import classNames from 'classnames';\nimport PropTypes  from 'prop-types';\nimport React      from 'react';\n\nconst SwitchButton = ({ style, toggled }) => {\n    const toggle_style = style || 'switch-button';\n    const icon_class = classNames(toggle_style, {\n        [`${toggle_style}--toggled`]: toggled,\n    });\n\n    return (\n        <div className={icon_class} />\n    );\n};\n\nSwitchButton.propTypes = {\n    style  : PropTypes.string,\n    toggled: PropTypes.bool,\n};\n\nexport default SwitchButton;\n","import PropTypes    from 'prop-types';\nimport React        from 'react';\nimport SwitchButton from '../switch-button.jsx';\n\nconst DrawerToggle = ({\n    text,\n    to_toggle,\n    toggle,\n}) => (\n    <div className='drawer-item__toggle' onClick={toggle}>\n        <span>{text}</span>\n        <SwitchButton\n            toggled={to_toggle}\n        />\n    </div>\n);\n\nDrawerToggle.propTypes = {\n    text     : PropTypes.string,\n    to_toggle: PropTypes.bool,\n    toggle   : PropTypes.func,\n};\n\nexport { DrawerToggle };\n","import classNames  from 'classnames';\nimport PropTypes   from 'prop-types';\nimport React       from 'react';\nimport { connect } from 'Stores/connect';\nimport { Drawer }  from './drawer.jsx';\n\nclass ToggleDrawer extends React.Component {\n    showDrawer = () => {\n        const { alignment } = this.props;\n        if (alignment === 'left') {\n            this.props.showMainDrawer();\n        } else if (alignment === 'right') {\n            this.props.showNotificationsDrawer();\n        }\n    };\n\n    closeDrawer = () => {\n        this.props.hideDrawers();\n    };\n\n    render() {\n        const { icon_class, icon, alignment, children } = this.props;\n\n        const toggle_class = classNames('header__navbar-icons', `header__navbar-icons--${icon_class}`);\n\n        return (\n            <React.Fragment>\n                <div className={toggle_class} onClick={this.showDrawer}>\n                    {icon}\n                </div>\n                <Drawer\n                    alignment={alignment}\n                    closeBtn={this.closeDrawer}\n                >\n                    {children}\n                </Drawer>\n            </React.Fragment>\n        );\n    }\n}\n\nToggleDrawer.propTypes = {\n    alignment: PropTypes.string,\n    children : PropTypes.oneOfType([\n        PropTypes.array,\n        PropTypes.object,\n    ]),\n    footer     : PropTypes.func,\n    hideDrawers: PropTypes.func,\n    icon       : PropTypes.shape({\n        className: PropTypes.string,\n    }),\n    icon_class             : PropTypes.string,\n    showMainDrawer         : PropTypes.func,\n    showNotificationsDrawer: PropTypes.func,\n};\n\nconst drawer_component = connect(\n    ({ ui }) => ({\n        showMainDrawer         : ui.showMainDrawer,\n        showNotificationsDrawer: ui.showNotificationsDrawer,\n        hideDrawers            : ui.hideDrawers,\n    })\n)(ToggleDrawer);\n\nexport { drawer_component as ToggleDrawer };\n","import PropTypes         from 'prop-types';\nimport React             from 'react';\nimport { localize }      from 'App/i18n';\nimport {\n    DrawerItem,\n    DrawerToggle }       from 'App/Components/Elements/Drawer';\nimport Icon              from 'Assets/icon.jsx';\nimport routes            from 'Constants/routes';\nimport { requestLogout } from 'Services';\nimport { connect }       from 'Stores/connect';\n\nconst MenuDrawer = ({\n    is_dark_mode,\n    is_logged_in,\n    is_mobile,\n    is_positions_drawer_on,\n    // is_purchase_confirmed,\n    // is_purchase_locked,\n    toggleDarkMode,\n    togglePositionsDrawer,\n    // togglePurchaseLock,\n    // togglePurchaseConfirmation,\n}) => (\n    <div className='drawer__items-container'>\n        <div className='list-items-container'>\n            {is_mobile &&\n            <React.Fragment>\n                <DrawerItem\n                    text={localize('Trade')}\n                    icon={<Icon icon='IconTrade' className='drawer__icon' />}\n                    link_to={routes.trade}\n                />\n                <DrawerItem\n                    text={localize('Portfolio')}\n                    icon={<Icon icon='IconPortfolio' className='drawer__icon' />}\n                    link_to={routes.portfolio}\n                />\n                <DrawerItem\n                    text={localize('Statement')}\n                    icon={<Icon icon='IconReports' className='drawer__icon' />}\n                    link_to={routes.statement}\n                />\n                <hr className='hr' />\n                <DrawerToggle\n                    text={localize('Dark Mode')}\n                    toggle={toggleDarkMode}\n                    to_toggle={is_dark_mode}\n                />\n                {/* Disabled until design is ready\n                <DrawerToggle\n                    text={localize('Purchase Confirmation')}\n                    toggle={togglePurchaseConfirmation}\n                    to_toggle={is_purchase_confirmed}\n                />\n                */}\n                {/* <DrawerToggle */}\n                {/* text={localize('Purchase Lock')} */}\n                {/* toggle={togglePurchaseLock} */}\n                {/* to_toggle={is_purchase_locked} */}\n                {/* /> */}\n            </React.Fragment>}\n        </div>\n        {!!(is_logged_in && is_mobile) &&\n        <div className='drawer__footer'>\n            <DrawerItem\n                icon={<Icon icon='IconLogout' className='drawer__icon' />}\n                text={localize('Logout')}\n                custom_action={() => {\n                    if (is_positions_drawer_on) {\n                        togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n                    }\n                    requestLogout();\n                }}\n            />\n        </div>\n        }\n    </div>\n);\n\nMenuDrawer.propTypes = {\n    is_dark_mode          : PropTypes.bool,\n    is_logged_in          : PropTypes.bool,\n    is_mobile             : PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    // is_purchase_confirmed     : PropTypes.bool,\n    // is_purchase_locked        : PropTypes.bool,\n    toggleDarkMode        : PropTypes.func,\n    togglePositionsDrawer : PropTypes.func,\n    // togglePurchaseConfirmation: PropTypes.func,\n    // togglePurchaseLock        : PropTypes.func,\n};\n\nexport default connect(\n    ({ client, ui }) => ({\n        is_logged_in          : client.is_logged_in,\n        is_dark_mode          : ui.is_dark_mode_on,\n        is_mobile             : ui.is_mobile,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        // is_purchase_confirmed     : ui.is_purchase_confirm_on,\n        // is_purchase_locked        : ui.is_purchase_lock_on,\n        toggleDarkMode        : ui.toggleDarkMode,\n        togglePositionsDrawer : ui.togglePositionsDrawer,\n        // togglePurchaseConfirmation: ui.togglePurchaseConfirmation,\n        // togglePurchaseLock        : ui.togglePurchaseLock,\n    }),\n)(MenuDrawer);\n","import React             from 'react';\nimport Icon              from 'Assets/icon.jsx';\nimport { ToggleDrawer }  from '../../Elements/Drawer';\nimport MenuDrawer        from '../../../Containers/Drawer/menu-drawer.jsx';\n\nconst ToggleMenuDrawer = () => (\n    <ToggleDrawer\n        alignment='left'\n        icon={<Icon icon='IconHamburger' />}\n        icon_class='header__menu-toggle'\n    >\n        <MenuDrawer />\n    </ToggleDrawer>\n);\n\nexport default ToggleMenuDrawer;\n"],"sourceRoot":""}