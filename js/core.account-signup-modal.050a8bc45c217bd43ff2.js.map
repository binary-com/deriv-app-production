{"version":3,"sources":["webpack:///./App/Containers/SetResidenceModal/set-residence-form.jsx","webpack:///./App/Containers/AccountSignupModal/account-signup-modal.jsx"],"names":["children","header_text","errors","touched","setFieldValue","residence_list","class_prefix","localize","residence","value","SetResidenceForm","PropTypes","string","onResidenceSelection","has_valid_residence","onSignupComplete","error","onSignupPassthrough","index_of_selection","findIndex","item","disabled","validateSignupPassthrough","classNames","password","AccountSignup","func","className","is_loading","is_visible","toggleAccountSignupModal","onSignup","enableApp","AccountSignupModal","disableApp","bool","is_account_signup_modal_visible","client"],"mappings":"4YAcM,MANFA,SAME,OALFC,iBACAC,OAIE,IAJFA,EAIE,kBAHFC,EAGE,EAHFA,SACAC,EAEE,cADFC,IACE,OACF,EACI,UAAK,EAAS,EAAKC,cACZ,EACH,iBAAG,WAAS,cAAKA,OAAjB,UACKL,GAHT,OAMI,8BAAG,GAAS,IAAKK,cAAL,KAAZ,UACc,YAEd,cAAO,GAAK,uBAAZ,UACK,kIAGO,YACA,MAAS,QACT,yBAJJ,YAKI,aALJ,MAMI,UAAQC,UAAS,EANrB,qBAOI,gBAAgBC,SAChB,YACA,yBAAaH,kBACb,QAAe,WACX,sBAAGI,EAAH,6BAAqBL,SAAgC,GAArD,cAZX,SAiBJJ,OA5BT,gCAiCJU,IAGIT,EAAgBU,UAAUC,CAC1BP,aAAgBM,KAJpB,wBAOA,YAAeD,W,2nDC5BV,O,YAED,UAAW,I,iIAoBXG,QACoBC,oBAAqB,kCAAvB,EAAd,gB,SAGJC,EAAoBC,MAAU,yCAC1B,OACA,wBAIC,EAED,gC,sCAGH,E,iDAEQ,gD,YA8FP,O,0OA3FE,G,EAAA,E,aACA,MAAMC,WACF,MAAMC,KAAN,a,aAIA,EAAmB,iBAUV,OAAgDf,IAAhD,cAAgDA,MAAhD,WACG,kBAKoB,kBAAaI,IAAS,CACtB,cAAY,EACZ,SAlBhC,Y,OA3CEW,SAAoCC,EAAfd,GAA6B,MACpDe,GAKH,GAFD,EAAIF,WAAkB,EAAlB,SAA6Bb,OAJjC,IAIoEgB,YAAa,EAAjF,aACInB,YAAA,GACH,Y,CAGL,+BApBJ,4D,4KAkBK,e,gBAuDuC,S,YAhBpC,MACI,yBAAK,OAAS,EAAC,kDAGP,E,+UAAWoB,IAFf,GAGI,UAAWL,aAEV,EAAiBf,EAAjB,uBAUuB,YACA,MAAgBG,eAEhB,WACI,EAAWkB,SAAoC,kBADnD,YAEI,OAAI,IAAC,cAFT,yEAkBY,kBAAU,OACV,UAAOhB,sCACP,IAAK,cAAWiB,IAAR,CACR,UAAQ,2BALZ,IADH,mBALT,kBAeI,8CAAG,IAAS,cAAC,KAAb,KACI,aACI,YAFR,IAMA,UACI,WAAWD,cAAW,MAAuB,MAAE,2CADnD,8CAEI,MAAK,EAFT,qBAGI,UAAW,QAEX,IAAO,mBA1Bf,UAvBnB,2BAPb,uBAkEH,sI,uIAGLE,aAAA,EAA0B,0BACd,KAAQd,mBAAUe,iBAC1BrB,SAAgBM,KAnDwB,uBAGI,YAAc,mBAAQH,mCACtB,aAAS,iBACT,OAAO,EACP,QAAMD,EAdd,cAkBA,EAAK,eAAU,GACX,uBAAGoB,UAAU,2BACT,4DADJ,KAGA,SAAO,aAAK,2BAAZ,QACK,0DACG,sB,2BAyChDC,E,CAKE,IAJFC,WAIE,EAFFxB,UAEE,UADFyB,SAEA,eACI,WAGI,MAHJ,YAII,MAAYF,YACZ,IAAmB,WAEnB,IAAC,WACG,EAAUG,EADd,WAEI,IAAgB1B,SAChB,EAAgByB,iBAChB,EAAWE,2BAJf,OARR,uBATJ,a,aA2BAC,YACIC,WAAgBvB,IADW,SAE3BqB,qBAA0BN,GAC1BE,kBAA0BO,EAHC,CAI3BN,SAAgBlB,EAChBoB,eAAgBpB,EAChBN,eAAgBM,EANpB,gBAUI,EAAqB,WACjBkB,WAAU,IAAmBO,KAC7BN,mBACAE,WAAU,IAAmBA,KAC7BE,WAAU,IAAmBA,KAC7BN,aAA6BA,KAC7BG,eAA0BM,IAAON,QANhB,aAArB,+BADW,IAUbE,O,gPATE,C","file":"js/core.account-signup-modal.050a8bc45c217bd43ff2.js","sourcesContent":["import { Autocomplete } from 'deriv-components';\nimport { Field }        from 'formik';\nimport PropTypes        from 'prop-types';\nimport React            from 'react';\nimport { localize }     from 'App/i18n';\n\nconst SetResidenceForm = ({\n    class_prefix = 'set-residence',\n    children,\n    header_text,\n    errors,\n    touched,\n    setFieldValue,\n    residence_list,\n}) => {\n    return (\n        <div className={`${class_prefix}__residence-selection`}>\n            { !!header_text &&\n            <p className={`${class_prefix}__heading`}>\n                {header_text}\n            </p>\n            }\n            <p className={`${class_prefix}__${header_text ? 'text' : 'heading'}`}>\n                {localize('Where do you live?')}\n            </p>\n            <Field name='residence'>\n                {({ field }) => (\n                    <Autocomplete\n                        { ...field }\n                        autoComplete='off'\n                        className={`${class_prefix}__residence-field`}\n                        dropdown_offset='3.2rem'\n                        type='text'\n                        label={ localize('Choose country') }\n                        error={ touched.residence && errors.residence }\n                        required\n                        list_items={ residence_list }\n                        onItemSelection={\n                            ({ value, text }) => setFieldValue('residence', value ? text : '', true)\n                        }\n                    />\n                )}\n            </Field>\n            {children}\n        </div>\n    );\n};\n\nSetResidenceForm.propTypes = {\n    children      : PropTypes.node,\n    class_prefix  : PropTypes.string,\n    header_text   : PropTypes.string,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default SetResidenceForm;\n","import classNames        from 'classnames';\nimport {\n    Button,\n    Dialog,\n    PasswordInput }      from 'deriv-components';\nimport {\n    Field,\n    Formik,\n    Form }               from 'formik';\nimport PropTypes         from 'prop-types';\nimport React             from 'react';\nimport Localize          from 'App/Components/Elements/localize.jsx';\nimport { localize }      from 'App/i18n';\nimport { connect }       from 'Stores/connect';\nimport { validPassword } from 'Utils/Validator/declarative-validation-rules';\nimport { website_name }  from 'App/Constants/app-config';\nimport ResidenceForm     from '../SetResidenceModal/set-residence-form.jsx';\nimport                        'Sass/app/modules/account-signup.scss';\n\nconst signupInitialValues = { password: '', residence: '' };\n\nconst validateSignup = (values, residence_list) => {\n    const errors = {};\n    const min_password_length = 6;\n\n    if (values.password && (values.password.length < min_password_length || !validPassword(values.password))) {\n        errors.password = true;\n    }\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(item => (\n            item.text.toLowerCase() === values.residence.toLowerCase()\n        ));\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', { website_name });\n        }\n    }\n\n    return errors;\n};\n\nclass AccountSignup extends React.Component {\n    state = {\n        has_valid_residence: false,\n    };\n\n    onResidenceSelection = () => {\n        this.setState({ has_valid_residence: true });\n    };\n\n    onSignupComplete = (error) => {\n        // Error would be returned on invalid token (and the like) cases.\n        // TODO: Proper error handling (currently we have no place to put the message)\n\n        if (error) {\n            throw Error(error);\n        }\n\n        // Handle lower level modal controls due to overriding modal rendering\n        this.props.isModalVisible(false);\n        this.props.enableApp();\n    };\n\n    render() {\n        const { onSignup, residence_list } = this.props;\n\n        const validateSignupPassthrough = (values) => validateSignup(values, residence_list);\n        const onSignupPassthrough = (values) => {\n            const index_of_selection = residence_list.findIndex(item => (\n                item.text.toLowerCase() === values.residence.toLowerCase()\n            ));\n\n            const modded_values = { ...values, residence: residence_list[index_of_selection].value };\n            onSignup(modded_values, this.onSignupComplete);\n        };\n        return (\n            <div className='account-signup'>\n                <Formik\n                    initialValues={ signupInitialValues }\n                    validate={ validateSignupPassthrough }\n                    onSubmit={ onSignupPassthrough }\n                >\n                    {({ isSubmitting, errors, values, setFieldValue, touched }) => (\n                        <Form>\n                            <React.Fragment>\n                                {\n                                    !this.state.has_valid_residence ?\n                                        <ResidenceForm\n                                            header_text={localize('Thanks for verifying your email')}\n                                            class_prefix='account-signup'\n                                            errors={errors}\n                                            touched={touched}\n                                            setFieldValue={setFieldValue}\n                                            residence_list={residence_list}\n                                        >\n                                            <Button\n                                                className={classNames('account-signup__btn', { 'account-signup__btn--disabled': !values.residence || errors.residence })}\n                                                type='button'\n                                                is_disabled={ !values.residence || !!errors.residence }\n                                                onClick={this.onResidenceSelection}\n                                                primary\n                                                text={localize('Next')}\n                                            />\n                                        </ResidenceForm>\n                                        :\n                                        <div className='account-signup__password-selection'>\n                                            <p className='account-signup__heading'>\n                                                <Localize i18n_default_text='Keep your account secure with a password' />\n                                            </p>\n                                            <Field name='password'>\n                                                {({ field }) => (\n                                                    <PasswordInput\n                                                        { ...field }\n                                                        className='account-signup__password-field'\n                                                        label={localize('Create a password')}\n                                                        error={ touched.password && errors.password }\n                                                        required\n                                                    />\n                                                )}\n                                            </Field>\n                                            <p className='account-signup__subtext'>\n                                                <Localize\n                                                    i18n_default_text='Strong passwords contain at least 6 characters, combine uppercase and lowercase letters, numbers, and symbols.'\n                                                />\n                                            </p>\n\n                                            <Button\n                                                className={classNames('account-signup__btn', { 'account-signup__btn--disabled': !values.password || errors.password || isSubmitting })}\n                                                type='submit'\n                                                is_disabled={ !values.password || !!errors.password || isSubmitting }\n                                                text={localize('Start trading')}\n                                                primary\n                                            />\n                                        </div>\n                                }\n                            </React.Fragment>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        );\n    }\n}\n\nAccountSignup.propTypes = {\n    onSignup      : PropTypes.func,\n    residence_list: PropTypes.array,\n};\n\nconst AccountSignupModal = ({\n    enableApp,\n    disableApp,\n    is_loading,\n    is_visible,\n    onSignup,\n    residence_list,\n    toggleAccountSignupModal,\n}) => {\n    return (\n        <Dialog\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_content_centered\n        >\n            <AccountSignup\n                onSignup={onSignup}\n                residence_list={residence_list}\n                isModalVisible={toggleAccountSignupModal}\n                enableApp={enableApp}\n            />\n        </Dialog>\n    );\n};\n\nAccountSignupModal.propTypes = {\n    disableApp    : PropTypes.func,\n    enableApp     : PropTypes.func,\n    is_loading    : PropTypes.bool,\n    is_visible    : PropTypes.bool,\n    onSignup      : PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default connect(\n    ({ ui, client }) => ({\n        is_visible              : ui.is_account_signup_modal_visible,\n        toggleAccountSignupModal: ui.toggleAccountSignupModal,\n        enableApp               : ui.enableApp,\n        disableApp              : ui.disableApp,\n        is_loading              : ui.is_loading,\n        onSignup                : client.onSignup,\n        residence_list          : client.residence_list,\n    }),\n)(AccountSignupModal);\n"],"sourceRoot":""}