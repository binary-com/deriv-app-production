{"version":3,"sources":["webpack:///./src/javascript/_common/utility.js","webpack:///./src/javascript/_common/base/socket_cache.js","webpack:///./src/javascript/_common/common_functions.js","webpack:///./src/javascript/_common/string_util.js","webpack:///./src/javascript/_common/base/currency_base.js","webpack:///./src/javascript/_common/storage.js","webpack:///./src/javascript/_common/url.js","webpack:///./src/javascript/_common/base/socket_base.js","webpack:///./src/javascript/_common/language.js","webpack:///./src/javascript/_common/check_new_release.js","webpack:///./src/javascript/_common/lib/polyfills/element.matches.js","webpack:///./src/javascript/_common/base/network_monitor_base.js","webpack:///./src/javascript/_common/base/subscription_manager.js","webpack:///./src/javascript/_common/base/gtm.js","webpack:///./src/javascript/_common/os_detect.js","webpack:///./src/javascript/_common/localize.js","webpack:///./src/javascript/_common/base/client_base.js","webpack:///./src/javascript/_common/base/server_time.js","webpack:///./src/javascript/_common/base/login.js"],"names":["extend","require","isEmptyObject","obj","is_empty","Object","keys","forEach","key","prototype","hasOwnProperty","call","cloneObject","Array","isArray","isDeepEqual","a","b","_typeof","isEqualArray","isEqualObject","arr1","arr2","length","every","value","idx","obj1","obj2","static_hash","module","exports","template","string","content","to_replace","replace","s","index","unique","array","filter","e","findIndex","i","getPropertyValue","k","slice","undefined","createElement","tag_name","attributes","arguments","el","document","attr","textContent","html","setAttribute","getStaticHash","querySelector","getAttribute","split","PromiseClass","_this","this","_classCallCheck","promise","Promise","resolve","reject","moment","getLanguage","get","LocalStore","SocketCache","config","payout_currencies","expire","active_symbols","map_to","contracts_for","exchange_rates","data_obj","isEmptyValue","data","is_empty_data","response_data","request","msg_type","response","getObject","clear","makeKey","response_obj","isBefore","expires","remove","source_obj","find","type","map_key","should_match_all","data_key","indexOf","setObject","set","cached_response","echo_req","cached_message","new_message","has_error_or_missing","error","has_new_value","has_old_cache","has_valid_cache","window","location","reload","add","valueOf","isVisible","elem","offsetWidth","offsetHeight","getElementById","id_selector","padLeft","txt","len","char","text","String","join","numberToString","n","toTitleCase","str","charAt","toUpperCase","substr","toLowerCase","compareBigUnsignedInt","first_num","second_num","max_length","Math","max","order","localize","currencies_config","formatCurrency","currency","addComma","num","decimal_points","is_crypto","number","toFixed","parseFloat","toString","$0","$1","$2","getDecimalPlaces","isCryptocurrency","calcDecimalPlaces","test","CryptoConfig","crypto_config","BTC","name","min_withdrawal","pa_max_withdrawal","pa_min_withdrawal","BCH","ETH","ETC","LTC","UST","USB","getMinWithdrawal","formatMoney","currency_value","amount","exclude_currency","decimals","minimumFractionDigits","money","sign","Number","decimal_places","isNaN","abs","Intl","options","maximumFractionDigits","NumberFormat","format","setCurrencies","website_status","getCurrencyName","getTransferLimits","which","transfer_limits","min","getTransferFee","currency_from","currency_to","transfer_fee","getMinimumTransferFee","pow","getTextFormat","getMinPayout","getPaWithdrawalLimit","limit","getCurrencies","Cookies","isProduction","JSON","parse","getItem","setItem","stringify","Storage","isStorageSupported","storage","removeItem","Store","InScriptStore","object","store","_len","_key","has","State","getResponse","pathname","path","concat","CookieStorage","cookie_name","cookie_domain","hostname","initialized","domain","Date","read","cookie_value","write","val","expireDate","isSecure","secure","SessionStore","localStorage","sessionStorage","removeCookies","_len2","cookie_names","_key2","domains","parent_path","c","RegExp","cookie","urlForLanguage","urlFor","urlLang","getCurrentProductionDomain","Url","location_url","static_host","paramsHash","href","param_hash","arr_params","parsed","URL","search","p_l","param","push","params","host_map","bot.binary.com","developers.binary.com","academy.binary.com","tech.binary.com","blog.binary.com","reset","pars","language","should_change_to_legacy","lang","url_lang","url","substring","new_url","normalizePath","urlForCurrentDomain","current_domain","url_object","includes","urlForStatic","websiteUrl","protocol","getHostMap","resetStaticHost","ClientBase","getAppId","getSocketURL","BinarySocketBase","binary_socket","buffered_sends","req_id","wrong_app_id","is_available","is_disconnect_called","is_connected_before","socket_url","timeouts","promises","no_duplicate_requests","sent_requests","items","splice","waiting_list","promise_obj","this_promises","pr","another_exists","some","clearTimeouts","clearTimeout","isReady","hasReadyState","states","readyState","sendBufferedRequests","req_obj","shift","send","wait","msg_types","is_resolved","last_response","isLoggedIn","forced","time","assign","then","callback","subscribe","isOnline","passthrough","wsEvent","init","WebSocket","onopen","authorize","onOpen","onReconnect","onmessage","msg","this_req_id","onMessage","onclose","onDisconnect","availability","status","sendBuffered","setOnDisconnect","setOnReconnect","removeOnReconnect","removeOnDisconnect","Language","all_languages","ACH","EN","DE","ES","FR","ID","IT","PL","PT","RU","TH","VI","ZH_CN","ZH_TW","lang_regex","languageFromUrl","custom_url","current_lang","crowdin_lang","body","classList","getAll","setCookie","trim","shouldForceReload","last_reload","checkNewRelease","current_hash","xhttp","XMLHttpRequest","onreadystatechange","latest_hash","responseText","open","random","Element","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","ownerDocument","querySelectorAll","item","BinarySocket","NetworkMonitorBase","_pending_timeouts","StatusConfig","status_config","online","class","tooltip","offline","blinking","pendings","pending_keys","ws_init","ws_request","pending_timeouts","_defineProperty","ws_config","network_status","updateUI","navigator","onLine","setStatus","ping","ws_events_map","setPending","clearPendings","message","close","event","setTimeout","socket_general_functions","fncUpdateUI","addEventListener","__webpack_require__","_utility","SubscriptionManager","subscriptions","forget_requested","subscription_id","dispatch","sub_id","stream_id","subscription","sub_info","subscribers","fnc","forgetStream","forget","fncCallback","match_values","Error","forgets_list","id","hasCallbackFunction","hasValues","all","request_obj","values_obj","addSubscriptionFromRequest","send_request","subscribe_request","subscription_props","is_stream","prop","forgetAll","types_to_forget","sub_ids","forget_all","Login","ServerTime","GTM","isGtmApplicable","pushDataLayer","isLoginPages","dataLayer","_extends","visitorId","theme","is_dark_mode_on","eventHandler","get_settings","login_event","is_new_account","affiliate_token","getJSON","bom_affiliate_token","t","moment_now","utc","bom_account_type","getAccountType","bom_currency","bom_country","country","bom_country_abbrev","country_code","bom_email","email","bom_today","unix","bom_date_joined","bom_age","diff","date_of_birth","bom_firstname","first_name","bom_lastname","last_name","bom_phone","phone","mt5_login_list","acc_type","getMT5AccountType","group","login","statement","last_transaction_timestamp","bom_transaction_in_last_30d","isAfter","subtract","pushTransactionData","extra_data","transaction","action","gtm_transactions","timestamp","transactions_arr","transactions","transaction_id","transaction_time","balance","mt5NewAccount","mt5_new_account","mt5_account_type","account_type","gtm_data","mt5_last_signup","getAccountOfType","loginid","isMobile","userAgent","Localize","localized_texts","doLocalize","map","localizeKeepPlaceholders","_toConsumableArray","Set","match","sort","forLang","texts_json","locale","client_object","current_loginid","getAllAccountsObject","current_client","getAllLoginids","isAccountOfType","only_enabled","this_type","TypesMapConfig","types_map_config","default","financial","gaming","virtual","updateAccountList","account_list","account","excluded_until","param_to_set","value_to_set","canTransferFundsTo","to_loginid","from_currency","to_currency","from_landing_company","to_landing_company","maltainvest","malta","is_from_crypto","is_to_crypto","isValidLoginid","valid_login_ids","hasAccountType","hasCurrencyType","loginids","getAccountTitle","types_map","responseAuthorize","is_virtual","parseInt","landing_company_name","shouldAcceptTnc","website_tnc_version","client_tnc_status","clearAllAccounts","setNewAccount","token","currentLandingCompany","landing_company_response","this_shortcode","landing_company_prop","shortcode","shouldCompleteTax","getBasicUpgradeInfo","upgradeable_landing_companies","can_open_multi","can_upgrade_to","current_landing_company","landing_companies","landing_company","canUpgrade","can_upgrade","getLandingCompanyValue","landing_company_object","real","financial_company","gaming_company","getRiskAssessment","is_high_risk","canTransferFunds","hasSvgAccount","canChangeCurrency","is_current","has_no_mt5","has_account_criteria","count","clock_started","pending","server_time","performance_request_time","get_time_interval","update_time_interval","onTimeUpdated","fncTimeUpdated","requestTime","clearInterval","setInterval","performance","now","timeCounter","start_timestamp","performance_response_time","server_time_at_response","updateTime","time_since_response","clone","timePromise","Client","domain_app_ids","loginUrl","server_url","signup_device","date_first_contact","marketing_queries","default_binary_url","redirectToLogin","initOneAll","provider","el_button","removeEventListener","preventDefault","brand","socialLoginUrl"],"mappings":"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","file":"binary_common.min.js","sourcesContent":["const extend = require('extend');\nrequire('./lib/polyfills/element.matches');\n\nconst template = (string, content) => {\n    let to_replace = content;\n    if (content && !Array.isArray(content)) {\n        to_replace = [content];\n    }\n    return string.replace(/\\[_(\\d+)]/g, (s, index) => to_replace[(+index) - 1]);\n};\n\nconst isEmptyObject = (obj) => {\n    let is_empty = true;\n    if (obj && obj instanceof Object) {\n        Object.keys(obj).forEach((key) => {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) is_empty = false;\n        });\n    }\n    return is_empty;\n};\n\nconst cloneObject = obj => (!isEmptyObject(obj) ? extend(true, Array.isArray(obj) ? [] : {}, obj) : obj);\n\nconst isDeepEqual = (a, b) => {\n    if (typeof a !== typeof b) {\n        return false;\n    } else if (Array.isArray(a)) {\n        return isEqualArray(a, b);\n    } else if (a && b && typeof a === 'object') {\n        return isEqualObject(a, b);\n    }\n    // else\n    return a === b;\n};\n\nconst isEqualArray = (arr1, arr2) => (\n    arr1 === arr2 ||\n    (\n        arr1.length === arr2.length &&\n        arr1.every((value, idx) => isDeepEqual(value, arr2[idx]))\n    )\n);\n\nconst isEqualObject = (obj1, obj2) => (\n    obj1 === obj2 ||\n    (\n        Object.keys(obj1).length === Object.keys(obj2).length &&\n        Object.keys(obj1).every(key => isDeepEqual(obj1[key], obj2[key]))\n    )\n);\n\n// Filters out duplicates in an array of objects by key\nconst unique = (array, key) => array.filter((e, idx) =>\n    array.findIndex((a, i) => a[key] ? a[key] === e[key] : i === idx) === idx);\n\nconst getPropertyValue = (obj, k) => {\n    let keys = k;\n    if (!Array.isArray(keys)) keys = [keys];\n    if (!isEmptyObject(obj) && keys[0] in obj && keys && keys.length > 1) {\n        return getPropertyValue(obj[keys[0]], keys.slice(1));\n    }\n    // else return clone of object to avoid overwriting data\n    return obj ? cloneObject(obj[keys[0]]) : undefined;\n};\n\n/**\n * Creates a DOM element and adds any attributes to it.\n *\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\n * @return the created DOM element\n */\nconst createElement = (tag_name, attributes = {}) => {\n    const el = document.createElement(tag_name);\n    Object.keys(attributes).forEach((attr) => {\n        const value = attributes[attr];\n        if (attr === 'text') {\n            el.textContent = value;\n        } else if (attr === 'html') {\n            el.html(value);\n        } else {\n            el.setAttribute(attr, value);\n        }\n    });\n    return el;\n};\n\nlet static_hash;\nconst getStaticHash = () => {\n    static_hash = static_hash || (document.querySelector('script[src*=\"binary\"]').getAttribute('src') || '').split('?')[1];\n    return static_hash;\n};\n\nclass PromiseClass {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.reject  = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nmodule.exports = {\n    template,\n    isEmptyObject,\n    cloneObject,\n    isDeepEqual,\n    unique,\n    getPropertyValue,\n    createElement,\n    getStaticHash,\n    PromiseClass,\n};\n","const moment           = require('moment');\nconst getLanguage      = require('../language').get;\nconst LocalStore       = require('../storage').LocalStore;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst getStaticHash    = require('../utility').getStaticHash;\nconst isEmptyObject    = require('../utility').isEmptyObject;\n\n/*\n * Caches WS responses to reduce delay time and number of requests\n * Stores data in LocalStore which is the first one available in: localStorage, sessionStorage, InScriptStore\n *\n * 1. It caches only the response of those calls which determined in `config`\n * 2. It doesn't cache responses which returned error\n * 3. The value is requested by BinarySocket,\n *    if this returns a value according to the logic here, socket code take it as response\n *    but also triggers an async `send` request, to keep the cache updated for next time\n * 4. Uses client's time to set and check for expiry, as the expire durations are not so long to need a more precise one\n *    (And doesn't worth to wait for the response of time call)\n * 5. Some responses should be cached by a particular value from request (e.g. contracts_for_frxAUDJPY)\n *    so there can be more than one value for a particular call\n * 6. Clears the whole cache regardless their expire time on the following events:\n *    6.1. Client changes: login / logout / switch loginid\n *    6.2. Detect a new release (static hash changed)\n */\nconst SocketCache = (() => {\n    // keys are msg_type\n    // expire: how long to keep the value (in minutes)\n    // map_to: to store different responses of the same key, should be array of:\n    //     string  : the property value from echo_req\n    //     function: return value of the function\n    const config = {\n        payout_currencies: { expire: 10 },\n        active_symbols   : { expire: 10, map_to: ['product_type', 'landing_company', getLanguage] },\n        contracts_for    : { expire: 10, map_to: ['contracts_for', 'product_type', 'currency'] },\n        exchange_rates   : { expire: 60, map_to: ['base_currency'] },\n    };\n\n    const storage_key = 'ws_cache';\n\n    let data_obj = {};\n\n    const set = (response) => {\n        const msg_type = response.msg_type;\n\n        if (!config[msg_type]) return;\n\n        // prevent unwanted page behaviour\n        // if a cached version already exists but it gives an error after being called for updating the cache\n        const cached_response = get(response.echo_req) || {};\n        const cached_message  = cached_response[msg_type];\n        const new_message     = response[msg_type];\n\n        const has_error_or_missing = response.error || !(msg_type in response);\n        const has_new_value        = cached_message && isEmptyValue(cached_message) && !isEmptyValue(new_message);\n        const has_old_cache        = cached_message && isEmptyValue(new_message) && !isEmptyValue(cached_message);\n        const has_valid_cache      = !isEmptyValue(cached_response) && !cached_response.error;\n\n        if ((has_error_or_missing || has_new_value || has_old_cache) && has_valid_cache) {\n            clear();\n            window.location.reload();\n            return;\n        }\n\n        const key      = makeKey(response.echo_req, msg_type);\n        const expires  = moment().add(config[msg_type].expire, 'm').valueOf();\n\n        if (!data_obj.static_hash) {\n            data_obj.static_hash = getStaticHash();\n        }\n\n        data_obj[key] = { value: response, expires };\n        LocalStore.setObject(storage_key, data_obj);\n    };\n\n    const isEmptyValue = (data) => {\n        let is_empty_data = false;\n        if (Array.isArray(data)) {\n            if (!data.length) {\n                is_empty_data = true;\n            }\n        } else if (typeof response_data === 'object') {\n            if (!Object.keys(data).length) {\n                is_empty_data = true;\n            }\n        }\n        return is_empty_data;\n    };\n\n    const get = (request, msg_type) => {\n        let response;\n\n        if (isEmptyObject(data_obj)) {\n            data_obj = LocalStore.getObject(storage_key);\n            if (isEmptyObject(data_obj)) return undefined;\n        }\n\n        if (data_obj.static_hash !== getStaticHash()) { // new release\n            clear();\n        }\n\n        const key          = makeKey(request, msg_type);\n        const response_obj = getPropertyValue(data_obj, key) || {};\n\n        if (moment().isBefore(response_obj.expires)) {\n            response = response_obj.value;\n        } else { // remove if expired\n            remove(key);\n        }\n\n        return response;\n    };\n\n    const makeKey = (source_obj = {}, msg_type = '') => {\n        let key = msg_type || Object.keys(source_obj).find(type => config[type]);\n\n        if (key && !isEmptyObject(source_obj)) {\n            ((config[key] || {}).map_to || []).forEach((map_key) => {\n                const value = typeof map_key === 'function' ? map_key() : source_obj[map_key];\n                key += map_key ? `_${value || ''}` : '';\n            });\n        }\n\n        return key;\n    };\n\n    const remove = (key, should_match_all) => {\n        if (should_match_all) {\n            Object.keys(data_obj).forEach((data_key) => {\n                if (data_key.indexOf(key) !== -1) {\n                    delete data_obj[data_key];\n                }\n            });\n        } else if (key in data_obj) {\n            delete data_obj[key];\n        }\n        LocalStore.setObject(storage_key, data_obj);\n    };\n\n    const clear = () => {\n        LocalStore.remove(storage_key);\n        data_obj = {};\n    };\n\n    return {\n        set,\n        get,\n        remove,\n        clear,\n    };\n})();\n\nmodule.exports = SocketCache;\n","const createElement = require('./utility').createElement;\n\n/*\n * function to check if element is visible or not\n *\n */\nconst isVisible = elem => !(!elem || (elem.offsetWidth === 0 && elem.offsetHeight === 0));\n\n/*\n * @param  {String}  id_selector   the selector for the element\n * @param  {Element} parent        optional selector to use for parent, defaults to document\n * @return {Element}               return element if it exists, if it doesn't return a dummy element\n */\nconst getElementById = (id_selector, parent = document) => parent.getElementById(id_selector) || createElement('div');\n\nmodule.exports = {\n    isVisible,\n    getElementById,\n};\n","const toTitleCase = str => (\n    (str || '').replace(/\\w[^\\s/\\\\]*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase())\n);\n\nconst padLeft = (txt, len, char) => {\n    const text = String(txt || '');\n    return text.length >= len ? text : `${Array((len - text.length) + 1).join(char)}${text}`;\n};\n\nconst compareBigUnsignedInt = (a, b) => {\n    let first_num  = numberToString(a);\n    let second_num = numberToString(b);\n    if (!first_num || !second_num) {\n        return '';\n    }\n    const max_length = Math.max(first_num.length, second_num.length);\n    first_num        = padLeft(first_num, max_length, '0');\n    second_num       = padLeft(second_num, max_length, '0');\n\n    // lexicographical comparison\n    let order = 0;\n    if (first_num !== second_num) {\n        order = first_num > second_num ? 1 : -1;\n    }\n\n    return order;\n};\n\nconst numberToString = n => (typeof n === 'number' ? String(n) : n);\n\nmodule.exports = {\n    toTitleCase,\n    padLeft,\n    numberToString,\n    compareBigUnsignedInt,\n};\n","const getLanguage      = require('../language').get;\nconst localize         = require('../localize').localize;\nconst getPropertyValue = require('../utility').getPropertyValue;\n\nlet currencies_config = {};\n\nconst getTextFormat = (number, currency) => `${currency} ${addComma(number, getDecimalPlaces(currency), isCryptocurrency(currency))}`;\n\nconst formatMoney = (currency_value, amount, exclude_currency, decimals = 0, minimumFractionDigits = 0) => {\n    let money = amount;\n    if (money) money = String(money).replace(/,/g, '');\n    const sign           = money && Number(money) < 0 ? '-' : '';\n    const decimal_places = decimals || getDecimalPlaces(currency_value);\n\n    money = isNaN(money) ? 0 : Math.abs(money);\n    if (typeof Intl !== 'undefined') {\n        const options = {\n            minimumFractionDigits: minimumFractionDigits || decimal_places,\n            maximumFractionDigits: decimal_places,\n        };\n        money = new Intl.NumberFormat(getLanguage().toLowerCase().replace('_', '-'), options).format(money);\n    } else {\n        money = addComma(money, decimal_places);\n    }\n\n    return sign + (exclude_currency ? '' : formatCurrency(currency_value)) + money;\n};\n\nconst formatCurrency = currency => `<span class=\"symbols ${(currency || '').toLowerCase()}\"></span>`;\n\nconst addComma = (num, decimal_points, is_crypto) => {\n    let number = String(num || 0).replace(/,/g, '');\n    if (typeof decimal_points !== 'undefined') {\n        number = (+number).toFixed(decimal_points);\n    }\n    if (is_crypto) {\n        number = parseFloat(+number);\n    }\n\n    return number.toString().replace(/(^|[^\\w.])(\\d{4,})/g, ($0, $1, $2) => (\n        $1 + $2.replace(/\\d(?=(?:\\d\\d\\d)+(?!\\d))/g, '$&,')\n    ));\n};\n\nconst calcDecimalPlaces = (currency) => isCryptocurrency(currency) ? 8 : 2;\n\nconst getDecimalPlaces = (currency) => (\n    // need to check currencies_config[currency] exists instead of || in case of 0 value\n    currencies_config[currency] ? getPropertyValue(currencies_config, [currency, 'fractional_digits']) : calcDecimalPlaces(currency)\n);\n\nconst setCurrencies = (website_status) => {\n    currencies_config = website_status.currencies_config;\n};\n\n// (currency in crypto_config) is a back-up in case website_status doesn't include the currency config, in some cases where it's disabled\nconst isCryptocurrency = currency => /crypto/i.test(getPropertyValue(currencies_config, [currency, 'type'])) || (currency in CryptoConfig.get());\n\nconst CryptoConfig = (() => {\n    let crypto_config;\n\n    const initCryptoConfig = () => ({\n        BTC: { name: localize('Bitcoin'),       min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        BCH: { name: localize('Bitcoin Cash'),  min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        ETH: { name: localize('Ether'),         min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        ETC: { name: localize('Ether Classic'), min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        LTC: { name: localize('Litecoin'),      min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        UST: { name: localize('Tether'),        min_withdrawal: 0.02,  pa_max_withdrawal: 2000, pa_min_withdrawal: 10 },\n        USB: { name: localize('Binary Coin'),   min_withdrawal: 0.02,  pa_max_withdrawal: 2000, pa_min_withdrawal: 10 },\n    });\n\n    return {\n        get: () => {\n            if (!crypto_config) {\n                crypto_config = initCryptoConfig();\n            }\n            return crypto_config;\n        },\n    };\n})();\n\nconst getMinWithdrawal = currency => (isCryptocurrency(currency) ? (getPropertyValue(CryptoConfig.get(), [currency, 'min_withdrawal']) || 0.002) : 1);\n\n/**\n * Returns the transfer limits for the account.\n * @param currency\n * @param {string} max|undefined\n * @returns numeric|undefined\n */\nconst getTransferLimits = (currency, which) => {\n    const transfer_limits = getPropertyValue(currencies_config, [currency, 'transfer_between_accounts', 'limits']) || getMinWithdrawal(currency);\n    const decimals        = getDecimalPlaces(currency);\n    if (which === 'max') {\n        return transfer_limits.max ? transfer_limits.max.toFixed(decimals) : undefined;\n    }\n\n    return transfer_limits.min ? transfer_limits.min.toFixed(decimals) : undefined;\n};\n\nconst getTransferFee = (currency_from, currency_to) => {\n    const transfer_fee = getPropertyValue(currencies_config, [currency_from, 'transfer_between_accounts', 'fees', currency_to]);\n    return `${typeof transfer_fee === 'undefined' ? '1' : transfer_fee}%`;\n};\n\n// returns in a string format, e.g. '0.00000001'\nconst getMinimumTransferFee = (currency) => {\n    const decimals = getDecimalPlaces(currency);\n    return `${currency} ${(1 / Math.pow(10, decimals)).toFixed(decimals)}`; // we need toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\n};\n\n// @param {String} limit = max|min\nconst getPaWithdrawalLimit = (currency, limit) => {\n    if (isCryptocurrency(currency)) {\n        return getPropertyValue(CryptoConfig.get(), [currency, `pa_${limit}_withdrawal`]); // pa_min_withdrawal and pa_max_withdrawal used here\n    }\n    return limit === 'max' ? 2000 : 10; // limits for fiat currency\n};\n\nconst getCurrencyName = currency => getPropertyValue(CryptoConfig.get(), [currency, 'name']) || '';\n\nconst getMinPayout = currency => getPropertyValue(currencies_config, [currency, 'stake_default']);\n\nmodule.exports = {\n    formatMoney,\n    formatCurrency,\n    addComma,\n    getDecimalPlaces,\n    setCurrencies,\n    isCryptocurrency,\n    getCurrencyName,\n    getMinWithdrawal,\n    getTransferLimits,\n    getTransferFee,\n    getMinimumTransferFee,\n    getTextFormat,\n    getMinPayout,\n    getPaWithdrawalLimit,\n    getCurrencies: () => currencies_config,\n};\n","const Cookies          = require('js-cookie');\nconst getPropertyValue = require('./utility').getPropertyValue;\nconst isEmptyObject    = require('./utility').isEmptyObject;\nconst isProduction     = require('../config').isProduction;\n\nconst getObject = function (key) {\n    return JSON.parse(this.getItem(key) || '{}');\n};\n\nconst setObject = function (key, value) {\n    if (value && value instanceof Object) {\n        this.setItem(key, JSON.stringify(value));\n    }\n};\n\nif (typeof Storage !== 'undefined') {\n    Storage.prototype.getObject = getObject;\n    Storage.prototype.setObject = setObject;\n}\n\nconst isStorageSupported = (storage) => {\n    if (typeof storage === 'undefined') {\n        return false;\n    }\n\n    const test_key = 'test';\n    try {\n        storage.setItem(test_key, '1');\n        storage.removeItem(test_key);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nconst Store = function (storage) {\n    this.storage           = storage;\n    this.storage.getObject = getObject;\n    this.storage.setObject = setObject;\n};\n\nStore.prototype = {\n    get(key) {\n        return this.storage.getItem(key) || undefined;\n    },\n    set(key, value) {\n        if (typeof value !== 'undefined') {\n            this.storage.setItem(key, value);\n        }\n    },\n    getObject(key) {\n        return typeof this.storage.getObject === 'function' // Prevent runtime error in IE\n            ? this.storage.getObject(key)\n            : JSON.parse(this.storage.getItem(key) || '{}');\n    },\n    setObject(key, value) {\n        if (typeof this.storage.setObject === 'function') { // Prevent runtime error in IE\n            this.storage.setObject(key, value);\n        } else {\n            this.storage.setItem(key, JSON.stringify(value));\n        }\n    },\n    remove(key) { this.storage.removeItem(key); },\n    clear()     { this.storage.clear(); },\n};\n\nconst InScriptStore = function (object) {\n    this.store = typeof object !== 'undefined' ? object : {};\n};\n\nInScriptStore.prototype = {\n    get(key) {\n        return getPropertyValue(this.store, key);\n    },\n    set(k, value, obj = this.store) {\n        let key = k;\n        if (!Array.isArray(key)) key = [key];\n        if (key.length > 1) {\n            if (!(key[0] in obj) || isEmptyObject(obj[key[0]])) obj[key[0]] = {};\n            this.set(key.slice(1), value, obj[key[0]]);\n        } else {\n            obj[key[0]] = value;\n        }\n    },\n    getObject(key) {\n        return JSON.parse(this.get(key) || '{}');\n    },\n    setObject(key, value) {\n        this.set(key, JSON.stringify(value));\n    },\n    remove(...keys) {\n        keys.forEach((key) => { delete this.store[key]; });\n    },\n    clear()   { this.store = {}; },\n    has(key)  { return this.get(key) !== undefined; },\n    keys()    { return Object.keys(this.store); },\n    call(key) { if (typeof this.get(key) === 'function') this.get(key)(); },\n};\n\nconst State     = new InScriptStore();\nState.prototype = InScriptStore.prototype;\n/**\n * Shorthand function to get values from response object of State\n *\n * @param {String} pathname\n *     e.g. getResponse('authorize.currency') == get(['response', 'authorize', 'authorize', 'currency'])\n */\nState.prototype.getResponse = function (pathname) {\n    let path = pathname;\n    if (typeof path === 'string') {\n        const keys = path.split('.');\n        path = ['response', keys[0]].concat(keys);\n    }\n    return this.get(path);\n};\nState.set('response', {});\n\nconst CookieStorage = function (cookie_name, cookie_domain) {\n    const hostname = window.location.hostname;\n\n    this.initialized = false;\n    this.cookie_name = cookie_name;\n    this.domain      = cookie_domain || (isProduction() ? `.${hostname.split('.').slice(-2).join('.')}` : hostname);\n    this.path        = '/';\n    this.expires     = new Date('Thu, 1 Jan 2037 12:00:00 GMT');\n    this.value       = {};\n};\n\nCookieStorage.prototype = {\n    read() {\n        const cookie_value = Cookies.get(this.cookie_name);\n        try {\n            this.value = cookie_value ? JSON.parse(cookie_value) : {};\n        } catch (e) {\n            this.value = {};\n        }\n        this.initialized = true;\n    },\n    write(val, expireDate, isSecure) {\n        if (!this.initialized) this.read();\n        this.value = val;\n        if (expireDate) this.expires = expireDate;\n        Cookies.set(this.cookie_name, this.value, {\n            expires: this.expires,\n            path   : this.path,\n            domain : this.domain,\n            secure : !!isSecure,\n        });\n    },\n    get(key) {\n        if (!this.initialized) this.read();\n        return this.value[key];\n    },\n    set(key, val) {\n        if (!this.initialized) this.read();\n        this.value[key] = val;\n        Cookies.set(this.cookie_name, this.value, {\n            expires: new Date(this.expires),\n            path   : this.path,\n            domain : this.domain,\n        });\n    },\n    remove() {\n        Cookies.remove(this.cookie_name, {\n            path  : this.path,\n            domain: this.domain,\n        });\n    },\n};\n\nconst removeCookies = (...cookie_names) => {\n    const domains = [\n        `.${document.domain.split('.').slice(-2).join('.')}`,\n        `.${document.domain}`,\n    ];\n\n    let parent_path = window.location.pathname.split('/', 2)[1];\n    if (parent_path !== '') {\n        parent_path = `/${parent_path}`;\n    }\n\n    cookie_names.forEach((c) => {\n        Cookies.remove(c, { path: '/', domain: domains[0] });\n        Cookies.remove(c, { path: '/', domain: domains[1] });\n        Cookies.remove(c);\n        if (new RegExp(c).test(document.cookie) && parent_path) {\n            Cookies.remove(c, { path: parent_path, domain: domains[0] });\n            Cookies.remove(c, { path: parent_path, domain: domains[1] });\n            Cookies.remove(c, { path: parent_path });\n        }\n    });\n};\n\nlet SessionStore,\n    LocalStore;\n\nif (isStorageSupported(window.localStorage)) {\n    LocalStore = new Store(window.localStorage);\n}\nif (isStorageSupported(window.sessionStorage)) {\n    SessionStore = new Store(window.sessionStorage);\n}\n\nif (!LocalStore) {\n    LocalStore = new InScriptStore();\n}\nif (!SessionStore) {\n    SessionStore = new InScriptStore();\n}\n\nmodule.exports = {\n    isStorageSupported,\n    CookieStorage,\n    removeCookies,\n    State,\n    SessionStore,\n    LocalStore,\n};\n","const urlForLanguage             = require('./language').urlFor;\nconst urlLang                    = require('./language').urlLang;\nconst getCurrentProductionDomain = require('../config').getCurrentProductionDomain;\nrequire('url-polyfill');\n\nconst Url = (() => {\n    let location_url,\n        static_host;\n\n    const reset = () => {\n        location_url = window ? window.location : location_url;\n    };\n\n    const params = (href) => {\n        const arr_params = [];\n        const parsed     = ((href ? new URL(href) : location_url).search || '').substr(1).split('&');\n        let p_l          = parsed.length;\n        while (p_l--) {\n            const param = parsed[p_l].split('=');\n            arr_params.push(param);\n        }\n        return arr_params;\n    };\n\n    const paramsHash = (href) => {\n        const param_hash = {};\n        const arr_params = params(href);\n        let param        = arr_params.length;\n        while (param--) {\n            if (arr_params[param][0]) {\n                param_hash[arr_params[param][0]] = arr_params[param][1] || '';\n            }\n        }\n        return param_hash;\n    };\n\n    const normalizePath = path => (path ? path.replace(/(^\\/|\\/$|[^a-zA-Z0-9-_/])/g, '') : '');\n\n    const urlFor = (path, pars, language, should_change_to_legacy = false) => {\n        const lang = (language || urlLang()).toLowerCase();\n        // url language might differ from passed language, so we will always replace using the url language\n        const url_lang = (language ? urlLang().toLowerCase() : lang);\n        const url = window.location.href;\n        let domain = url.substring(0, url.indexOf(`/${url_lang}/`) + url_lang.length + 2);\n        if (should_change_to_legacy) {\n            if (/localhost|binary\\.sx/.test(domain)) {\n                domain = `https://binary.com/${url_lang}/`;\n            } else {\n                domain = domain.replace(/deriv\\.app/, 'binary.com');\n            }\n        }\n        const new_url = `${domain}${(normalizePath(path) || 'home')}.html${(pars ? `?${pars}` : '')}`;\n        // replace old lang with new lang\n        return urlForLanguage(lang, new_url);\n    };\n\n    const default_domain = 'binary.com';\n    const host_map = { // the exceptions regarding updating the URLs\n        'bot.binary.com'       : 'www.binary.bot',\n        'developers.binary.com': 'developers.binary.com', // same, shouldn't change\n        'academy.binary.com'   : 'academy.binary.com',\n        'tech.binary.com'      : 'tech.binary.com',\n        'blog.binary.com'      : 'blog.binary.com',\n    };\n\n    const urlForCurrentDomain = (href) => {\n        const current_domain = getCurrentProductionDomain();\n\n        if (!current_domain) {\n            return href; // don't change when domain is not supported\n        }\n\n        const url_object = new URL(href);\n        if (Object.keys(host_map).includes(url_object.hostname)) {\n            url_object.hostname = host_map[url_object.hostname];\n        } else if (url_object.hostname.indexOf(default_domain) !== -1) {\n            // to keep all non-Binary links unchanged, we use default domain for all Binary links in the codebase (javascript and templates)\n            url_object.hostname = url_object.hostname.replace(new RegExp(`\\\\.${default_domain}`, 'i'), `.${current_domain}`);\n        } else {\n            return href;\n        }\n\n        return url_object.href;\n    };\n\n    const urlForStatic = (path = '') => {\n        if (!static_host || static_host.length === 0) {\n            static_host = document.querySelector('script[src*=\"vendor.min.js\"]');\n            if (static_host) {\n                static_host = static_host.getAttribute('src');\n            }\n\n            if (static_host && static_host.length > 0) {\n                static_host = static_host.substr(0, static_host.indexOf('/js/') + 1);\n            } else {\n                static_host = Url.websiteUrl();\n            }\n        }\n\n        return static_host + path.replace(/(^\\/)/g, '');\n    };\n\n    return {\n        reset,\n        paramsHash,\n        urlFor,\n        urlForCurrentDomain,\n        urlForStatic,\n\n        param          : name => paramsHash()[name],\n        websiteUrl     : () => `${location.protocol}//${location.hostname}/`,\n        getHostMap     : () => host_map,\n        resetStaticHost: () => { static_host = undefined; },\n    };\n})();\n\nmodule.exports = Url;\n","const ClientBase       = require('./client_base');\nconst SocketCache      = require('./socket_cache');\nconst getLanguage      = require('../language').get;\nconst State            = require('../storage').State;\nconst cloneObject      = require('../utility').cloneObject;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst isEmptyObject    = require('../utility').isEmptyObject;\nconst PromiseClass     = require('../utility').PromiseClass;\nconst getAppId         = require('../../config').getAppId;\nconst getSocketURL     = require('../../config').getSocketURL;\n\n/*\n * An abstraction layer over native javascript WebSocket,\n * which provides additional functionality like\n * reopen the closed connection and process the buffered requests\n */\nconst BinarySocketBase = (() => {\n    let binary_socket;\n\n    let config               = {};\n    let buffered_sends       = [];\n    let req_id               = 0;\n    let wrong_app_id         = 0;\n    let is_available         = true;\n    let is_disconnect_called = false;\n    let is_connected_before  = false;\n\n    const socket_url = `${getSocketURL()}?app_id=${getAppId()}&l=${getLanguage()}`;\n    const timeouts   = {};\n    const promises   = {};\n\n    const no_duplicate_requests = [\n        'authorize',\n        'get_settings',\n        'residence_list',\n        'landing_company',\n        'payout_currencies',\n        'asset_index',\n    ];\n\n    const sent_requests = {\n        items : [],\n        clear : () => { sent_requests.items = []; },\n        has   : msg_type => sent_requests.items.indexOf(msg_type) >= 0,\n        add   : (msg_type) => { if (!sent_requests.has(msg_type)) sent_requests.items.push(msg_type); },\n        remove: (msg_type) => {\n            if (sent_requests.has(msg_type)) sent_requests.items.splice(sent_requests.items.indexOf(msg_type, 1));\n        },\n    };\n\n    const waiting_list = {\n        items: {},\n        add  : (msg_type, promise_obj) => {\n            if (!waiting_list.items[msg_type]) {\n                waiting_list.items[msg_type] = [];\n            }\n            waiting_list.items[msg_type].push(promise_obj);\n        },\n        resolve: (response) => {\n            const msg_type      = response.msg_type;\n            const this_promises = waiting_list.items[msg_type];\n            if (this_promises && this_promises.length) {\n                this_promises.forEach((pr) => {\n                    if (!waiting_list.another_exists(pr, msg_type)) {\n                        pr.resolve(response);\n                    }\n                });\n                waiting_list.items[msg_type] = [];\n            }\n        },\n        another_exists: (pr, msg_type) => (\n            Object.keys(waiting_list.items)\n                .some(type => (\n                    type !== msg_type &&\n                    waiting_list.items[type].indexOf(pr) !== -1\n                ))\n        ),\n    };\n\n    const clearTimeouts = () => {\n        Object.keys(timeouts).forEach((key) => {\n            clearTimeout(timeouts[key]);\n            delete timeouts[key];\n        });\n    };\n\n    const isReady = () => hasReadyState(1);\n\n    const isClose = () => !binary_socket || hasReadyState(2, 3);\n\n    const hasReadyState = (...states) => binary_socket && states.some(s => binary_socket.readyState === s);\n\n    const sendBufferedRequests = () => {\n        while (buffered_sends.length > 0 && is_available) {\n            const req_obj = buffered_sends.shift();\n            send(req_obj.request, req_obj.options);\n        }\n    };\n\n    const wait = (...msg_types) => {\n        const promise_obj = new PromiseClass();\n        let is_resolved   = true;\n        msg_types.forEach((msg_type) => {\n            const last_response = State.get(['response', msg_type]);\n            if (!last_response) {\n                if (msg_type !== 'authorize' || ClientBase.isLoggedIn()) {\n                    waiting_list.add(msg_type, promise_obj);\n                    is_resolved = false;\n                }\n            } else if (msg_types.length === 1) {\n                promise_obj.resolve(last_response);\n            }\n        });\n        if (is_resolved) {\n            promise_obj.resolve();\n        }\n        return promise_obj.promise;\n    };\n\n    /**\n     * @param {Object} data: request object\n     * @param {Object} options:\n     *      forced  : {boolean}  sends the request regardless the same msg_type has been sent before\n     *      msg_type: {string}   specify the type of request call\n     *      callback: {function} to call on response of streaming requests\n     */\n    const send = function (data, options = {}) {\n        const promise_obj = options.promise || new PromiseClass();\n\n        if (!data || isEmptyObject(data)) return promise_obj.promise;\n\n        const msg_type = options.msg_type || no_duplicate_requests.find(c => c in data);\n\n        // Fetch from cache\n        if (!options.forced) {\n            const response = SocketCache.get(data, msg_type);\n            if (response) {\n                State.set(['response', msg_type], cloneObject(response));\n                if (isReady() && is_available) { // make the request to keep the cache updated\n                    binary_socket.send(JSON.stringify(data), { forced: true });\n                } else if (+data.time !== 1) { // Do not buffer all time requests\n                    buffered_sends.push({\n                        request: data,\n                        options: Object.assign(options, { promise: promise_obj, forced: true }),\n                    });\n                }\n                promise_obj.resolve(response);\n                return promise_obj.promise;\n            }\n        }\n\n        // Fetch from state\n        if (!options.forced && msg_type && no_duplicate_requests.indexOf(msg_type) !== -1) {\n            const last_response = State.get(['response', msg_type]);\n            if (last_response) {\n                promise_obj.resolve(last_response);\n                return promise_obj.promise;\n            } else if (sent_requests.has(msg_type)) {\n                return wait(msg_type).then((response) => {\n                    promise_obj.resolve(response);\n                    return promise_obj.promise;\n                });\n            }\n        }\n\n        if (!data.req_id) {\n            data.req_id = ++req_id;\n        }\n        promises[data.req_id] = {\n            callback: (response) => {\n                if (typeof options.callback === 'function') {\n                    options.callback(response);\n                } else {\n                    promise_obj.resolve(response);\n                }\n            },\n            subscribe: !!data.subscribe,\n        };\n\n        if (isReady() && is_available && config.isOnline()) {\n            is_disconnect_called = false;\n            if (!getPropertyValue(data, 'passthrough') && !getPropertyValue(data, 'verify_email')) {\n                data.passthrough = {};\n            }\n\n            binary_socket.send(JSON.stringify(data));\n            config.wsEvent('send');\n            if (msg_type && !sent_requests.has(msg_type)) {\n                sent_requests.add(msg_type);\n            }\n        } else if (+data.time !== 1) { // Do not buffer all time requests\n            buffered_sends.push({ request: data, options: Object.assign(options, { promise: promise_obj }) });\n        }\n\n        return promise_obj.promise;\n    };\n\n    const init = (options) => {\n        if (wrong_app_id === getAppId()) {\n            return;\n        }\n        if (typeof options === 'object' && config !== options) {\n            config         = options;\n            buffered_sends = [];\n        }\n        clearTimeouts();\n        config.wsEvent('init');\n\n        if (isClose()) {\n            binary_socket = new WebSocket(socket_url);\n            State.set('response', {});\n        }\n\n        binary_socket.onopen = () => {\n            config.wsEvent('open');\n            if (ClientBase.isLoggedIn()) {\n                send({ authorize: ClientBase.get('token') }, { forced: true });\n            } else {\n                sendBufferedRequests();\n            }\n\n            if (typeof config.onOpen === 'function') {\n                config.onOpen(isReady());\n            }\n\n            if (typeof config.onReconnect === 'function' && is_connected_before) {\n                config.onReconnect();\n            }\n\n            if (!is_connected_before) {\n                is_connected_before = true;\n            }\n        };\n\n        binary_socket.onmessage = (msg) => {\n            config.wsEvent('message');\n            const response = msg.data ? JSON.parse(msg.data) : undefined;\n            if (response) {\n                SocketCache.set(response);\n                const msg_type = response.msg_type;\n\n                // store in State\n                if (!getPropertyValue(response, ['echo_req', 'subscribe']) || /balance|website_status/.test(msg_type)) {\n                    State.set(['response', msg_type], cloneObject(response));\n                }\n                // resolve the send promise\n                const this_req_id = response.req_id;\n                const pr          = this_req_id ? promises[this_req_id] : null;\n                if (pr && typeof pr.callback === 'function') {\n                    pr.callback(response);\n                    if (!pr.subscribe) {\n                        delete promises[this_req_id];\n                    }\n                }\n                // resolve the wait promise\n                waiting_list.resolve(response);\n\n                if (getPropertyValue(response, ['error', 'code']) === 'InvalidAppID') {\n                    wrong_app_id = getAppId();\n                }\n\n                if (typeof config.onMessage === 'function') {\n                    config.onMessage(response);\n                }\n            }\n        };\n\n        binary_socket.onclose = () => {\n            sent_requests.clear();\n            clearTimeouts();\n            config.wsEvent('close');\n\n            if (wrong_app_id !== getAppId() && typeof config.onDisconnect === 'function' && !is_disconnect_called) {\n                config.onDisconnect();\n                is_disconnect_called = true;\n            }\n        };\n    };\n\n    const clear = (msg_type) => {\n        buffered_sends = [];\n        if (msg_type) {\n            State.set(['response', msg_type], undefined);\n            sent_requests.remove(msg_type);\n        }\n    };\n\n    const availability = (status) => {\n        if (typeof status !== 'undefined') {\n            is_available = !!status;\n        }\n        return is_available;\n    };\n\n    return {\n        init,\n        wait,\n        send,\n        clear,\n        clearTimeouts,\n        availability,\n        hasReadyState,\n        sendBuffered      : sendBufferedRequests,\n        get               : () => binary_socket,\n        setOnDisconnect   : (onDisconnect) => { config.onDisconnect = onDisconnect; },\n        setOnReconnect    : (onReconnect) => { config.onReconnect = onReconnect; },\n        removeOnReconnect : () => { delete config.onReconnect; },\n        removeOnDisconnect: () => { delete config.onDisconnect; },\n    };\n})();\n\nmodule.exports = BinarySocketBase;\n","const Cookies       = require('js-cookie');\nconst CookieStorage = require('./storage').CookieStorage;\n\nconst Language = (() => {\n    const all_languages = {\n        ACH  : 'Translations',\n        EN   : 'English',\n        DE   : 'Deutsch',\n        ES   : 'Español',\n        FR   : 'Français',\n        ID   : 'Indonesia',\n        IT   : 'Italiano',\n        PL   : 'Polish',\n        PT   : 'Português',\n        RU   : 'Русский',\n        TH   : 'Thai',\n        VI   : 'Tiếng Việt',\n        ZH_CN: '简体中文',\n        ZH_TW: '繁體中文',\n    };\n    const default_language = 'EN';\n\n    const setCookieLanguage = (lang) => {\n        if (!Cookies.get('language') || lang) {\n            const cookie = new CookieStorage('language');\n            cookie.write((lang || getLanguage()).toUpperCase());\n        }\n    };\n\n    let url_lang = null;\n\n    const lang_regex = new RegExp(`^(${Object.keys(all_languages).join('|')})$`, 'i');\n\n    const languageFromUrl = (custom_url) => {\n        if (url_lang && !custom_url) return url_lang;\n        const url_params = (custom_url || window.location.href).split('/').slice(3);\n        const language   = (url_params.find(lang => lang_regex.test(lang)) || '');\n        if (!custom_url) {\n            url_lang = language;\n        }\n        return language;\n    };\n\n    let current_lang = null;\n\n    const getLanguage = () => {\n        if (/ach/i.test(current_lang) || /ach/i.test(languageFromUrl())) {\n            const crowdin_lang_key = 'jipt_language_code_binary-static';\n            const crowdin_lang     = localStorage.getItem(crowdin_lang_key) || Cookies.get(crowdin_lang_key); // selected language for in-context translation\n            if (crowdin_lang) {\n                current_lang = crowdin_lang.toUpperCase().replace('-', '_').toUpperCase();\n                if (document.body) {\n                    document.body.classList.add(current_lang); // set the body class removed by crowdin code\n                }\n            }\n        }\n        current_lang = (current_lang || (languageFromUrl() || Cookies.get('language') || default_language).toUpperCase());\n        return current_lang;\n    };\n\n    const urlForLanguage = (lang, url = window.location.href) =>\n        url.replace(new RegExp(`/${getLanguage()}/`, 'i'), `/${(lang || default_language).trim().toLowerCase()}/`);\n\n    return {\n        getAll   : () => all_languages,\n        setCookie: setCookieLanguage,\n        get      : getLanguage,\n        urlFor   : urlForLanguage,\n        urlLang  : languageFromUrl,\n        reset    : () => { url_lang = null; current_lang = null; },\n    };\n})();\n\nmodule.exports = Language;\n","const moment        = require('moment');\nconst urlForStatic  = require('./url').urlForStatic;\nconst getStaticHash = require('./utility').getStaticHash;\n\n// only reload if it's more than 10 minutes since the last reload\nconst shouldForceReload = last_reload => !last_reload || +last_reload + (10 * 60 * 1000) < moment().valueOf();\n\n// calling this method is handled by GTM tags\nconst checkNewRelease = () => {\n    const last_reload = localStorage.getItem('new_release_reload_time');\n    if (!shouldForceReload(last_reload)) return false;\n    localStorage.setItem('new_release_reload_time', moment().valueOf());\n\n    const current_hash = getStaticHash();\n    const xhttp        = new XMLHttpRequest();\n\n    xhttp.onreadystatechange = () => {\n        if (+xhttp.readyState === 4 && +xhttp.status === 200) {\n            const latest_hash = xhttp.responseText;\n            if (latest_hash && current_hash && latest_hash !== current_hash) {\n                window.location.reload(true);\n            }\n        }\n    };\n    xhttp.open('GET', urlForStatic(`version?${Math.random().toString(36).slice(2)}`), true);\n    xhttp.send();\n\n    return true;\n};\n\nmodule.exports = {\n    shouldForceReload,\n    checkNewRelease,\n};\n","if (!Element.prototype.matches) {\n    Element.prototype.matches =\n        Element.prototype.matchesSelector ||\n        Element.prototype.mozMatchesSelector ||\n        Element.prototype.msMatchesSelector ||\n        Element.prototype.oMatchesSelector ||\n        Element.prototype.webkitMatchesSelector ||\n        function(s) {\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n}\n","const BinarySocket = require('./socket_base');\nconst localize     = require('../localize').localize;\n\n/*\n * Monitors the network status and initialises the WebSocket connection\n * 1. online : check the WS status (init/send: blink after timeout, open/message: online)\n * 2. offline: it is offline\n */\nconst NetworkMonitorBase = (() => {\n    const StatusConfig = (() => {\n        let status_config;\n\n        const initStatusConfig = () => ({\n            online  : { class: 'online',  tooltip: localize('Online') },\n            offline : { class: 'offline', tooltip: localize('Offline') },\n            blinking: { class: 'blinker', tooltip: localize('Connecting to server') },\n        });\n\n        return {\n            get: (status) => {\n                if (!status_config) {\n                    status_config = initStatusConfig();\n                }\n                return status_config[status];\n            },\n        };\n    })();\n\n    const pendings = {};\n    const pending_keys = {\n        ws_init   : 'ws_init',\n        ws_request: 'ws_request',\n    };\n    const pending_timeouts = {\n        [pending_keys.ws_init]   : 5000,\n        [pending_keys.ws_request]: 10000,\n    };\n\n    let ws_config,\n        network_status,\n        updateUI;\n\n    const init = (socket_general_functions, fncUpdateUI) => {\n        updateUI  = fncUpdateUI;\n        ws_config = Object.assign({ wsEvent, isOnline }, socket_general_functions);\n\n        if ('onLine' in navigator) {\n            window.addEventListener('online',  setStatus);\n            window.addEventListener('offline', setStatus);\n        } else { // if not supported, default to online and fallback to WS checks\n            navigator.onLine = true;\n        }\n\n        if (isOnline()) {\n            BinarySocket.init(ws_config);\n        }\n\n        setStatus(isOnline() ? 'online' : 'offline');\n    };\n\n    const isOnline = () => navigator.onLine;\n\n    const wsReconnect = () => {\n        if (isOnline() && BinarySocket.hasReadyState(2, 3)) { // CLOSING or CLOSED\n            BinarySocket.init(ws_config);\n        } else {\n            BinarySocket.send({ ping: 1 }); // trigger a request to get stable status sooner\n        }\n    };\n\n    const setStatus = (status) => {\n        if (!isOnline()) {\n            network_status = 'offline';\n        } else if (pending_keys[status] || network_status === 'offline') {\n            network_status = 'blinking';\n            wsReconnect();\n        } else {\n            network_status = 'online';\n        }\n\n        if (typeof updateUI === 'function') {\n            updateUI(StatusConfig.get(network_status), isOnline());\n        }\n    };\n\n    const ws_events_map = {\n        init   : () => setPending(pending_keys.ws_init),\n        open   : () => clearPendings(pending_keys.ws_init),\n        send   : () => setPending(pending_keys.ws_request),\n        message: () => clearPendings(),\n        close  : () => setPending(pending_keys.ws_init),\n    };\n\n    const wsEvent = (event) => {\n        if (typeof ws_events_map[event] === 'function') {\n            ws_events_map[event]();\n        }\n    };\n\n    const setPending = (key) => {\n        if (!pendings[key]) {\n            pendings[key] = setTimeout(() => {\n                pendings[key] = undefined;\n                setStatus(key);\n            }, pending_timeouts[key]);\n        }\n    };\n\n    const clearPendings = (key) => {\n        const clear = (k) => {\n            clearTimeout(pendings[k]);\n            pendings[k] = undefined;\n            if (k === pending_keys.ws_request) {\n                setStatus('online');\n            }\n        };\n\n        if (key) {\n            clear(key);\n        } else {\n            Object.keys(pendings).forEach(clear);\n        }\n    };\n\n    return {\n        init,\n        wsEvent,\n    };\n})();\n\nmodule.exports = NetworkMonitorBase;\n","import BinarySocket   from './socket_base';\nimport {\n    cloneObject,\n    getPropertyValue,\n    isDeepEqual,\n    isEmptyObject }   from '../utility';\n\n/**\n * A layer over BinarySocket to handle subscribing to streaming calls\n * in order to keep track of subscriptions, manage forget, prevent multiple subscription at the same time, ...\n *\n * structure of the the subscription object is:\n * {\n *     1: { msg_type: 'proposal', request: { ... }, stream_id: '...', subscribers: [ ... ] },\n *     2: ...\n * }\n * object keys: subscription_id that assigned to each subscription\n * msg_type   : msg_type of the request for faster filtering\n * request    : the request object, used to subscribe to the same stream when there is a new subscribe request with exactly the same values\n * stream_id  : id of the stream which stored from its response and used to forget the stream when needed\n * subscribers: an array of callbacks to dispatch the response to\n */\nconst SubscriptionManager = (() => {\n    const subscriptions    = {};\n    const forget_requested = {};\n\n    let subscription_id = 0;\n\n    /**\n     * To submit request for a new subscription\n     *\n     * @param {String}   msg_type             msg_type of the request\n     * @param {Object}   request_obj          the whole object of the request to be made\n     * @param {Function} fncCallback          callback function to pass the responses to\n     * @param {Boolean}  should_forget_first  when it's true: forgets the previous subscription, then subscribes after receiving the forget response (if any)\n     */\n    const subscribe = (msg_type, request_obj, fncCallback, should_forget_first = false) => {\n        if (should_forget_first) {\n            forget(msg_type, fncCallback).then(() => {\n                subscribe(msg_type, request_obj, fncCallback);\n            });\n            return;\n        }\n\n        let sub_id = Object.keys(subscriptions).find(id => isDeepEqual(request_obj, subscriptions[id].request));\n\n        if (!sub_id) {\n            sub_id = ++subscription_id;\n\n            subscriptions[sub_id] = {\n                msg_type,\n                request    : cloneObject(request_obj),\n                stream_id  : '',             // stream_id will be updated after receiving the response\n                subscribers: [fncCallback],\n            };\n\n            BinarySocket.send(request_obj, {\n                callback: (response) => dispatch(response, sub_id),\n            });\n        } else if (!hasCallbackFunction(sub_id, fncCallback)) {\n            // there is already an active subscription for the very same request which fncCallback is not subscribed to it yet\n            subscriptions[sub_id].subscribers.push(fncCallback);\n        }\n    };\n\n    /**\n     * Add subscription without subscribers from request\n     * E.g. open subscription to proposal_open_contract on buy request\n     * @param {String}   msg_type               msg_type of the subscription\n     * @param {Object}   send_request           the object of the request to be made\n     * @param {Object}   subscribe_request      the object of the subscription request\n     * @param {Array}    subscription_props     Array of prop strings to add to subscribe_request from initial request, e.g. contract_id\n     */\n    const addSubscriptionFromRequest = (msg_type, send_request, subscribe_request, subscription_props) =>\n        new Promise((resolve) => {\n            let sub_id;\n            let is_stream = false;\n\n            BinarySocket.send(send_request, {\n                callback: (response) => {\n                    if (response.error) {\n                        return resolve(response);\n                    }\n                    if (!is_stream) {\n                        is_stream = true;\n                        sub_id    = ++subscription_id;\n\n                        if (subscription_props && Array.isArray(subscription_props)) {\n                            subscription_props.forEach((prop) => {\n                                if (response[response.msg_type][prop]) {\n                                    subscribe_request[prop] = response[response.msg_type][prop];\n                                }\n                            });\n                        }\n\n                        subscriptions[sub_id] = {\n                            msg_type,\n                            request    : cloneObject(subscribe_request),\n                            stream_id  : '',             // stream_id will be updated after receiving the response\n                            subscribers: [],\n                        };\n                        return resolve(response);\n                    }\n                    return dispatch(response, sub_id);\n                },\n            });\n        });\n\n    // dispatches the response to subscribers of the specific subscription id (internal use only)\n    const dispatch = (response, sub_id) => {\n        const stream_id = getPropertyValue(response, [response.msg_type, 'id']) || getPropertyValue(response.subscription, ['id']);\n\n        if (!subscriptions[sub_id]) {\n            if (!forget_requested[stream_id]) {\n                forgetStream(stream_id);\n            }\n            return;\n        }\n\n        const sub_info = subscriptions[sub_id];\n        // set the stream_id\n        if (!sub_info.stream_id && stream_id) {\n            sub_info.stream_id = stream_id;\n        }\n\n        // callback subscribers\n        const subscribers = sub_info.subscribers;\n        if (subscribers.length) {\n            if (\n                // it is the first response\n                !sub_info.stream_id &&\n                    (\n                        // the first response returned error\n                        response.error\n                        || (\n                            // not a subscription (i.e. subscribed proposal_open_contract for an expired contract)\n                            // also to filter out streams with no stream id but later it will continue streaming (i.e. proposal_open_contract without contract id)\n                            !isEmptyObject(response[response.msg_type]) &&\n                            // check msg_type to filter out those calls which don't return stream `id` on first response (tick_history, ...)\n                            response.msg_type === sub_info.msg_type\n                        )\n                    )\n                ||\n                // remove when response isn't first and response has no stream_id\n                !stream_id && sub_info.stream_id\n            ) {\n                delete subscriptions[sub_id];\n            }\n            sub_info.subscribers.forEach((fnc) => {\n                fnc(response);\n            });\n        } else {\n            delete subscriptions[sub_id];\n            forgetStream(sub_info.stream_id);\n        }\n    };\n\n    /**\n     * To forget a subscription which submitted for a specific callback function\n     *\n     * @param  {String}   msg_type      msg_type to forget\n     * @param  {Function} fncCallback   the same function passed to subscribe()\n     *     (this is the way to distinguish between different subscribers of the same stream at the same time)\n     * @param  {Object}   match_values  optional, to only forget subscriptions having request that \"contains\" provided values\n     * @return {Promise}  the promise object of all possible forget requests\n     */\n    const forget = (msg_type, fncCallback, match_values) => {\n        if (typeof fncCallback !== 'function') {\n            throw new Error(`Missing callback function. To forget all subscriptions of msg_type: ${msg_type}, please call forgetAll().`);\n        }\n\n        // find corresponding id(s)\n        const sub_ids = Object.keys(subscriptions).filter(id => (\n            subscriptions[id].msg_type === msg_type &&\n            hasCallbackFunction(id, fncCallback)\n        ));\n\n        const forgets_list = [];\n        sub_ids.forEach((id) => {\n            if (match_values && !hasValues(subscriptions[id].request, match_values)) {\n                return;\n            }\n            const stream_id = subscriptions[id].stream_id;\n            if (stream_id && subscriptions[id].subscribers.length === 1) {\n                delete subscriptions[id];\n                forgets_list.push(forgetStream(stream_id));\n            } else {\n                // there are other subscribers, or for some reason there is no stream_id:\n                // (i.e. returned an error, or forget() being called before the first response)\n                subscriptions[id].subscribers.splice(subscriptions[id].subscribers.indexOf(fncCallback), 1);\n            }\n        });\n        return Promise.all(forgets_list);\n    };\n\n    /**\n     * To forget all active subscriptions of a list of msg_types\n     *\n     * @param  {String}  msg_types  list of msg_types to forget\n     * @return {Promise} the promise object of all possible forget_all requests\n     */\n    const forgetAll = (...msg_types) => {\n        const types_to_forget = {};\n\n        msg_types.forEach((msg_type) => {\n            const sub_ids = Object.keys(subscriptions).filter(id => subscriptions[id].msg_type === msg_type);\n            if (sub_ids.length) {\n                sub_ids.forEach((id) => {\n                    delete subscriptions[id];\n                });\n                types_to_forget[msg_type] = true;\n            }\n        });\n\n        return Promise.resolve(\n            !isEmptyObject(types_to_forget) ?\n                BinarySocket.send({ forget_all: Object.keys(types_to_forget) }) :\n                {}\n        );\n    };\n\n    const forgetStream = (stream_id) => {\n        forget_requested[stream_id] = true; // to prevent forgetting multiple times\n        return Promise.resolve(\n            stream_id ?\n                BinarySocket.send({ forget: stream_id }).then(() => { delete forget_requested[stream_id]; }) :\n                {}\n        );\n    };\n\n    const hasCallbackFunction = (sub_id, fncCallback) =>\n        (subscriptions[sub_id] && subscriptions[sub_id].subscribers.indexOf(fncCallback) !== -1);\n\n    const hasValues = (request_obj, values_obj) => (\n        typeof request_obj === 'object' &&\n        typeof values_obj  === 'object' &&\n        Object.keys(values_obj).every(key => request_obj[key] === values_obj[key])\n    );\n\n    return {\n        addSubscriptionFromRequest,\n        subscribe,\n        forget,\n        forgetAll,\n    };\n})();\n\nexport default SubscriptionManager;\n","const Cookies          = require('js-cookie');\nconst moment           = require('moment');\nconst ClientBase       = require('./client_base');\nconst Login            = require('./login');\nconst ServerTime       = require('./server_time');\nconst BinarySocket     = require('./socket_base');\nconst getLanguage      = require('../language').get;\nconst LocalStore       = require('../storage').LocalStore;\nconst State            = require('../storage').State;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst getAppId         = require('../../config').getAppId;\n\nconst GTM = (() => {\n    const isGtmApplicable = () => (/^(16303|16929)$/.test(getAppId()));\n\n    const getCommonVariables = () => ({\n        language: getLanguage(),\n        ...ClientBase.isLoggedIn() && {\n            visitorId: ClientBase.get('loginid'),\n            currency : ClientBase.get('currency'),\n        },\n        ...('is_dark_mode_on' in LocalStore.getObject('ui_store')) && {\n            theme: LocalStore.getObject('ui_store').is_dark_mode_on ? 'dark' : 'light',\n        },\n    });\n\n    const pushDataLayer = (data) => {\n        if (isGtmApplicable() && !Login.isLoginPages()) {\n            dataLayer.push({\n                ...getCommonVariables(),\n                ...data,\n            });\n        }\n    };\n\n    const eventHandler = (get_settings) => {\n        if (!isGtmApplicable()) return;\n        const login_event       = localStorage.getItem('GTM_login');\n        const is_new_account    = localStorage.getItem('GTM_new_account') === '1';\n\n        localStorage.removeItem('GTM_login');\n        localStorage.removeItem('GTM_new_account');\n\n        const affiliate_token = Cookies.getJSON('affiliate_tracking');\n        if (affiliate_token) {\n            pushDataLayer({ bom_affiliate_token: affiliate_token.t });\n        }\n\n        // Get current time (moment, set by server), else fallback to client time\n        const moment_now = window.time || moment().utc();\n        const data = {\n            visitorId         : ClientBase.get('loginid'),\n            bom_account_type  : ClientBase.getAccountType(),\n            bom_currency      : ClientBase.get('currency'),\n            bom_country       : get_settings.country,\n            bom_country_abbrev: get_settings.country_code,\n            bom_email         : get_settings.email,\n            url               : window.location.href,\n            bom_today         : moment_now.unix(),\n        };\n\n        if (is_new_account) {\n            data.event = 'new_account';\n            data.bom_date_joined = data.bom_today;\n        }\n\n        if (!ClientBase.get('is_virtual')) {\n            data.bom_age       = moment_now.diff(moment.unix(get_settings.date_of_birth).utc(), 'year');\n            data.bom_firstname = get_settings.first_name;\n            data.bom_lastname  = get_settings.last_name;\n            data.bom_phone     = get_settings.phone;\n        }\n\n        if (login_event) {\n            data.event = login_event;\n            BinarySocket.wait('mt5_login_list').then((response) => {\n                (response.mt5_login_list || []).forEach((obj) => {\n                    const acc_type = (ClientBase.getMT5AccountType(obj.group) || '')\n                        .replace('real_vanuatu', 'financial').replace('vanuatu_', '').replace(/svg/, 'gaming'); // i.e. financial_cent, demo_cent, demo_gaming, real_gaming\n                    if (acc_type) {\n                        data[`mt5_${acc_type}_id`] = obj.login;\n                    }\n                });\n                pushDataLayer(data);\n            });\n        } else {\n            pushDataLayer(data);\n        }\n\n        // check if there are any transactions in the last 30 days for UX interview selection\n        BinarySocket.send({ statement: 1, limit: 1 }).then((response) => {\n            const last_transaction_timestamp = getPropertyValue(response, ['statement', 'transactions', '0', 'transaction_time']);\n            pushDataLayer({\n                bom_transaction_in_last_30d: !!last_transaction_timestamp && moment(last_transaction_timestamp * 1000).isAfter(ServerTime.get().subtract(30, 'days')),\n            });\n        });\n    };\n\n    const mt5NewAccount = (response) => {\n        const acc_type = response.mt5_new_account.mt5_account_type ?\n            `${response.mt5_new_account.account_type}_${response.mt5_new_account.mt5_account_type}` : // financial_cent, demo_cent, ...\n            `${response.mt5_new_account.account_type === 'demo' ? 'demo' : 'real'}_gaming`;           // demo_gaming, real_gaming\n\n        const gtm_data = {\n            event          : 'mt5_new_account',\n            bom_email      : ClientBase.get('email'),\n            bom_country    : State.getResponse('get_settings.country'),\n            mt5_last_signup: acc_type,\n        };\n\n        gtm_data[`mt5_${acc_type}_id`] = response.mt5_new_account.login;\n\n        if (/demo/.test(acc_type) && !ClientBase.get('is_virtual')) {\n            gtm_data.visitorId = ClientBase.getAccountOfType('virtual').loginid;\n        }\n\n        pushDataLayer(gtm_data);\n    };\n\n    // Pushes deposit & withdrawal data from transaction-stream to GTM\n    const pushTransactionData = (response, extra_data = {}) => {\n        if (!isGtmApplicable() || ClientBase.get('is_virtual')) return;\n        if (!response.transaction || !response.transaction.action) return;\n        if (!['deposit', 'withdrawal'].includes(response.transaction.action)) return;\n\n        const moment_now  = window.time || moment().utc();\n        const storage_key = 'GTM_transactions';\n\n        // Remove values from prev days so localStorage doesn't grow to infinity\n        let gtm_transactions = JSON.parse(localStorage.getItem(storage_key)) || {};\n        if (Object.prototype.hasOwnProperty.call(gtm_transactions, 'timestamp')) {\n            if (moment_now.isAfter(moment.unix(gtm_transactions.timestamp).utc(), 'day')) {\n                localStorage.removeItem(storage_key);\n                gtm_transactions = { timestamp: moment_now.unix() };\n            }\n        }\n        const transactions_arr = gtm_transactions.transactions || [];\n        if (!transactions_arr.includes(response.transaction.transaction_id)) {\n            const data = {\n                event           : 'transaction',\n                bom_account_type: ClientBase.getAccountType(),\n                bom_today       : moment_now.unix(),\n                transaction     : {\n                    id     : response.transaction.transaction_id,\n                    type   : response.transaction.action,\n                    time   : response.transaction.transaction_time,\n                    amount : response.transaction.amount,\n                    balance: response.transaction.balance,\n                },\n            };\n            Object.assign(data, extra_data);\n            pushDataLayer(data);\n\n            transactions_arr.push(response.transaction.transaction_id);\n            gtm_transactions.transactions = transactions_arr;\n            gtm_transactions.timestamp    = gtm_transactions.timestamp || moment_now.unix();\n\n            localStorage.setItem(storage_key, JSON.stringify(gtm_transactions));\n        }\n    };\n\n    return {\n        pushDataLayer,\n        eventHandler,\n        pushTransactionData,\n        mt5NewAccount,\n    };\n})();\n\nmodule.exports = GTM;\n","const isMobile = () => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\nmodule.exports = {\n    isMobile,\n};\n","const moment   = require('moment');\nconst template = require('./utility').template;\n\nconst Localize = (() => {\n    let localized_texts;\n\n    const localizeForLang = (lang) => {\n        localized_texts = texts_json[lang.toUpperCase()];\n        moment.locale(lang.toLowerCase());\n    };\n\n    const doLocalize = (txt, params) => {\n        let text = txt;\n\n        const index = text.replace(/[\\s|.]/g, '_');\n\n        text = (localized_texts && localized_texts[index]) || text;\n\n        // only use template when explicitly required\n        return params ? template(text, params) : text;\n    };\n\n    const localize = (text, params) => (\n        Array.isArray(text) ? text.map(t => doLocalize(t, params)) : doLocalize(text, params)\n    );\n\n    /**\n     * Localizes the text, but doesn't replace placeholders\n     * The localized text through this method should replace the placeholders later. e.g. using template()\n     * @param  {String} text - text to be localized\n     * @return {String} the localized text having the original placeholders ([_1], ...)\n     */\n    const localizeKeepPlaceholders = (text) => (\n        localize(\n            text /* localize-ignore */,\n            [...new Set(text.match(/\\[_(\\d+)]/g).sort())]\n        )\n    );\n\n    return {\n        localize,\n        localizeKeepPlaceholders,\n        forLang: localizeForLang,\n    };\n})();\n\nmodule.exports = Localize;\n","const moment           = require('moment');\nconst isCryptocurrency = require('./currency_base').isCryptocurrency;\nconst SocketCache      = require('./socket_cache');\nconst localize         = require('../localize').localize;\nconst LocalStore       = require('../storage').LocalStore;\nconst State            = require('../storage').State;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst isEmptyObject    = require('../utility').isEmptyObject;\n\nconst ClientBase = (() => {\n    const storage_key = 'client.accounts';\n    let client_object = {};\n    let current_loginid;\n\n    const init = () => {\n        current_loginid = LocalStore.get('active_loginid');\n        client_object   = getAllAccountsObject();\n    };\n\n    const isLoggedIn = () => (\n        !isEmptyObject(getAllAccountsObject()) &&\n        get('loginid') &&\n        get('token')\n    );\n\n    const isValidLoginid = () => {\n        if (!isLoggedIn()) return true;\n        const valid_login_ids = new RegExp('^(MX|MF|VRTC|MLT|CR|FOG)[0-9]+$', 'i');\n        return getAllLoginids().every(loginid => valid_login_ids.test(loginid));\n    };\n\n    /**\n     * Stores the client information in local variable and localStorage\n     *\n     * @param {String} key                 The property name to set\n     * @param {String|Number|Object} value The regarding value\n     * @param {String|null} loginid        The account to set the value for\n     */\n    const set = (key, value, loginid = current_loginid) => {\n        if (key === 'loginid' && value !== current_loginid) {\n            LocalStore.set('active_loginid', value);\n            current_loginid = value;\n        } else {\n            if (!(loginid in client_object)) {\n                client_object[loginid] = {};\n            }\n            client_object[loginid][key] = value;\n            LocalStore.setObject(storage_key, client_object);\n        }\n    };\n\n    /**\n     * Returns the client information\n     *\n     * @param {String|null} key     The property name to return the value from, if missing returns the account object\n     * @param {String|null} loginid The account to return the value from\n     */\n    const get = (key, loginid = current_loginid) => {\n        let value;\n        if (key === 'loginid') {\n            value = loginid || LocalStore.get('active_loginid');\n        } else {\n            const current_client = client_object[loginid] || getAllAccountsObject()[loginid] || client_object;\n\n            value = key ? current_client[key] : current_client;\n        }\n        if (!Array.isArray(value) && (+value === 1 || +value === 0 || value === 'true' || value === 'false')) {\n            value = JSON.parse(value || false);\n        }\n        return value;\n    };\n\n    const getAllAccountsObject = () => LocalStore.getObject(storage_key);\n\n    const getAllLoginids = () => Object.keys(getAllAccountsObject());\n\n    const getAccountType = (loginid = current_loginid) => {\n        let account_type;\n        if (/^VR/.test(loginid))          account_type = 'virtual';\n        else if (/^MF/.test(loginid))     account_type = 'financial';\n        else if (/^MLT|MX/.test(loginid)) account_type = 'gaming';\n        return account_type;\n    };\n\n    const isAccountOfType = (type, loginid = current_loginid, only_enabled = false) => {\n        const this_type   = getAccountType(loginid);\n        return ((\n            (type === 'virtual' && this_type === 'virtual') ||\n            (type === 'real'    && this_type !== 'virtual') ||\n            type === this_type) &&\n            (only_enabled ? !get('is_disabled', loginid) : true));\n    };\n\n    const getAccountOfType = (type, only_enabled) => {\n        const id = getAllLoginids().find(loginid => isAccountOfType(type, loginid, only_enabled));\n        return id ? Object.assign({ loginid: id }, get(null, id)) : {};\n    };\n\n    const hasAccountType = (type, only_enabled) => !isEmptyObject(getAccountOfType(type, only_enabled));\n\n    // only considers currency of real money accounts\n    // @param {String} type = crypto|fiat\n    const hasCurrencyType = (type) => {\n        const loginids = getAllLoginids();\n        if (type === 'crypto') {\n            // find if has crypto currency account\n            return loginids.find(loginid =>\n                !get('is_virtual', loginid) && isCryptocurrency(get('currency', loginid)));\n        }\n        // else find if have fiat currency account\n        return loginids.find(loginid =>\n            !get('is_virtual', loginid) && !isCryptocurrency(get('currency', loginid)));\n    };\n\n    const TypesMapConfig = (() => {\n        let types_map_config;\n\n        const initTypesMap = () => ({\n            default  : localize('Real'),\n            financial: localize('Investment'),\n            gaming   : localize('Gaming'),\n            virtual  : localize('Virtual'),\n        });\n\n        return {\n            get: () => {\n                if (!types_map_config) {\n                    types_map_config = initTypesMap();\n                }\n                return types_map_config;\n            },\n        };\n    })();\n\n    const getAccountTitle = loginid => {\n        const types_map = TypesMapConfig.get();\n        return (types_map[getAccountType(loginid)] || types_map.default);\n    };\n\n    const responseAuthorize = (response) => {\n        const authorize = response.authorize;\n        set('email',      authorize.email);\n        set('currency',   authorize.currency);\n        set('is_virtual', +authorize.is_virtual);\n        set('session_start', parseInt(moment().valueOf() / 1000));\n        set('landing_company_shortcode', authorize.landing_company_name);\n        updateAccountList(authorize.account_list);\n    };\n\n    const updateAccountList = (account_list) => {\n        account_list.forEach((account) => {\n            set('excluded_until', account.excluded_until || '', account.loginid);\n            Object.keys(account).forEach((param) => {\n                const param_to_set = param === 'country' ? 'residence' : param;\n                const value_to_set = typeof account[param] === 'undefined' ? '' : account[param];\n                if (param_to_set !== 'loginid') {\n                    set(param_to_set, value_to_set, account.loginid);\n                }\n            });\n        });\n    };\n\n    const shouldAcceptTnc = () => {\n        if (get('is_virtual')) return false;\n        const website_tnc_version = State.getResponse('website_status.terms_conditions_version');\n        const client_tnc_status   = State.getResponse('get_settings.client_tnc_status');\n        return typeof client_tnc_status !== 'undefined' && client_tnc_status !== website_tnc_version;\n    };\n\n    const clearAllAccounts = () => {\n        current_loginid = undefined;\n        client_object   = {};\n        LocalStore.setObject(storage_key, client_object);\n    };\n\n    const setNewAccount = (options) => {\n        if (!options.email || !options.loginid || !options.token) {\n            return false;\n        }\n\n        SocketCache.clear();\n        localStorage.setItem('GTM_new_account', '1');\n\n        set('token',      options.token,       options.loginid);\n        set('email',      options.email,       options.loginid);\n        set('is_virtual', +options.is_virtual, options.loginid);\n        set('loginid',    options.loginid);\n\n        return true;\n    };\n\n    const currentLandingCompany = () => {\n        const landing_company_response = State.getResponse('landing_company') || {};\n        const this_shortcode           = get('landing_company_shortcode');\n        const landing_company_prop     = Object.keys(landing_company_response).find((key) => (\n            this_shortcode === landing_company_response[key].shortcode\n        ));\n        return landing_company_response[landing_company_prop] || {};\n    };\n\n    const shouldCompleteTax = () => isAccountOfType('financial') &&\n        !/crs_tin_information/.test((State.getResponse('get_account_status') || {}).status);\n\n    // remove manager id or master distinction from group\n    // remove EUR or GBP distinction from group\n    const getMT5AccountType = group => (group ? group.replace('\\\\', '_').replace(/_(\\d+|master|EUR|GBP)/, '') : '');\n\n    const getBasicUpgradeInfo = () => {\n        const upgradeable_landing_companies = State.getResponse('authorize.upgradeable_landing_companies');\n\n        let can_open_multi = false;\n        let type,\n            can_upgrade_to;\n        if ((upgradeable_landing_companies || []).length) {\n            const current_landing_company = get('landing_company_shortcode');\n\n            can_open_multi = upgradeable_landing_companies.indexOf(current_landing_company) !== -1;\n\n            // only show upgrade message to landing companies other than current\n            const canUpgrade = (...landing_companies) => landing_companies.find(landing_company => (\n                landing_company !== current_landing_company &&\n                upgradeable_landing_companies.indexOf(landing_company) !== -1\n            ));\n\n            can_upgrade_to = canUpgrade('svg', 'iom', 'malta', 'maltainvest');\n            if (can_upgrade_to) {\n                type = can_upgrade_to === 'maltainvest' ? 'financial' : 'real';\n            }\n        }\n\n        return {\n            type,\n            can_upgrade: !!can_upgrade_to,\n            can_upgrade_to,\n            can_open_multi,\n        };\n    };\n\n    const getLandingCompanyValue = (loginid, landing_company, key) => {\n        let landing_company_object;\n        if (loginid.financial || isAccountOfType('financial', loginid)) {\n            landing_company_object = getPropertyValue(landing_company, 'financial_company');\n        } else if (loginid.real || isAccountOfType('real', loginid)) {\n            landing_company_object = getPropertyValue(landing_company, 'gaming_company');\n\n            // handle accounts that don't have gaming company\n            if (!landing_company_object) {\n                landing_company_object = getPropertyValue(landing_company, 'financial_company');\n            }\n        } else {\n            const financial_company = (getPropertyValue(landing_company, 'financial_company') || {})[key] || [];\n            const gaming_company    = (getPropertyValue(landing_company, 'gaming_company') || {})[key] || [];\n            landing_company_object  = financial_company.concat(gaming_company);\n            return landing_company_object;\n        }\n        return (landing_company_object || {})[key];\n    };\n\n    const getRiskAssessment = () => {\n        const status       = State.getResponse('get_account_status.status');\n        const is_high_risk = /high/.test(State.getResponse('get_account_status.risk_classification'));\n\n        return (\n            isAccountOfType('financial') ?\n                /(financial_assessment|trading_experience)_not_complete/.test(status) :\n                (is_high_risk && /financial_assessment_not_complete/.test(status))\n        );\n    };\n\n    // API_V3: send a list of accounts the client can transfer to\n    const canTransferFunds = (account) => {\n        if (account) {\n            // this specific account can be used to transfer funds to\n            return canTransferFundsTo(account.loginid);\n        }\n        // at least one account can be used to transfer funds to\n        return Object.keys(client_object).some(loginid => canTransferFundsTo(loginid));\n    };\n\n    const canTransferFundsTo = (to_loginid) => {\n        if (to_loginid === current_loginid || get('is_virtual', to_loginid) || get('is_virtual') ||\n            get('is_disabled', to_loginid)) {\n            return false;\n        }\n        const from_currency = get('currency');\n        const to_currency   = get('currency', to_loginid);\n        if (!from_currency || !to_currency) {\n            return false;\n        }\n        // only transfer to other accounts that have the same currency as current account if one is maltainvest and one is malta\n        if (from_currency === to_currency) {\n            // these landing companies are allowed to transfer funds to each other if they have the same currency\n            const same_cur_allowed = {\n                maltainvest: 'malta',\n                malta      : 'maltainvest',\n            };\n            const from_landing_company = get('landing_company_shortcode');\n            const to_landing_company   = get('landing_company_shortcode', to_loginid);\n            // if same_cur_allowed[from_landing_company] is undefined and to_landing_company is also undefined, it will return true\n            // so we should compare '' === undefined instead\n            return (same_cur_allowed[from_landing_company] || '') === to_landing_company;\n        }\n        // or for other clients if current account is cryptocurrency it should only transfer to fiat currencies and vice versa\n        const is_from_crypto = isCryptocurrency(from_currency);\n        const is_to_crypto   = isCryptocurrency(to_currency);\n        return (is_from_crypto ? !is_to_crypto : is_to_crypto);\n    };\n\n    const hasSvgAccount = () => !!(getAllLoginids().find(loginid => /^CR/.test(loginid)));\n\n    const canChangeCurrency = (statement, mt5_login_list, is_current = true) => {\n        const currency             = get('currency');\n        const has_no_mt5           = mt5_login_list.length === 0;\n        const has_no_transaction   = (statement.count === 0 && statement.transactions.length === 0);\n        const has_account_criteria = has_no_transaction && has_no_mt5;\n\n        // Current API requirements for currently logged-in user successfully changing their account's currency:\n        // 1. User must not have made any transactions\n        // 2. User must not have any MT5 account\n        // 3. Not be a crypto account\n        // 4. Not be a virtual account\n        return is_current ? currency && !get('is_virtual') && has_account_criteria && !isCryptocurrency(currency) : has_account_criteria;\n    };\n\n    return {\n        init,\n        isLoggedIn,\n        isValidLoginid,\n        set,\n        get,\n        getAllLoginids,\n        getAccountType,\n        isAccountOfType,\n        getAccountOfType,\n        hasAccountType,\n        hasCurrencyType,\n        getAccountTitle,\n        responseAuthorize,\n        shouldAcceptTnc,\n        clearAllAccounts,\n        setNewAccount,\n        currentLandingCompany,\n        shouldCompleteTax,\n        getAllAccountsObject,\n        getMT5AccountType,\n        getBasicUpgradeInfo,\n        getLandingCompanyValue,\n        getRiskAssessment,\n        canTransferFunds,\n        hasSvgAccount,\n        canChangeCurrency,\n    };\n})();\n\nmodule.exports = ClientBase;\n","const moment       = require('moment');\nconst BinarySocket = require('./socket_base');\nconst PromiseClass = require('../utility').PromiseClass;\n\nconst ServerTime = (() => {\n    let clock_started = false;\n    const pending = new PromiseClass();\n    let server_time,\n        performance_request_time,\n        get_time_interval,\n        update_time_interval,\n        onTimeUpdated;\n\n    const init = (fncTimeUpdated) => {\n        if (!clock_started) {\n            onTimeUpdated = fncTimeUpdated;\n            requestTime();\n            clearInterval(get_time_interval);\n            get_time_interval = setInterval(requestTime, 30000);\n            clock_started = true;\n        }\n    };\n\n    const requestTime = () => {\n        performance_request_time = performance.now();\n        BinarySocket.send({ time: 1 }).then(timeCounter);\n    };\n\n    const timeCounter = (response) => {\n        if (response.error) return;\n\n        if (!clock_started) {\n            init();\n            return;\n        }\n\n        clearInterval(update_time_interval);\n\n        const start_timestamp = response.time;\n        const performance_response_time = performance.now();\n        const time_taken = performance_response_time - performance_request_time;\n        const server_time_at_response = ((start_timestamp * 1000) + time_taken);\n\n        const updateTime = () => {\n            const time_since_response = performance.now() - performance_response_time;\n            server_time = moment(server_time_at_response + time_since_response).utc();\n\n            if (typeof onTimeUpdated === 'function') {\n                onTimeUpdated();\n            }\n        };\n        updateTime();\n        pending.resolve();\n        update_time_interval = setInterval(updateTime, 1000);\n    };\n\n    const get = () => server_time ? server_time.clone() : undefined;\n\n    return {\n        init,\n        get,\n        timePromise: pending.promise,\n    };\n})();\n\nmodule.exports = ServerTime;\n","const Client              = require('./client_base');\nconst getElementById      = require('../common_functions').getElementById;\nconst getLanguage         = require('../language').get;\nconst isMobile            = require('../os_detect').isMobile;\nconst isStorageSupported  = require('../storage').isStorageSupported;\nconst LocalStore          = require('../storage').LocalStore;\nconst urlForCurrentDomain = require('../url').urlForCurrentDomain;\nconst domain_app_ids      = require('../../config').domain_app_ids;\nconst getAppId            = require('../../config').getAppId;\n\nconst Login = (() => {\n    const redirectToLogin = () => {\n        if (!Client.isLoggedIn() && !isLoginPages() && isStorageSupported(sessionStorage)) {\n            sessionStorage.setItem('redirect_url', window.location.href);\n            window.location.href = loginUrl();\n        }\n    };\n\n    const loginUrl = () => {\n        const server_url         = localStorage.getItem('config.server_url');\n        const language           = getLanguage();\n        const signup_device      = LocalStore.get('signup_device') || (isMobile() ? 'mobile' : 'desktop');\n        const date_first_contact = LocalStore.get('date_first_contact');\n        const marketing_queries  = `&signup_device=${signup_device}${date_first_contact ? `&date_first_contact=${date_first_contact}` : ''}`;\n        const default_binary_url = `https://oauth.binary.com/oauth2/authorize?app_id=${getAppId()}&l=${language}${marketing_queries}`;\n\n        if (server_url && /qa/.test(server_url)) {\n            return `https://${server_url}/oauth2/authorize?app_id=${getAppId()}&l=${language}${marketing_queries}`;\n        }\n        if (getAppId === domain_app_ids['deriv.app']) {\n            return default_binary_url;\n        }\n\n        return urlForCurrentDomain(default_binary_url);\n    };\n\n    // TODO: update this to handle logging into /app/ url\n    const isLoginPages = () => /logged_inws|redirect/i.test(window.location.pathname);\n\n    const socialLoginUrl = brand => (`${loginUrl()}&social_signup=${brand}`);\n\n    const initOneAll = () => {\n        ['google', 'facebook'].forEach(provider => {\n            const el_button = getElementById(`#button_${provider}`);\n            el_button.removeEventListener('click');\n            el_button.addEventListener('click', (e) => {\n                e.preventDefault();\n                window.location.href = socialLoginUrl(provider);\n            });\n        });\n    };\n\n    return {\n        redirectToLogin,\n        isLoginPages,\n        initOneAll,\n    };\n})();\n\nmodule.exports = Login;\n"],"sourceRoot":""}