{"version":3,"sources":["webpack:///./src/javascript/_common/utility.js","webpack:///./src/javascript/_common/base/socket_cache.js","webpack:///./src/javascript/_common/common_functions.js","webpack:///./src/javascript/_common/string_util.js","webpack:///./src/javascript/_common/base/currency_base.js","webpack:///./src/javascript/_common/storage.js","webpack:///./src/javascript/_common/base/socket_base.js","webpack:///./src/javascript/_common/url.js","webpack:///./src/javascript/_common/language.js","webpack:///./src/javascript/_common/check_new_release.js","webpack:///./src/javascript/_common/lib/polyfills/element.matches.js","webpack:///./src/javascript/_common/base/network_monitor_base.js","webpack:///./src/javascript/_common/base/subscription_manager.js","webpack:///./src/javascript/_common/base/gtm.js","webpack:///./src/javascript/_common/os_detect.js","webpack:///./src/javascript/_common/localize.js","webpack:///./src/javascript/_common/base/client_base.js","webpack:///./src/javascript/_common/base/server_time.js","webpack:///./src/javascript/_common/base/login.js"],"names":["extend","require","isEmptyObject","obj","is_empty","Object","keys","forEach","key","prototype","hasOwnProperty","call","cloneObject","Array","isArray","isDeepEqual","a","b","_typeof","isEqualArray","isEqualObject","arr1","arr2","length","every","value","idx","obj1","obj2","static_hash","module","exports","template","string","content","to_replace","replace","s","index","unique","array","filter","e","findIndex","i","getPropertyValue","k","slice","undefined","createElement","tag_name","attributes","arguments","el","document","attr","textContent","html","setAttribute","getStaticHash","querySelector","getAttribute","split","PromiseClass","_this","this","_classCallCheck","promise","Promise","resolve","reject","moment","getLanguage","get","LocalStore","SocketCache","config","payout_currencies","expire","proposal_open_contract","map_to","active_symbols","contracts_for","exchange_rates","ticks_history","trading_times","data_obj","msg_type_mapping","history","candles","isEmptyValue","data","is_empty_data","response_data","request","msg_type","response","getObject","clear","makeKey","response_obj","isBefore","expires","remove","source_obj","find","type","map_key","should_match_all","data_key","indexOf","setObject","set","subscription","cached_response","echo_req","cached_message","new_message","has_error_or_missing","error","has_new_value","has_old_cache","has_valid_cache","add","valueOf","isVisible","elem","offsetWidth","offsetHeight","getElementById","id_selector","padLeft","txt","len","char","text","String","join","numberToString","n","toTitleCase","str","charAt","toUpperCase","substr","toLowerCase","compareBigUnsignedInt","first_num","second_num","max_length","Math","max","order","localize","currencies_config","formatCurrency","currency","addComma","num","decimal_points","is_crypto","number","toFixed","parseFloat","toString","$0","$1","$2","getDecimalPlaces","isCryptocurrency","calcDecimalPlaces","test","CryptoConfig","crypto_config","BTC","name","min_withdrawal","pa_max_withdrawal","pa_min_withdrawal","BCH","ETH","ETC","LTC","UST","USB","getMinWithdrawal","formatMoney","currency_value","amount","exclude_currency","decimals","minimumFractionDigits","money","sign","Number","decimal_places","isNaN","abs","Intl","options","maximumFractionDigits","NumberFormat","format","setCurrencies","website_status","getCurrencyName","getTransferLimits","which","transfer_limits","min","getTransferFee","currency_from","currency_to","transfer_fee","getMinimumTransferFee","pow","getTextFormat","getMinPayout","getPaWithdrawalLimit","limit","getCurrencies","Cookies","isProduction","JSON","parse","getItem","setItem","stringify","Storage","isStorageSupported","storage","removeItem","Store","InScriptStore","object","store","_len","_key","has","State","getResponse","pathname","path","concat","CookieStorage","cookie_name","cookie_domain","hostname","window","location","initialized","domain","Date","read","cookie_value","write","val","expireDate","isSecure","secure","SessionStore","localStorage","sessionStorage","removeCookies","_len2","cookie_names","_key2","domains","parent_path","c","RegExp","cookie","ClientBase","getAppId","getSocketURL","BinarySocketBase","binary_socket","buffered_sends","req_id","wrong_app_id","is_available","is_disconnect_called","is_connected_before","socket_url","timeouts","promises","no_duplicate_requests","sent_requests","items","push","splice","waiting_list","promise_obj","this_promises","pr","another_exists","some","clearTimeouts","clearTimeout","isReady","hasReadyState","states","readyState","sendBufferedRequests","req_obj","shift","send","wait","msg_types","is_resolved","last_response","isLoggedIn","has_callback","callback","forced","skip_cache_update","time","assign","then","subscribe","isOnline","passthrough","wsEvent","init","WebSocket","onopen","authorize","onOpen","onReconnect","onmessage","msg","this_req_id","onMessage","onclose","onDisconnect","availability","status","sendBuffered","setOnDisconnect","setOnReconnect","removeOnReconnect","removeOnDisconnect","urlForLanguage","urlFor","urlLang","getCurrentProductionDomain","Url","location_url","static_host","paramsHash","href","param_hash","arr_params","parsed","URL","search","p_l","param","params","host_map","bot.binary.com","developers.binary.com","academy.binary.com","tech.binary.com","blog.binary.com","reset","pars","language","should_change_to_legacy","lang","url_lang","url","substring","new_url","normalizePath","urlForCurrentDomain","current_domain","url_object","includes","urlForStatic","websiteUrl","protocol","getHostMap","resetStaticHost","Language","all_languages","ACH","EN","DE","ES","FR","ID","IT","PL","PT","RU","TH","VI","ZH_CN","ZH_TW","lang_regex","languageFromUrl","custom_url","current_lang","crowdin_lang","body","classList","getAll","setCookie","trim","shouldForceReload","last_reload","checkNewRelease","current_hash","xhttp","XMLHttpRequest","onreadystatechange","latest_hash","responseText","reload","open","random","Element","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","ownerDocument","querySelectorAll","item","BinarySocket","NetworkMonitorBase","_pending_timeouts","StatusConfig","status_config","online","class","tooltip","offline","blinking","pendings","pending_keys","ws_init","ws_request","pending_timeouts","_defineProperty","ws_config","network_status","updateUI","navigator","onLine","setStatus","ping","ws_events_map","setPending","clearPendings","message","close","event","setTimeout","socket_general_functions","fncUpdateUI","addEventListener","__webpack_require__","_utility","SubscriptionManager","subscriptions","forget_requested","subscription_id","dispatch","sub_id","stream_id","sub_info","subscribers","fnc","forgetStream","forget","fncCallback","match_values","Error","forgets_list","id","hasValues","hasCallbackFunction","all","request_obj","values_obj","addSubscriptionFromRequest","send_request","subscribe_request","subscription_props","is_stream","prop","forgetAll","types_to_forget","sub_ids","forget_all","Login","ServerTime","GTM","isGtmApplicable","pushDataLayer","isLoginPages","dataLayer","_extends","visitorId","theme","is_dark_mode_on","eventHandler","get_settings","login_event","is_new_account","affiliate_token","getJSON","bom_affiliate_token","t","moment_now","utc","bom_account_type","getAccountType","bom_currency","bom_country","country","bom_country_abbrev","country_code","bom_email","email","bom_today","unix","bom_date_joined","bom_age","diff","date_of_birth","bom_firstname","first_name","bom_lastname","last_name","bom_phone","phone","mt5_login_list","acc_type","getMT5AccountType","group","login","statement","last_transaction_timestamp","bom_transaction_in_last_30d","isAfter","subtract","pushTransactionData","extra_data","transaction","action","gtm_transactions","timestamp","transactions_arr","transactions","transaction_id","transaction_time","balance","mt5NewAccount","mt5_new_account","mt5_account_type","account_type","gtm_data","mt5_last_signup","getAccountOfType","loginid","isMobile","userAgent","Localize","localized_texts","doLocalize","map","localizeKeepPlaceholders","_toConsumableArray","Set","match","sort","forLang","texts_json","locale","client_object","current_loginid","getAllAccountsObject","current_client","getAllLoginids","isAccountOfType","only_enabled","this_type","TypesMapConfig","types_map_config","default","financial","gaming","virtual","updateAccountList","account_list","account","excluded_until","param_to_set","value_to_set","canTransferFundsTo","to_loginid","from_currency","to_currency","from_landing_company","to_landing_company","maltainvest","malta","is_from_crypto","is_to_crypto","isValidLoginid","valid_login_ids","hasAccountType","hasCurrencyType","loginids","getAccountTitle","types_map","responseAuthorize","is_virtual","parseInt","landing_company_name","shouldAcceptTnc","website_tnc_version","client_tnc_status","clearAllAccounts","setNewAccount","token","currentLandingCompany","landing_company_response","this_shortcode","landing_company_prop","shortcode","shouldCompleteTax","getBasicUpgradeInfo","upgradeable_landing_companies","can_open_multi","can_upgrade_to","current_landing_company","landing_companies","landing_company","canUpgrade","can_upgrade","getLandingCompanyValue","landing_company_object","real","financial_company","gaming_company","getRiskAssessment","is_high_risk","canTransferFunds","hasSvgAccount","canChangeCurrency","is_current","has_no_mt5","has_account_criteria","count","clock_started","pending","server_time","performance_request_time","get_time_interval","update_time_interval","onTimeUpdated","fncTimeUpdated","requestTime","clearInterval","setInterval","performance","now","timeCounter","start_timestamp","performance_response_time","server_time_at_response","updateTime","time_since_response","clone","timePromise","Client","domain_app_ids","loginUrl","server_url","signup_device","date_first_contact","marketing_queries","default_binary_url","redirectToLogin","initOneAll","provider","el_button","removeEventListener","preventDefault","brand","socialLoginUrl"],"mappings":"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","file":"binary_common.min.js","sourcesContent":["const extend = require('extend');\nrequire('./lib/polyfills/element.matches');\n\nconst template = (string, content) => {\n    let to_replace = content;\n    if (content && !Array.isArray(content)) {\n        to_replace = [content];\n    }\n    return string.replace(/\\[_(\\d+)]/g, (s, index) => to_replace[(+index) - 1]);\n};\n\nconst isEmptyObject = (obj) => {\n    let is_empty = true;\n    if (obj && obj instanceof Object) {\n        Object.keys(obj).forEach((key) => {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) is_empty = false;\n        });\n    }\n    return is_empty;\n};\n\nconst cloneObject = obj => (!isEmptyObject(obj) ? extend(true, Array.isArray(obj) ? [] : {}, obj) : obj);\n\nconst isDeepEqual = (a, b) => {\n    if (typeof a !== typeof b) {\n        return false;\n    } else if (Array.isArray(a)) {\n        return isEqualArray(a, b);\n    } else if (a && b && typeof a === 'object') {\n        return isEqualObject(a, b);\n    }\n    // else\n    return a === b;\n};\n\nconst isEqualArray = (arr1, arr2) => (\n    arr1 === arr2 ||\n    (\n        arr1.length === arr2.length &&\n        arr1.every((value, idx) => isDeepEqual(value, arr2[idx]))\n    )\n);\n\nconst isEqualObject = (obj1, obj2) => (\n    obj1 === obj2 ||\n    (\n        Object.keys(obj1).length === Object.keys(obj2).length &&\n        Object.keys(obj1).every(key => isDeepEqual(obj1[key], obj2[key]))\n    )\n);\n\n// Filters out duplicates in an array of objects by key\nconst unique = (array, key) => array.filter((e, idx) =>\n    array.findIndex((a, i) => a[key] ? a[key] === e[key] : i === idx) === idx);\n\nconst getPropertyValue = (obj, k) => {\n    let keys = k;\n    if (!Array.isArray(keys)) keys = [keys];\n    if (!isEmptyObject(obj) && keys[0] in obj && keys && keys.length > 1) {\n        return getPropertyValue(obj[keys[0]], keys.slice(1));\n    }\n    // else return clone of object to avoid overwriting data\n    return obj ? cloneObject(obj[keys[0]]) : undefined;\n};\n\n/**\n * Creates a DOM element and adds any attributes to it.\n *\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\n * @return the created DOM element\n */\nconst createElement = (tag_name, attributes = {}) => {\n    const el = document.createElement(tag_name);\n    Object.keys(attributes).forEach((attr) => {\n        const value = attributes[attr];\n        if (attr === 'text') {\n            el.textContent = value;\n        } else if (attr === 'html') {\n            el.html(value);\n        } else {\n            el.setAttribute(attr, value);\n        }\n    });\n    return el;\n};\n\nlet static_hash;\nconst getStaticHash = () => {\n    static_hash = static_hash || (document.querySelector('script[src*=\"binary\"]').getAttribute('src') || '').split('?')[1];\n    return static_hash;\n};\n\nclass PromiseClass {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.reject  = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nmodule.exports = {\n    template,\n    isEmptyObject,\n    cloneObject,\n    isDeepEqual,\n    unique,\n    getPropertyValue,\n    createElement,\n    getStaticHash,\n    PromiseClass,\n};\n","const moment           = require('moment');\nconst getLanguage      = require('../language').get;\nconst LocalStore       = require('../storage').LocalStore;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst getStaticHash    = require('../utility').getStaticHash;\nconst isEmptyObject    = require('../utility').isEmptyObject;\n\n/*\n * Caches WS responses to reduce delay time and number of requests\n * Stores data in LocalStore which is the first one available in: localStorage, sessionStorage, InScriptStore\n *\n * 1. It caches only the response of those calls which determined in `config`\n * 2. It doesn't cache responses which returned error\n * 3. The value is requested by BinarySocket,\n *    if this returns a value according to the logic here, socket code take it as response\n *    but also triggers an async `send` request, to keep the cache updated for next time\n * 4. Uses client's time to set and check for expiry, as the expire durations are not so long to need a more precise one\n *    (And doesn't worth to wait for the response of time call)\n * 5. Some responses should be cached by a particular value from request (e.g. contracts_for_frxAUDJPY)\n *    so there can be more than one value for a particular call\n * 6. Clears the whole cache regardless their expire time on the following events:\n *    6.1. Client changes: login / logout / switch loginid\n *    6.2. Detect a new release (static hash changed)\n */\nconst SocketCache = (() => {\n    // keys are msg_type\n    // expire: how long to keep the value (in minutes)\n    // map_to: to store different responses of the same key, should be array of:\n    //     string  : the property value from echo_req\n    //     function: return value of the function\n    const config = {\n        payout_currencies     : { expire: 120 },\n        proposal_open_contract: { expire: 10,  map_to: ['contract_id'] },\n        active_symbols        : { expire: 10,  map_to: ['product_type', 'landing_company', getLanguage] },\n        contracts_for         : { expire: 10,  map_to: ['contracts_for', 'product_type', 'currency'] },\n        exchange_rates        : { expire: 60,  map_to: ['base_currency'] },\n        ticks_history         : { expire: 10,  map_to: ['ticks_history', 'granularity', 'start', 'end', 'style'] },\n        trading_times         : { expire: 120, map_to: ['trading_times'] },\n        // TODO: Enable statement and profit table caching once we have UI design for handling\n        // transitions between cached table and newly added data to table\n        // statement             : { expire: 10,   map_to: ['limit', 'offset'] },\n        // profit_table          : { expire: 10,   map_to: ['date_from', 'limit', 'offset'] },\n    };\n\n    const storage_key = 'ws_cache';\n\n    let data_obj = {};\n\n    const msg_type_mapping = {\n        history: 'ticks_history',\n        candles: 'ticks_history',\n    };\n\n    const set = (response) => {\n        const msg_type = msg_type_mapping[response.msg_type] || response.msg_type;\n\n        // check if response has subscription, since only want to cache non-streamed responses\n        if (response.subscription) return;\n\n        if (!config[msg_type]) return;\n        // prevent unwanted page behaviour\n        // if a cached version already exists but it gives an error after being called for updating the cache\n        const cached_response = get(response.echo_req) || {};\n        const cached_message  = cached_response[msg_type];\n        const new_message     = response[msg_type];\n\n        const has_error_or_missing = response.error; // || !(msg_type in response);\n        const has_new_value        = cached_message && isEmptyValue(cached_message) && !isEmptyValue(new_message);\n        const has_old_cache        = cached_message && isEmptyValue(new_message) && !isEmptyValue(cached_message);\n        const has_valid_cache      = !isEmptyValue(cached_response) && !cached_response.error;\n\n        if ((has_error_or_missing || has_new_value || has_old_cache) && has_valid_cache) {\n            clear();\n            // window.location.reload();\n            return;\n        }\n\n        const key      = makeKey(response.echo_req, msg_type);\n        const expires  = moment().add(config[msg_type].expire, 'm').valueOf();\n\n        if (!data_obj.static_hash) {\n            data_obj.static_hash = getStaticHash();\n        }\n\n        data_obj[key] = { value: response, expires };\n        LocalStore.setObject(storage_key, data_obj);\n    };\n\n    const isEmptyValue = (data) => {\n        let is_empty_data = false;\n        if (Array.isArray(data)) {\n            if (!data.length) {\n                is_empty_data = true;\n            }\n        } else if (typeof response_data === 'object') {\n            if (!Object.keys(data).length) {\n                is_empty_data = true;\n            }\n        }\n        return is_empty_data;\n    };\n\n    const get = (request, msg_type) => {\n        let response;\n\n        if (isEmptyObject(data_obj)) {\n            data_obj = LocalStore.getObject(storage_key);\n            if (isEmptyObject(data_obj)) return undefined;\n        }\n\n        if (data_obj.static_hash !== getStaticHash()) { // new release\n            clear();\n        }\n\n        const key          = makeKey(request, msg_type);\n        const response_obj = getPropertyValue(data_obj, key) || {};\n\n        if (moment().isBefore(response_obj.expires)) {\n            response = response_obj.value;\n        } else { // remove if expired\n            remove(key);\n        }\n\n        return response;\n    };\n\n    const makeKey = (source_obj = {}, msg_type = '') => {\n        let key = msg_type || Object.keys(source_obj).find(type => config[type]);\n\n        if (key && !isEmptyObject(source_obj)) {\n            ((config[key] || {}).map_to || []).forEach((map_key) => {\n                const value = typeof map_key === 'function' ? map_key() : source_obj[map_key];\n                key += map_key ? `_${value || ''}` : '';\n            });\n        }\n\n        return key;\n    };\n\n    const remove = (key, should_match_all) => {\n        if (should_match_all) {\n            Object.keys(data_obj).forEach((data_key) => {\n                if (data_key.indexOf(key) !== -1) {\n                    delete data_obj[data_key];\n                }\n            });\n        } else if (key in data_obj) {\n            delete data_obj[key];\n        }\n        LocalStore.setObject(storage_key, data_obj);\n    };\n\n    const clear = () => {\n        LocalStore.remove(storage_key);\n        data_obj = {};\n    };\n\n    return {\n        set,\n        get,\n        remove,\n        clear,\n    };\n})();\n\nmodule.exports = SocketCache;\n","const createElement = require('./utility').createElement;\n\n/*\n * function to check if element is visible or not\n *\n */\nconst isVisible = elem => !(!elem || (elem.offsetWidth === 0 && elem.offsetHeight === 0));\n\n/*\n * @param  {String}  id_selector   the selector for the element\n * @param  {Element} parent        optional selector to use for parent, defaults to document\n * @return {Element}               return element if it exists, if it doesn't return a dummy element\n */\nconst getElementById = (id_selector, parent = document) => parent.getElementById(id_selector) || createElement('div');\n\nmodule.exports = {\n    isVisible,\n    getElementById,\n};\n","const toTitleCase = str => (\n    (str || '').replace(/\\w[^\\s/\\\\]*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase())\n);\n\nconst padLeft = (txt, len, char) => {\n    const text = String(txt || '');\n    return text.length >= len ? text : `${Array((len - text.length) + 1).join(char)}${text}`;\n};\n\nconst compareBigUnsignedInt = (a, b) => {\n    let first_num  = numberToString(a);\n    let second_num = numberToString(b);\n    if (!first_num || !second_num) {\n        return '';\n    }\n    const max_length = Math.max(first_num.length, second_num.length);\n    first_num        = padLeft(first_num, max_length, '0');\n    second_num       = padLeft(second_num, max_length, '0');\n\n    // lexicographical comparison\n    let order = 0;\n    if (first_num !== second_num) {\n        order = first_num > second_num ? 1 : -1;\n    }\n\n    return order;\n};\n\nconst numberToString = n => (typeof n === 'number' ? String(n) : n);\n\nmodule.exports = {\n    toTitleCase,\n    padLeft,\n    numberToString,\n    compareBigUnsignedInt,\n};\n","const getLanguage      = require('../language').get;\nconst localize         = require('../localize').localize;\nconst getPropertyValue = require('../utility').getPropertyValue;\n\nlet currencies_config = {};\n\nconst getTextFormat = (number, currency) => `${currency} ${addComma(number, getDecimalPlaces(currency), isCryptocurrency(currency))}`;\n\nconst formatMoney = (currency_value, amount, exclude_currency, decimals = 0, minimumFractionDigits = 0) => {\n    let money = amount;\n    if (money) money = String(money).replace(/,/g, '');\n    const sign           = money && Number(money) < 0 ? '-' : '';\n    const decimal_places = decimals || getDecimalPlaces(currency_value);\n\n    money = isNaN(money) ? 0 : Math.abs(money);\n    if (typeof Intl !== 'undefined') {\n        const options = {\n            minimumFractionDigits: minimumFractionDigits || decimal_places,\n            maximumFractionDigits: decimal_places,\n        };\n        money = new Intl.NumberFormat(getLanguage().toLowerCase().replace('_', '-'), options).format(money);\n    } else {\n        money = addComma(money, decimal_places);\n    }\n\n    return sign + (exclude_currency ? '' : formatCurrency(currency_value)) + money;\n};\n\nconst formatCurrency = currency => `<span class=\"symbols ${(currency || '').toLowerCase()}\"></span>`;\n\nconst addComma = (num, decimal_points, is_crypto) => {\n    let number = String(num || 0).replace(/,/g, '');\n    if (typeof decimal_points !== 'undefined') {\n        number = (+number).toFixed(decimal_points);\n    }\n    if (is_crypto) {\n        number = parseFloat(+number);\n    }\n\n    return number.toString().replace(/(^|[^\\w.])(\\d{4,})/g, ($0, $1, $2) => (\n        $1 + $2.replace(/\\d(?=(?:\\d\\d\\d)+(?!\\d))/g, '$&,')\n    ));\n};\n\nconst calcDecimalPlaces = (currency) => isCryptocurrency(currency) ? 8 : 2;\n\nconst getDecimalPlaces = (currency) => (\n    // need to check currencies_config[currency] exists instead of || in case of 0 value\n    currencies_config[currency] ? getPropertyValue(currencies_config, [currency, 'fractional_digits']) : calcDecimalPlaces(currency)\n);\n\nconst setCurrencies = (website_status) => {\n    currencies_config = website_status.currencies_config;\n};\n\n// (currency in crypto_config) is a back-up in case website_status doesn't include the currency config, in some cases where it's disabled\nconst isCryptocurrency = currency => /crypto/i.test(getPropertyValue(currencies_config, [currency, 'type'])) || (currency in CryptoConfig.get());\n\nconst CryptoConfig = (() => {\n    let crypto_config;\n\n    const initCryptoConfig = () => ({\n        BTC: { name: localize('Bitcoin'),       min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        BCH: { name: localize('Bitcoin Cash'),  min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        ETH: { name: localize('Ether'),         min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        ETC: { name: localize('Ether Classic'), min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        LTC: { name: localize('Litecoin'),      min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        UST: { name: localize('Tether'),        min_withdrawal: 0.02,  pa_max_withdrawal: 2000, pa_min_withdrawal: 10 },\n        USB: { name: localize('Binary Coin'),   min_withdrawal: 0.02,  pa_max_withdrawal: 2000, pa_min_withdrawal: 10 },\n    });\n\n    return {\n        get: () => {\n            if (!crypto_config) {\n                crypto_config = initCryptoConfig();\n            }\n            return crypto_config;\n        },\n    };\n})();\n\nconst getMinWithdrawal = currency => (isCryptocurrency(currency) ? (getPropertyValue(CryptoConfig.get(), [currency, 'min_withdrawal']) || 0.002) : 1);\n\n/**\n * Returns the transfer limits for the account.\n * @param currency\n * @param {string} max|undefined\n * @returns numeric|undefined\n */\nconst getTransferLimits = (currency, which) => {\n    const transfer_limits = getPropertyValue(currencies_config, [currency, 'transfer_between_accounts', 'limits']) || getMinWithdrawal(currency);\n    const decimals        = getDecimalPlaces(currency);\n    if (which === 'max') {\n        return transfer_limits.max ? transfer_limits.max.toFixed(decimals) : undefined;\n    }\n\n    return transfer_limits.min ? transfer_limits.min.toFixed(decimals) : undefined;\n};\n\nconst getTransferFee = (currency_from, currency_to) => {\n    const transfer_fee = getPropertyValue(currencies_config, [currency_from, 'transfer_between_accounts', 'fees', currency_to]);\n    return `${typeof transfer_fee === 'undefined' ? '1' : transfer_fee}%`;\n};\n\n// returns in a string format, e.g. '0.00000001'\nconst getMinimumTransferFee = (currency) => {\n    const decimals = getDecimalPlaces(currency);\n    return `${currency} ${(1 / Math.pow(10, decimals)).toFixed(decimals)}`; // we need toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\n};\n\n// @param {String} limit = max|min\nconst getPaWithdrawalLimit = (currency, limit) => {\n    if (isCryptocurrency(currency)) {\n        return getPropertyValue(CryptoConfig.get(), [currency, `pa_${limit}_withdrawal`]); // pa_min_withdrawal and pa_max_withdrawal used here\n    }\n    return limit === 'max' ? 2000 : 10; // limits for fiat currency\n};\n\nconst getCurrencyName = currency => getPropertyValue(CryptoConfig.get(), [currency, 'name']) || '';\n\nconst getMinPayout = currency => getPropertyValue(currencies_config, [currency, 'stake_default']);\n\nmodule.exports = {\n    formatMoney,\n    formatCurrency,\n    addComma,\n    getDecimalPlaces,\n    setCurrencies,\n    isCryptocurrency,\n    getCurrencyName,\n    getMinWithdrawal,\n    getTransferLimits,\n    getTransferFee,\n    getMinimumTransferFee,\n    getTextFormat,\n    getMinPayout,\n    getPaWithdrawalLimit,\n    getCurrencies: () => currencies_config,\n};\n","const Cookies          = require('js-cookie');\nconst getPropertyValue = require('./utility').getPropertyValue;\nconst isEmptyObject    = require('./utility').isEmptyObject;\nconst isProduction     = require('../config').isProduction;\n\nconst getObject = function (key) {\n    return JSON.parse(this.getItem(key) || '{}');\n};\n\nconst setObject = function (key, value) {\n    if (value && value instanceof Object) {\n        this.setItem(key, JSON.stringify(value));\n    }\n};\n\nif (typeof Storage !== 'undefined') {\n    Storage.prototype.getObject = getObject;\n    Storage.prototype.setObject = setObject;\n}\n\nconst isStorageSupported = (storage) => {\n    if (typeof storage === 'undefined') {\n        return false;\n    }\n\n    const test_key = 'test';\n    try {\n        storage.setItem(test_key, '1');\n        storage.removeItem(test_key);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nconst Store = function (storage) {\n    this.storage           = storage;\n    this.storage.getObject = getObject;\n    this.storage.setObject = setObject;\n};\n\nStore.prototype = {\n    get(key) {\n        return this.storage.getItem(key) || undefined;\n    },\n    set(key, value) {\n        if (typeof value !== 'undefined') {\n            this.storage.setItem(key, value);\n        }\n    },\n    getObject(key) {\n        return typeof this.storage.getObject === 'function' // Prevent runtime error in IE\n            ? this.storage.getObject(key)\n            : JSON.parse(this.storage.getItem(key) || '{}');\n    },\n    setObject(key, value) {\n        if (typeof this.storage.setObject === 'function') { // Prevent runtime error in IE\n            this.storage.setObject(key, value);\n        } else {\n            this.storage.setItem(key, JSON.stringify(value));\n        }\n    },\n    remove(key) { this.storage.removeItem(key); },\n    clear()     { this.storage.clear(); },\n};\n\nconst InScriptStore = function (object) {\n    this.store = typeof object !== 'undefined' ? object : {};\n};\n\nInScriptStore.prototype = {\n    get(key) {\n        return getPropertyValue(this.store, key);\n    },\n    set(k, value, obj = this.store) {\n        let key = k;\n        if (!Array.isArray(key)) key = [key];\n        if (key.length > 1) {\n            if (!(key[0] in obj) || isEmptyObject(obj[key[0]])) obj[key[0]] = {};\n            this.set(key.slice(1), value, obj[key[0]]);\n        } else {\n            obj[key[0]] = value;\n        }\n    },\n    getObject(key) {\n        return JSON.parse(this.get(key) || '{}');\n    },\n    setObject(key, value) {\n        this.set(key, JSON.stringify(value));\n    },\n    remove(...keys) {\n        keys.forEach((key) => { delete this.store[key]; });\n    },\n    clear()   { this.store = {}; },\n    has(key)  { return this.get(key) !== undefined; },\n    keys()    { return Object.keys(this.store); },\n    call(key) { if (typeof this.get(key) === 'function') this.get(key)(); },\n};\n\nconst State     = new InScriptStore();\nState.prototype = InScriptStore.prototype;\n/**\n * Shorthand function to get values from response object of State\n *\n * @param {String} pathname\n *     e.g. getResponse('authorize.currency') == get(['response', 'authorize', 'authorize', 'currency'])\n */\nState.prototype.getResponse = function (pathname) {\n    let path = pathname;\n    if (typeof path === 'string') {\n        const keys = path.split('.');\n        path = ['response', keys[0]].concat(keys);\n    }\n    return this.get(path);\n};\nState.set('response', {});\n\nconst CookieStorage = function (cookie_name, cookie_domain) {\n    const hostname = window.location.hostname;\n\n    this.initialized = false;\n    this.cookie_name = cookie_name;\n    this.domain      = cookie_domain || (isProduction() ? `.${hostname.split('.').slice(-2).join('.')}` : hostname);\n    this.path        = '/';\n    this.expires     = new Date('Thu, 1 Jan 2037 12:00:00 GMT');\n    this.value       = {};\n};\n\nCookieStorage.prototype = {\n    read() {\n        const cookie_value = Cookies.get(this.cookie_name);\n        try {\n            this.value = cookie_value ? JSON.parse(cookie_value) : {};\n        } catch (e) {\n            this.value = {};\n        }\n        this.initialized = true;\n    },\n    write(val, expireDate, isSecure) {\n        if (!this.initialized) this.read();\n        this.value = val;\n        if (expireDate) this.expires = expireDate;\n        Cookies.set(this.cookie_name, this.value, {\n            expires: this.expires,\n            path   : this.path,\n            domain : this.domain,\n            secure : !!isSecure,\n        });\n    },\n    get(key) {\n        if (!this.initialized) this.read();\n        return this.value[key];\n    },\n    set(key, val) {\n        if (!this.initialized) this.read();\n        this.value[key] = val;\n        Cookies.set(this.cookie_name, this.value, {\n            expires: new Date(this.expires),\n            path   : this.path,\n            domain : this.domain,\n        });\n    },\n    remove() {\n        Cookies.remove(this.cookie_name, {\n            path  : this.path,\n            domain: this.domain,\n        });\n    },\n};\n\nconst removeCookies = (...cookie_names) => {\n    const domains = [\n        `.${document.domain.split('.').slice(-2).join('.')}`,\n        `.${document.domain}`,\n    ];\n\n    let parent_path = window.location.pathname.split('/', 2)[1];\n    if (parent_path !== '') {\n        parent_path = `/${parent_path}`;\n    }\n\n    cookie_names.forEach((c) => {\n        Cookies.remove(c, { path: '/', domain: domains[0] });\n        Cookies.remove(c, { path: '/', domain: domains[1] });\n        Cookies.remove(c);\n        if (new RegExp(c).test(document.cookie) && parent_path) {\n            Cookies.remove(c, { path: parent_path, domain: domains[0] });\n            Cookies.remove(c, { path: parent_path, domain: domains[1] });\n            Cookies.remove(c, { path: parent_path });\n        }\n    });\n};\n\nlet SessionStore,\n    LocalStore;\n\nif (isStorageSupported(window.localStorage)) {\n    LocalStore = new Store(window.localStorage);\n}\nif (isStorageSupported(window.sessionStorage)) {\n    SessionStore = new Store(window.sessionStorage);\n}\n\nif (!LocalStore) {\n    LocalStore = new InScriptStore();\n}\nif (!SessionStore) {\n    SessionStore = new InScriptStore();\n}\n\nmodule.exports = {\n    isStorageSupported,\n    CookieStorage,\n    removeCookies,\n    State,\n    SessionStore,\n    LocalStore,\n};\n","const ClientBase       = require('./client_base');\nconst SocketCache      = require('./socket_cache');\nconst getLanguage      = require('../language').get;\nconst State            = require('../storage').State;\nconst cloneObject      = require('../utility').cloneObject;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst isEmptyObject    = require('../utility').isEmptyObject;\nconst PromiseClass     = require('../utility').PromiseClass;\nconst getAppId         = require('../../config').getAppId;\nconst getSocketURL     = require('../../config').getSocketURL;\n\n/*\n * An abstraction layer over native javascript WebSocket,\n * which provides additional functionality like\n * reopen the closed connection and process the buffered requests\n */\nconst BinarySocketBase = (() => {\n    let binary_socket;\n\n    let config               = {};\n    let buffered_sends       = [];\n    let req_id               = 0;\n    let wrong_app_id         = 0;\n    let is_available         = true;\n    let is_disconnect_called = false;\n    let is_connected_before  = false;\n\n    const socket_url = `${getSocketURL()}?app_id=${getAppId()}&l=${getLanguage()}`;\n    const timeouts   = {};\n    const promises   = {};\n\n    const no_duplicate_requests = [\n        'authorize',\n        'get_settings',\n        'residence_list',\n        'landing_company',\n        'payout_currencies',\n        'asset_index',\n    ];\n\n    const sent_requests = {\n        items : [],\n        clear : () => { sent_requests.items = []; },\n        has   : msg_type => sent_requests.items.indexOf(msg_type) >= 0,\n        add   : (msg_type) => { if (!sent_requests.has(msg_type)) sent_requests.items.push(msg_type); },\n        remove: (msg_type) => {\n            if (sent_requests.has(msg_type)) sent_requests.items.splice(sent_requests.items.indexOf(msg_type, 1));\n        },\n    };\n\n    const waiting_list = {\n        items: {},\n        add  : (msg_type, promise_obj) => {\n            if (!waiting_list.items[msg_type]) {\n                waiting_list.items[msg_type] = [];\n            }\n            waiting_list.items[msg_type].push(promise_obj);\n        },\n        resolve: (response) => {\n            const msg_type      = response.msg_type;\n            const this_promises = waiting_list.items[msg_type];\n            if (this_promises && this_promises.length) {\n                this_promises.forEach((pr) => {\n                    if (!waiting_list.another_exists(pr, msg_type)) {\n                        pr.resolve(response);\n                    }\n                });\n                waiting_list.items[msg_type] = [];\n            }\n        },\n        another_exists: (pr, msg_type) => (\n            Object.keys(waiting_list.items)\n                .some(type => (\n                    type !== msg_type &&\n                    waiting_list.items[type].indexOf(pr) !== -1\n                ))\n        ),\n    };\n\n    const clearTimeouts = () => {\n        Object.keys(timeouts).forEach((key) => {\n            clearTimeout(timeouts[key]);\n            delete timeouts[key];\n        });\n    };\n\n    const isReady = () => hasReadyState(1);\n\n    const isClose = () => !binary_socket || hasReadyState(2, 3);\n\n    const hasReadyState = (...states) => binary_socket && states.some(s => binary_socket.readyState === s);\n\n    const sendBufferedRequests = () => {\n        while (buffered_sends.length > 0 && is_available) {\n            const req_obj = buffered_sends.shift();\n            send(req_obj.request, req_obj.options);\n        }\n    };\n\n    const wait = (...msg_types) => {\n        const promise_obj = new PromiseClass();\n        let is_resolved   = true;\n        msg_types.forEach((msg_type) => {\n            const last_response = State.get(['response', msg_type]);\n            if (!last_response) {\n                if (msg_type !== 'authorize' || ClientBase.isLoggedIn()) {\n                    waiting_list.add(msg_type, promise_obj);\n                    is_resolved = false;\n                }\n            } else if (msg_types.length === 1) {\n                promise_obj.resolve(last_response);\n            }\n        });\n        if (is_resolved) {\n            promise_obj.resolve();\n        }\n        return promise_obj.promise;\n    };\n\n    /**\n     * @param {Object} data: request object\n     * @param {Object} options:\n     *      forced  : {boolean}  sends the request regardless the same msg_type has been sent before\n     *      msg_type: {string}   specify the type of request call\n     *      callback: {function} to call on response of streaming requests\n     */\n    const send = function (data, options = {}) {\n        const promise_obj = options.promise || new PromiseClass();\n        const has_callback = typeof options.callback === 'function';\n\n        if (!data || isEmptyObject(data)) return promise_obj.promise;\n\n        const msg_type = options.msg_type || no_duplicate_requests.find(c => c in data);\n\n        // Fetch from cache\n        if (!options.forced) {\n            const response = SocketCache.get(data, msg_type);\n            if (response) {\n                State.set(['response', msg_type], cloneObject(response));\n                if (isReady() && is_available && !options.skip_cache_update && !has_callback) { // make the request to keep the cache updated\n                    binary_socket.send(JSON.stringify(data), { forced: true });\n                } else if (+data.time !== 1) { // Do not buffer all time requests\n                    buffered_sends.push({\n                        request: data,\n                        options: Object.assign(options, { promise: promise_obj, forced: true }),\n                    });\n                }\n                promise_obj.resolve(response);\n                if (has_callback) {\n                    options.callback(response);\n                } else {\n                    return promise_obj.promise;\n                }\n            }\n        }\n\n        // Fetch from state\n        if (!options.forced && msg_type && no_duplicate_requests.indexOf(msg_type) !== -1) {\n            const last_response = State.get(['response', msg_type]);\n            if (last_response) {\n                promise_obj.resolve(last_response);\n                return promise_obj.promise;\n            } else if (sent_requests.has(msg_type)) {\n                return wait(msg_type).then((response) => {\n                    promise_obj.resolve(response);\n                    return promise_obj.promise;\n                });\n            }\n        }\n\n        if (!data.req_id) {\n            data.req_id = ++req_id;\n        }\n        promises[data.req_id] = {\n            callback: (response) => {\n                if (has_callback) {\n                    options.callback(response);\n                } else {\n                    promise_obj.resolve(response);\n                }\n            },\n            subscribe: !!data.subscribe,\n        };\n\n        if (isReady() && is_available && config.isOnline()) {\n            is_disconnect_called = false;\n            if (!getPropertyValue(data, 'passthrough') && !getPropertyValue(data, 'verify_email')) {\n                data.passthrough = {};\n            }\n\n            binary_socket.send(JSON.stringify(data));\n            config.wsEvent('send');\n            if (msg_type && !sent_requests.has(msg_type)) {\n                sent_requests.add(msg_type);\n            }\n        } else if (+data.time !== 1) { // Do not buffer all time requests\n            buffered_sends.push({ request: data, options: Object.assign(options, { promise: promise_obj }) });\n        }\n\n        return promise_obj.promise;\n    };\n\n    const init = (options) => {\n        if (wrong_app_id === getAppId()) {\n            return;\n        }\n        if (typeof options === 'object' && config !== options) {\n            config         = options;\n            buffered_sends = [];\n        }\n        clearTimeouts();\n        config.wsEvent('init');\n\n        if (isClose()) {\n            binary_socket = new WebSocket(socket_url);\n            State.set('response', {});\n        }\n\n        binary_socket.onopen = () => {\n            config.wsEvent('open');\n            if (ClientBase.isLoggedIn()) {\n                send({ authorize: ClientBase.get('token') }, { forced: true });\n            } else {\n                sendBufferedRequests();\n            }\n\n            if (typeof config.onOpen === 'function') {\n                config.onOpen(isReady());\n            }\n\n            if (typeof config.onReconnect === 'function' && is_connected_before) {\n                config.onReconnect();\n            }\n\n            if (!is_connected_before) {\n                is_connected_before = true;\n            }\n        };\n\n        binary_socket.onmessage = (msg) => {\n            config.wsEvent('message');\n            const response = msg.data ? JSON.parse(msg.data) : undefined;\n            if (response) {\n                SocketCache.set(response);\n                const msg_type = response.msg_type;\n\n                // store in State\n                if (!getPropertyValue(response, ['echo_req', 'subscribe']) || /balance|website_status/.test(msg_type)) {\n                    State.set(['response', msg_type], cloneObject(response));\n                }\n                // resolve the send promise\n                const this_req_id = response.req_id;\n                const pr          = this_req_id ? promises[this_req_id] : null;\n                if (pr && typeof pr.callback === 'function') {\n                    pr.callback(response);\n                    if (!pr.subscribe) {\n                        delete promises[this_req_id];\n                    }\n                }\n                // resolve the wait promise\n                waiting_list.resolve(response);\n\n                if (getPropertyValue(response, ['error', 'code']) === 'InvalidAppID') {\n                    wrong_app_id = getAppId();\n                }\n\n                if (typeof config.onMessage === 'function') {\n                    config.onMessage(response);\n                }\n            }\n        };\n\n        binary_socket.onclose = () => {\n            sent_requests.clear();\n            clearTimeouts();\n            config.wsEvent('close');\n\n            if (wrong_app_id !== getAppId() && typeof config.onDisconnect === 'function' && !is_disconnect_called) {\n                config.onDisconnect();\n                is_disconnect_called = true;\n            }\n        };\n    };\n\n    const clear = (msg_type) => {\n        buffered_sends = [];\n        if (msg_type) {\n            State.set(['response', msg_type], undefined);\n            sent_requests.remove(msg_type);\n        }\n    };\n\n    const availability = (status) => {\n        if (typeof status !== 'undefined') {\n            is_available = !!status;\n        }\n        return is_available;\n    };\n\n    return {\n        init,\n        wait,\n        send,\n        clear,\n        clearTimeouts,\n        availability,\n        hasReadyState,\n        sendBuffered      : sendBufferedRequests,\n        get               : () => binary_socket,\n        setOnDisconnect   : (onDisconnect) => { config.onDisconnect = onDisconnect; },\n        setOnReconnect    : (onReconnect) => { config.onReconnect = onReconnect; },\n        removeOnReconnect : () => { delete config.onReconnect; },\n        removeOnDisconnect: () => { delete config.onDisconnect; },\n    };\n})();\n\nmodule.exports = BinarySocketBase;\n","const urlForLanguage             = require('./language').urlFor;\nconst urlLang                    = require('./language').urlLang;\nconst getCurrentProductionDomain = require('../config').getCurrentProductionDomain;\nrequire('url-polyfill');\n\nconst Url = (() => {\n    let location_url,\n        static_host;\n\n    const reset = () => {\n        location_url = window ? window.location : location_url;\n    };\n\n    const params = (href) => {\n        const arr_params = [];\n        const parsed     = ((href ? new URL(href) : location_url).search || '').substr(1).split('&');\n        let p_l          = parsed.length;\n        while (p_l--) {\n            const param = parsed[p_l].split('=');\n            arr_params.push(param);\n        }\n        return arr_params;\n    };\n\n    const paramsHash = (href) => {\n        const param_hash = {};\n        const arr_params = params(href);\n        let param        = arr_params.length;\n        while (param--) {\n            if (arr_params[param][0]) {\n                param_hash[arr_params[param][0]] = arr_params[param][1] || '';\n            }\n        }\n        return param_hash;\n    };\n\n    const normalizePath = path => (path ? path.replace(/(^\\/|\\/$|[^a-zA-Z0-9-_/])/g, '') : '');\n\n    const urlFor = (path, pars, language, should_change_to_legacy = false) => {\n        const lang = (language || urlLang()).toLowerCase();\n        // url language might differ from passed language, so we will always replace using the url language\n        const url_lang = (language ? urlLang().toLowerCase() : lang);\n        const url = window.location.href;\n        let domain = url.substring(0, url.indexOf(`/${url_lang}/`) + url_lang.length + 2);\n        if (should_change_to_legacy) {\n            if (/localhost|binary\\.sx/.test(domain)) {\n                domain = `https://binary.com/${url_lang}/`;\n            } else {\n                domain = domain.replace(/deriv\\.app/, 'binary.com');\n            }\n        }\n        const new_url = `${domain}${(normalizePath(path) || 'home')}.html${(pars ? `?${pars}` : '')}`;\n        // replace old lang with new lang\n        return urlForLanguage(lang, new_url);\n    };\n\n    const default_domain = 'binary.com';\n    const host_map = { // the exceptions regarding updating the URLs\n        'bot.binary.com'       : 'www.binary.bot',\n        'developers.binary.com': 'developers.binary.com', // same, shouldn't change\n        'academy.binary.com'   : 'academy.binary.com',\n        'tech.binary.com'      : 'tech.binary.com',\n        'blog.binary.com'      : 'blog.binary.com',\n    };\n\n    const urlForCurrentDomain = (href) => {\n        const current_domain = getCurrentProductionDomain();\n\n        if (!current_domain) {\n            return href; // don't change when domain is not supported\n        }\n\n        const url_object = new URL(href);\n        if (Object.keys(host_map).includes(url_object.hostname)) {\n            url_object.hostname = host_map[url_object.hostname];\n        } else if (url_object.hostname.indexOf(default_domain) !== -1) {\n            // to keep all non-Binary links unchanged, we use default domain for all Binary links in the codebase (javascript and templates)\n            url_object.hostname = url_object.hostname.replace(new RegExp(`\\\\.${default_domain}`, 'i'), `.${current_domain}`);\n        } else {\n            return href;\n        }\n\n        return url_object.href;\n    };\n\n    const urlForStatic = (path = '') => {\n        if (!static_host || static_host.length === 0) {\n            static_host = document.querySelector('script[src*=\"vendor.min.js\"]');\n            if (static_host) {\n                static_host = static_host.getAttribute('src');\n            }\n\n            if (static_host && static_host.length > 0) {\n                static_host = static_host.substr(0, static_host.indexOf('/js/') + 1);\n            } else {\n                static_host = Url.websiteUrl();\n            }\n        }\n\n        return static_host + path.replace(/(^\\/)/g, '');\n    };\n\n    return {\n        reset,\n        paramsHash,\n        urlFor,\n        urlForCurrentDomain,\n        urlForStatic,\n\n        param          : name => paramsHash()[name],\n        websiteUrl     : () => `${location.protocol}//${location.hostname}/`,\n        getHostMap     : () => host_map,\n        resetStaticHost: () => { static_host = undefined; },\n    };\n})();\n\nmodule.exports = Url;\n","const Cookies       = require('js-cookie');\nconst CookieStorage = require('./storage').CookieStorage;\n\nconst Language = (() => {\n    const all_languages = {\n        ACH  : 'Translations',\n        EN   : 'English',\n        DE   : 'Deutsch',\n        ES   : 'Español',\n        FR   : 'Français',\n        ID   : 'Indonesia',\n        IT   : 'Italiano',\n        PL   : 'Polish',\n        PT   : 'Português',\n        RU   : 'Русский',\n        TH   : 'Thai',\n        VI   : 'Tiếng Việt',\n        ZH_CN: '简体中文',\n        ZH_TW: '繁體中文',\n    };\n    const default_language = 'EN';\n\n    const setCookieLanguage = (lang) => {\n        if (!Cookies.get('language') || lang) {\n            const cookie = new CookieStorage('language');\n            cookie.write((lang || getLanguage()).toUpperCase());\n        }\n    };\n\n    let url_lang = null;\n\n    const lang_regex = new RegExp(`^(${Object.keys(all_languages).join('|')})$`, 'i');\n\n    const languageFromUrl = (custom_url) => {\n        if (url_lang && !custom_url) return url_lang;\n        const url_params = (custom_url || window.location.href).split('/').slice(3);\n        const language   = (url_params.find(lang => lang_regex.test(lang)) || '');\n        if (!custom_url) {\n            url_lang = language;\n        }\n        return language;\n    };\n\n    let current_lang = null;\n\n    const getLanguage = () => {\n        if (/ach/i.test(current_lang) || /ach/i.test(languageFromUrl())) {\n            const crowdin_lang_key = 'jipt_language_code_binary-static';\n            const crowdin_lang     = localStorage.getItem(crowdin_lang_key) || Cookies.get(crowdin_lang_key); // selected language for in-context translation\n            if (crowdin_lang) {\n                current_lang = crowdin_lang.toUpperCase().replace('-', '_').toUpperCase();\n                if (document.body) {\n                    document.body.classList.add(current_lang); // set the body class removed by crowdin code\n                }\n            }\n        }\n        current_lang = (current_lang || (languageFromUrl() || Cookies.get('language') || default_language).toUpperCase());\n        return current_lang;\n    };\n\n    const urlForLanguage = (lang, url = window.location.href) =>\n        url.replace(new RegExp(`/${getLanguage()}/`, 'i'), `/${(lang || default_language).trim().toLowerCase()}/`);\n\n    return {\n        getAll   : () => all_languages,\n        setCookie: setCookieLanguage,\n        get      : getLanguage,\n        urlFor   : urlForLanguage,\n        urlLang  : languageFromUrl,\n        reset    : () => { url_lang = null; current_lang = null; },\n    };\n})();\n\nmodule.exports = Language;\n","const moment        = require('moment');\nconst urlForStatic  = require('./url').urlForStatic;\nconst getStaticHash = require('./utility').getStaticHash;\n\n// only reload if it's more than 10 minutes since the last reload\nconst shouldForceReload = last_reload => !last_reload || +last_reload + (10 * 60 * 1000) < moment().valueOf();\n\n// calling this method is handled by GTM tags\nconst checkNewRelease = () => {\n    const last_reload = localStorage.getItem('new_release_reload_time');\n    if (!shouldForceReload(last_reload)) return false;\n    localStorage.setItem('new_release_reload_time', moment().valueOf());\n\n    const current_hash = getStaticHash();\n    const xhttp        = new XMLHttpRequest();\n\n    xhttp.onreadystatechange = () => {\n        if (+xhttp.readyState === 4 && +xhttp.status === 200) {\n            const latest_hash = xhttp.responseText;\n            if (latest_hash && current_hash && latest_hash !== current_hash) {\n                window.location.reload(true);\n            }\n        }\n    };\n    xhttp.open('GET', urlForStatic(`version?${Math.random().toString(36).slice(2)}`), true);\n    xhttp.send();\n\n    return true;\n};\n\nmodule.exports = {\n    shouldForceReload,\n    checkNewRelease,\n};\n","if (!Element.prototype.matches) {\n    Element.prototype.matches =\n        Element.prototype.matchesSelector ||\n        Element.prototype.mozMatchesSelector ||\n        Element.prototype.msMatchesSelector ||\n        Element.prototype.oMatchesSelector ||\n        Element.prototype.webkitMatchesSelector ||\n        function(s) {\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n}\n","const BinarySocket = require('./socket_base');\nconst localize     = require('../localize').localize;\n\n/*\n * Monitors the network status and initialises the WebSocket connection\n * 1. online : check the WS status (init/send: blink after timeout, open/message: online)\n * 2. offline: it is offline\n */\nconst NetworkMonitorBase = (() => {\n    const StatusConfig = (() => {\n        let status_config;\n\n        const initStatusConfig = () => ({\n            online  : { class: 'online',  tooltip: localize('Online') },\n            offline : { class: 'offline', tooltip: localize('Offline') },\n            blinking: { class: 'blinker', tooltip: localize('Connecting to server') },\n        });\n\n        return {\n            get: (status) => {\n                if (!status_config) {\n                    status_config = initStatusConfig();\n                }\n                return status_config[status];\n            },\n        };\n    })();\n\n    const pendings = {};\n    const pending_keys = {\n        ws_init   : 'ws_init',\n        ws_request: 'ws_request',\n    };\n    const pending_timeouts = {\n        [pending_keys.ws_init]   : 5000,\n        [pending_keys.ws_request]: 10000,\n    };\n\n    let ws_config,\n        network_status,\n        updateUI;\n\n    const init = (socket_general_functions, fncUpdateUI) => {\n        updateUI  = fncUpdateUI;\n        ws_config = Object.assign({ wsEvent, isOnline }, socket_general_functions);\n\n        if ('onLine' in navigator) {\n            window.addEventListener('online',  setStatus);\n            window.addEventListener('offline', setStatus);\n        } else { // if not supported, default to online and fallback to WS checks\n            navigator.onLine = true;\n        }\n\n        if (isOnline()) {\n            BinarySocket.init(ws_config);\n        }\n\n        setStatus(isOnline() ? 'online' : 'offline');\n    };\n\n    const isOnline = () => navigator.onLine;\n\n    const wsReconnect = () => {\n        if (isOnline() && BinarySocket.hasReadyState(2, 3)) { // CLOSING or CLOSED\n            BinarySocket.init(ws_config);\n        } else {\n            BinarySocket.send({ ping: 1 }); // trigger a request to get stable status sooner\n        }\n    };\n\n    const setStatus = (status) => {\n        if (!isOnline()) {\n            network_status = 'offline';\n        } else if (pending_keys[status] || network_status === 'offline') {\n            network_status = 'blinking';\n            wsReconnect();\n        } else {\n            network_status = 'online';\n        }\n\n        if (typeof updateUI === 'function') {\n            updateUI(StatusConfig.get(network_status), isOnline());\n        }\n    };\n\n    const ws_events_map = {\n        init   : () => setPending(pending_keys.ws_init),\n        open   : () => clearPendings(pending_keys.ws_init),\n        send   : () => setPending(pending_keys.ws_request),\n        message: () => clearPendings(),\n        close  : () => setPending(pending_keys.ws_init),\n    };\n\n    const wsEvent = (event) => {\n        if (typeof ws_events_map[event] === 'function') {\n            ws_events_map[event]();\n        }\n    };\n\n    const setPending = (key) => {\n        if (!pendings[key]) {\n            pendings[key] = setTimeout(() => {\n                pendings[key] = undefined;\n                setStatus(key);\n            }, pending_timeouts[key]);\n        }\n    };\n\n    const clearPendings = (key) => {\n        const clear = (k) => {\n            clearTimeout(pendings[k]);\n            pendings[k] = undefined;\n            if (k === pending_keys.ws_request) {\n                setStatus('online');\n            }\n        };\n\n        if (key) {\n            clear(key);\n        } else {\n            Object.keys(pendings).forEach(clear);\n        }\n    };\n\n    return {\n        init,\n        wsEvent,\n    };\n})();\n\nmodule.exports = NetworkMonitorBase;\n","import BinarySocket   from './socket_base';\nimport {\n    cloneObject,\n    getPropertyValue,\n    isDeepEqual,\n    isEmptyObject }   from '../utility';\n\n/**\n * A layer over BinarySocket to handle subscribing to streaming calls\n * in order to keep track of subscriptions, manage forget, prevent multiple subscription at the same time, ...\n *\n * structure of the the subscription object is:\n * {\n *     1: { msg_type: 'proposal', request: { ... }, stream_id: '...', subscribers: [ ... ] },\n *     2: ...\n * }\n * object keys: subscription_id that assigned to each subscription\n * msg_type   : msg_type of the request for faster filtering\n * request    : the request object, used to subscribe to the same stream when there is a new subscribe request with exactly the same values\n * stream_id  : id of the stream which stored from its response and used to forget the stream when needed\n * subscribers: an array of callbacks to dispatch the response to\n */\nconst SubscriptionManager = (() => {\n    const subscriptions    = {};\n    const forget_requested = {};\n\n    let subscription_id = 0;\n\n    /**\n     * To submit request for a new subscription\n     *\n     * @param {String}   msg_type             msg_type of the request\n     * @param {Object}   request_obj          the whole object of the request to be made\n     * @param {Function} fncCallback          callback function to pass the responses to\n     * @param {Boolean}  should_forget_first  when it's true: forgets the previous subscription, then subscribes after receiving the forget response (if any)\n     */\n    const subscribe = (msg_type, request_obj, fncCallback, should_forget_first = false) => {\n        if (should_forget_first) {\n            forget(msg_type, fncCallback).then(() => {\n                subscribe(msg_type, request_obj, fncCallback);\n            });\n            return;\n        }\n\n        let sub_id = Object.keys(subscriptions).find(id => isDeepEqual(request_obj, subscriptions[id].request));\n\n        if (!sub_id) {\n            sub_id = ++subscription_id;\n\n            subscriptions[sub_id] = {\n                msg_type,\n                request    : cloneObject(request_obj),\n                stream_id  : '',             // stream_id will be updated after receiving the response\n                subscribers: [fncCallback],\n            };\n\n            BinarySocket.send(request_obj, {\n                callback: (response) => dispatch(response, sub_id),\n            });\n        } else if (!hasCallbackFunction(sub_id, fncCallback)) {\n            // there is already an active subscription for the very same request which fncCallback is not subscribed to it yet\n            subscriptions[sub_id].subscribers.push(fncCallback);\n        }\n    };\n\n    /**\n     * Add subscription without subscribers from request\n     * E.g. open subscription to proposal_open_contract on buy request\n     * @param {String}   msg_type               msg_type of the subscription\n     * @param {Object}   send_request           the object of the request to be made\n     * @param {Object}   subscribe_request      the object of the subscription request\n     * @param {Array}    subscription_props     Array of prop strings to add to subscribe_request from initial request, e.g. contract_id\n     */\n    const addSubscriptionFromRequest = (msg_type, send_request, subscribe_request, subscription_props) =>\n        new Promise((resolve) => {\n            let sub_id;\n            let is_stream = false;\n\n            BinarySocket.send(send_request, {\n                callback: (response) => {\n                    if (response.error) {\n                        return resolve(response);\n                    }\n                    if (!is_stream) {\n                        is_stream = true;\n                        sub_id    = ++subscription_id;\n\n                        if (subscription_props && Array.isArray(subscription_props)) {\n                            subscription_props.forEach((prop) => {\n                                if (response[response.msg_type][prop]) {\n                                    subscribe_request[prop] = response[response.msg_type][prop];\n                                }\n                            });\n                        }\n\n                        subscriptions[sub_id] = {\n                            msg_type,\n                            request    : cloneObject(subscribe_request),\n                            stream_id  : '',             // stream_id will be updated after receiving the response\n                            subscribers: [],\n                        };\n                        return resolve(response);\n                    }\n                    return dispatch(response, sub_id);\n                },\n            });\n        });\n\n    // dispatches the response to subscribers of the specific subscription id (internal use only)\n    const dispatch = (response, sub_id) => {\n        const stream_id = getPropertyValue(response, [response.msg_type, 'id']) || getPropertyValue(response.subscription, ['id']);\n\n        if (!subscriptions[sub_id]) {\n            if (!forget_requested[stream_id]) {\n                forgetStream(stream_id);\n            }\n            return;\n        }\n\n        const sub_info = subscriptions[sub_id];\n        // set the stream_id\n        if (!sub_info.stream_id && stream_id) {\n            sub_info.stream_id = stream_id;\n        }\n\n        // callback subscribers\n        const subscribers = sub_info.subscribers;\n        if (subscribers.length) {\n            if (\n                // it is the first response\n                !sub_info.stream_id &&\n                    (\n                        // the first response returned error\n                        response.error\n                        || (\n                            // not a subscription (i.e. subscribed proposal_open_contract for an expired contract)\n                            // also to filter out streams with no stream id but later it will continue streaming (i.e. proposal_open_contract without contract id)\n                            !isEmptyObject(response[response.msg_type]) &&\n                            // check msg_type to filter out those calls which don't return stream `id` on first response (tick_history, ...)\n                            response.msg_type === sub_info.msg_type\n                        )\n                    )\n                ||\n                // remove when response isn't first and response has no stream_id\n                !stream_id && sub_info.stream_id\n            ) {\n                delete subscriptions[sub_id];\n            }\n            sub_info.subscribers.forEach((fnc) => {\n                fnc(response);\n            });\n        } else {\n            delete subscriptions[sub_id];\n            forgetStream(sub_info.stream_id);\n        }\n    };\n\n    /**\n     * To forget a subscription which submitted for a specific callback function\n     *\n     * @param  {String}   msg_type      msg_type to forget\n     * @param  {Function} fncCallback   the same function passed to subscribe()\n     *     (this is the way to distinguish between different subscribers of the same stream at the same time)\n     * @param  {Object}   match_values  optional, to only forget subscriptions having request that \"contains\" provided values\n     * @return {Promise}  the promise object of all possible forget requests\n     */\n    const forget = (msg_type, fncCallback, match_values) => {\n        if (typeof fncCallback !== 'function') {\n            throw new Error(`Missing callback function. To forget all subscriptions of msg_type: ${msg_type}, please call forgetAll().`);\n        }\n\n        const forgets_list = [];\n        Object.keys(subscriptions).forEach((id) => {\n            if (subscriptions[id].msg_type === msg_type) { // it's the msg_type we are looking for\n                if (!match_values || hasValues(subscriptions[id].request, match_values)) { // the value matches as well\n                    const stream_id = subscriptions[id].stream_id;\n                    if (stream_id && subscriptions[id].subscribers.length === 1) { // there is only one subscriber, so we can forget the call\n                        delete subscriptions[id];\n                        forgets_list.push(forgetStream(stream_id));\n                    } else if (hasCallbackFunction(id, fncCallback)) {\n                        // there are other subscribers, or for some reason there is no stream_id:\n                        // (i.e. returned an error, or forget() being called before the first response)\n                        subscriptions[id].subscribers.splice(subscriptions[id].subscribers.indexOf(fncCallback), 1);\n                    }\n                }\n            }\n        });\n        return Promise.all(forgets_list);\n    };\n\n    /**\n     * To forget all active subscriptions of a list of msg_types\n     *\n     * @param  {String}  msg_types  list of msg_types to forget\n     * @return {Promise} the promise object of all possible forget_all requests\n     */\n    const forgetAll = (...msg_types) => {\n        const types_to_forget = {};\n\n        msg_types.forEach((msg_type) => {\n            const sub_ids = Object.keys(subscriptions).filter(id => subscriptions[id].msg_type === msg_type);\n            if (sub_ids.length) {\n                sub_ids.forEach((id) => {\n                    delete subscriptions[id];\n                });\n                types_to_forget[msg_type] = true;\n            }\n        });\n\n        return Promise.resolve(\n            !isEmptyObject(types_to_forget) ?\n                BinarySocket.send({ forget_all: Object.keys(types_to_forget) }) :\n                {}\n        );\n    };\n\n    const forgetStream = (stream_id) => {\n        forget_requested[stream_id] = true; // to prevent forgetting multiple times\n        return Promise.resolve(\n            stream_id ?\n                BinarySocket.send({ forget: stream_id }).then(() => { delete forget_requested[stream_id]; }) :\n                {}\n        );\n    };\n\n    const hasCallbackFunction = (sub_id, fncCallback) =>\n        (subscriptions[sub_id] && subscriptions[sub_id].subscribers.indexOf(fncCallback) !== -1);\n\n    const hasValues = (request_obj, values_obj) => (\n        typeof request_obj === 'object' &&\n        typeof values_obj  === 'object' &&\n        Object.keys(values_obj).every(key => request_obj[key] === values_obj[key])\n    );\n\n    return {\n        addSubscriptionFromRequest,\n        subscribe,\n        forget,\n        forgetAll,\n    };\n})();\n\nexport default SubscriptionManager;\n","const Cookies          = require('js-cookie');\nconst moment           = require('moment');\nconst ClientBase       = require('./client_base');\nconst Login            = require('./login');\nconst ServerTime       = require('./server_time');\nconst BinarySocket     = require('./socket_base');\nconst getLanguage      = require('../language').get;\nconst LocalStore       = require('../storage').LocalStore;\nconst State            = require('../storage').State;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst getAppId         = require('../../config').getAppId;\n\nconst GTM = (() => {\n    const isGtmApplicable = () => (/^(16303|16929)$/.test(getAppId()));\n\n    const getCommonVariables = () => ({\n        language: getLanguage(),\n        ...ClientBase.isLoggedIn() && {\n            visitorId: ClientBase.get('loginid'),\n            currency : ClientBase.get('currency'),\n        },\n        ...('is_dark_mode_on' in LocalStore.getObject('ui_store')) && {\n            theme: LocalStore.getObject('ui_store').is_dark_mode_on ? 'dark' : 'light',\n        },\n    });\n\n    const pushDataLayer = (data) => {\n        if (isGtmApplicable() && !Login.isLoginPages()) {\n            dataLayer.push({\n                ...getCommonVariables(),\n                ...data,\n            });\n        }\n    };\n\n    const eventHandler = (get_settings) => {\n        if (!isGtmApplicable()) return;\n        const login_event       = localStorage.getItem('GTM_login');\n        const is_new_account    = localStorage.getItem('GTM_new_account') === '1';\n\n        localStorage.removeItem('GTM_login');\n        localStorage.removeItem('GTM_new_account');\n\n        const affiliate_token = Cookies.getJSON('affiliate_tracking');\n        if (affiliate_token) {\n            pushDataLayer({ bom_affiliate_token: affiliate_token.t });\n        }\n\n        // Get current time (moment, set by server), else fallback to client time\n        const moment_now = window.time || moment().utc();\n        const data = {\n            visitorId         : ClientBase.get('loginid'),\n            bom_account_type  : ClientBase.getAccountType(),\n            bom_currency      : ClientBase.get('currency'),\n            bom_country       : get_settings.country,\n            bom_country_abbrev: get_settings.country_code,\n            bom_email         : get_settings.email,\n            url               : window.location.href,\n            bom_today         : moment_now.unix(),\n        };\n\n        if (is_new_account) {\n            data.event = 'new_account';\n            data.bom_date_joined = data.bom_today;\n        }\n\n        if (!ClientBase.get('is_virtual')) {\n            data.bom_age       = moment_now.diff(moment.unix(get_settings.date_of_birth).utc(), 'year');\n            data.bom_firstname = get_settings.first_name;\n            data.bom_lastname  = get_settings.last_name;\n            data.bom_phone     = get_settings.phone;\n        }\n\n        if (login_event) {\n            data.event = login_event;\n            BinarySocket.wait('mt5_login_list').then((response) => {\n                (response.mt5_login_list || []).forEach((obj) => {\n                    const acc_type = (ClientBase.getMT5AccountType(obj.group) || '')\n                        .replace('real_vanuatu', 'financial').replace('vanuatu_', '').replace(/svg/, 'gaming'); // i.e. financial_cent, demo_cent, demo_gaming, real_gaming\n                    if (acc_type) {\n                        data[`mt5_${acc_type}_id`] = obj.login;\n                    }\n                });\n                pushDataLayer(data);\n            });\n        } else {\n            pushDataLayer(data);\n        }\n\n        // check if there are any transactions in the last 30 days for UX interview selection\n        BinarySocket.send({ statement: 1, limit: 1 }).then((response) => {\n            const last_transaction_timestamp = getPropertyValue(response, ['statement', 'transactions', '0', 'transaction_time']);\n            pushDataLayer({\n                bom_transaction_in_last_30d: !!last_transaction_timestamp && moment(last_transaction_timestamp * 1000).isAfter(ServerTime.get().subtract(30, 'days')),\n            });\n        });\n    };\n\n    const mt5NewAccount = (response) => {\n        const acc_type = response.mt5_new_account.mt5_account_type ?\n            `${response.mt5_new_account.account_type}_${response.mt5_new_account.mt5_account_type}` : // financial_cent, demo_cent, ...\n            `${response.mt5_new_account.account_type === 'demo' ? 'demo' : 'real'}_gaming`;           // demo_gaming, real_gaming\n\n        const gtm_data = {\n            event          : 'mt5_new_account',\n            bom_email      : ClientBase.get('email'),\n            bom_country    : State.getResponse('get_settings.country'),\n            mt5_last_signup: acc_type,\n        };\n\n        gtm_data[`mt5_${acc_type}_id`] = response.mt5_new_account.login;\n\n        if (/demo/.test(acc_type) && !ClientBase.get('is_virtual')) {\n            gtm_data.visitorId = ClientBase.getAccountOfType('virtual').loginid;\n        }\n\n        pushDataLayer(gtm_data);\n    };\n\n    // Pushes deposit & withdrawal data from transaction-stream to GTM\n    const pushTransactionData = (response, extra_data = {}) => {\n        if (!isGtmApplicable() || ClientBase.get('is_virtual')) return;\n        if (!response.transaction || !response.transaction.action) return;\n        if (!['deposit', 'withdrawal'].includes(response.transaction.action)) return;\n\n        const moment_now  = window.time || moment().utc();\n        const storage_key = 'GTM_transactions';\n\n        // Remove values from prev days so localStorage doesn't grow to infinity\n        let gtm_transactions = JSON.parse(localStorage.getItem(storage_key)) || {};\n        if (Object.prototype.hasOwnProperty.call(gtm_transactions, 'timestamp')) {\n            if (moment_now.isAfter(moment.unix(gtm_transactions.timestamp).utc(), 'day')) {\n                localStorage.removeItem(storage_key);\n                gtm_transactions = { timestamp: moment_now.unix() };\n            }\n        }\n        const transactions_arr = gtm_transactions.transactions || [];\n        if (!transactions_arr.includes(response.transaction.transaction_id)) {\n            const data = {\n                event           : 'transaction',\n                bom_account_type: ClientBase.getAccountType(),\n                bom_today       : moment_now.unix(),\n                transaction     : {\n                    id     : response.transaction.transaction_id,\n                    type   : response.transaction.action,\n                    time   : response.transaction.transaction_time,\n                    amount : response.transaction.amount,\n                    balance: response.transaction.balance,\n                },\n            };\n            Object.assign(data, extra_data);\n            pushDataLayer(data);\n\n            transactions_arr.push(response.transaction.transaction_id);\n            gtm_transactions.transactions = transactions_arr;\n            gtm_transactions.timestamp    = gtm_transactions.timestamp || moment_now.unix();\n\n            localStorage.setItem(storage_key, JSON.stringify(gtm_transactions));\n        }\n    };\n\n    return {\n        pushDataLayer,\n        eventHandler,\n        pushTransactionData,\n        mt5NewAccount,\n    };\n})();\n\nmodule.exports = GTM;\n","const isMobile = () => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\nmodule.exports = {\n    isMobile,\n};\n","const moment   = require('moment');\nconst template = require('./utility').template;\n\nconst Localize = (() => {\n    let localized_texts;\n\n    const localizeForLang = (lang) => {\n        localized_texts = texts_json[lang.toUpperCase()];\n        moment.locale(lang.toLowerCase());\n    };\n\n    const doLocalize = (txt, params) => {\n        let text = txt;\n\n        const index = text.replace(/[\\s|.]/g, '_');\n\n        text = (localized_texts && localized_texts[index]) || text;\n\n        // only use template when explicitly required\n        return params ? template(text, params) : text;\n    };\n\n    const localize = (text, params) => (\n        Array.isArray(text) ? text.map(t => doLocalize(t, params)) : doLocalize(text, params)\n    );\n\n    /**\n     * Localizes the text, but doesn't replace placeholders\n     * The localized text through this method should replace the placeholders later. e.g. using template()\n     * @param  {String} text - text to be localized\n     * @return {String} the localized text having the original placeholders ([_1], ...)\n     */\n    const localizeKeepPlaceholders = (text) => (\n        localize(\n            text /* localize-ignore */,\n            [...new Set(text.match(/\\[_(\\d+)]/g).sort())]\n        )\n    );\n\n    return {\n        localize,\n        localizeKeepPlaceholders,\n        forLang: localizeForLang,\n    };\n})();\n\nmodule.exports = Localize;\n","const moment           = require('moment');\nconst isCryptocurrency = require('./currency_base').isCryptocurrency;\nconst SocketCache      = require('./socket_cache');\nconst localize         = require('../localize').localize;\nconst LocalStore       = require('../storage').LocalStore;\nconst State            = require('../storage').State;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst isEmptyObject    = require('../utility').isEmptyObject;\n\nconst ClientBase = (() => {\n    const storage_key = 'client.accounts';\n    let client_object = {};\n    let current_loginid;\n\n    const init = () => {\n        current_loginid = LocalStore.get('active_loginid');\n        client_object   = getAllAccountsObject();\n    };\n\n    const isLoggedIn = () => (\n        !isEmptyObject(getAllAccountsObject()) &&\n        get('loginid') &&\n        get('token')\n    );\n\n    const isValidLoginid = () => {\n        if (!isLoggedIn()) return true;\n        const valid_login_ids = new RegExp('^(MX|MF|VRTC|MLT|CR|FOG)[0-9]+$', 'i');\n        return getAllLoginids().every(loginid => valid_login_ids.test(loginid));\n    };\n\n    /**\n     * Stores the client information in local variable and localStorage\n     *\n     * @param {String} key                 The property name to set\n     * @param {String|Number|Object} value The regarding value\n     * @param {String|null} loginid        The account to set the value for\n     */\n    const set = (key, value, loginid = current_loginid) => {\n        if (key === 'loginid' && value !== current_loginid) {\n            LocalStore.set('active_loginid', value);\n            current_loginid = value;\n        } else {\n            if (!(loginid in client_object)) {\n                client_object[loginid] = {};\n            }\n            client_object[loginid][key] = value;\n            LocalStore.setObject(storage_key, client_object);\n        }\n    };\n\n    /**\n     * Returns the client information\n     *\n     * @param {String|null} key     The property name to return the value from, if missing returns the account object\n     * @param {String|null} loginid The account to return the value from\n     */\n    const get = (key, loginid = current_loginid) => {\n        let value;\n        if (key === 'loginid') {\n            value = loginid || LocalStore.get('active_loginid');\n        } else {\n            const current_client = client_object[loginid] || getAllAccountsObject()[loginid] || client_object;\n\n            value = key ? current_client[key] : current_client;\n        }\n        if (!Array.isArray(value) && (+value === 1 || +value === 0 || value === 'true' || value === 'false')) {\n            value = JSON.parse(value || false);\n        }\n        return value;\n    };\n\n    const getAllAccountsObject = () => LocalStore.getObject(storage_key);\n\n    const getAllLoginids = () => Object.keys(getAllAccountsObject());\n\n    const getAccountType = (loginid = current_loginid) => {\n        let account_type;\n        if (/^VR/.test(loginid))          account_type = 'virtual';\n        else if (/^MF/.test(loginid))     account_type = 'financial';\n        else if (/^MLT|MX/.test(loginid)) account_type = 'gaming';\n        return account_type;\n    };\n\n    const isAccountOfType = (type, loginid = current_loginid, only_enabled = false) => {\n        const this_type   = getAccountType(loginid);\n        return ((\n            (type === 'virtual' && this_type === 'virtual') ||\n            (type === 'real'    && this_type !== 'virtual') ||\n            type === this_type) &&\n            (only_enabled ? !get('is_disabled', loginid) : true));\n    };\n\n    const getAccountOfType = (type, only_enabled) => {\n        const id = getAllLoginids().find(loginid => isAccountOfType(type, loginid, only_enabled));\n        return id ? Object.assign({ loginid: id }, get(null, id)) : {};\n    };\n\n    const hasAccountType = (type, only_enabled) => !isEmptyObject(getAccountOfType(type, only_enabled));\n\n    // only considers currency of real money accounts\n    // @param {String} type = crypto|fiat\n    const hasCurrencyType = (type) => {\n        const loginids = getAllLoginids();\n        if (type === 'crypto') {\n            // find if has crypto currency account\n            return loginids.find(loginid =>\n                !get('is_virtual', loginid) && isCryptocurrency(get('currency', loginid)));\n        }\n        // else find if have fiat currency account\n        return loginids.find(loginid =>\n            !get('is_virtual', loginid) && !isCryptocurrency(get('currency', loginid)));\n    };\n\n    const TypesMapConfig = (() => {\n        let types_map_config;\n\n        const initTypesMap = () => ({\n            default  : localize('Real'),\n            financial: localize('Investment'),\n            gaming   : localize('Gaming'),\n            virtual  : localize('Virtual'),\n        });\n\n        return {\n            get: () => {\n                if (!types_map_config) {\n                    types_map_config = initTypesMap();\n                }\n                return types_map_config;\n            },\n        };\n    })();\n\n    const getAccountTitle = loginid => {\n        const types_map = TypesMapConfig.get();\n        return (types_map[getAccountType(loginid)] || types_map.default);\n    };\n\n    const responseAuthorize = (response) => {\n        const authorize = response.authorize;\n        set('email',      authorize.email);\n        set('currency',   authorize.currency);\n        set('is_virtual', +authorize.is_virtual);\n        set('session_start', parseInt(moment().valueOf() / 1000));\n        set('landing_company_shortcode', authorize.landing_company_name);\n        updateAccountList(authorize.account_list);\n    };\n\n    const updateAccountList = (account_list) => {\n        account_list.forEach((account) => {\n            set('excluded_until', account.excluded_until || '', account.loginid);\n            Object.keys(account).forEach((param) => {\n                const param_to_set = param === 'country' ? 'residence' : param;\n                const value_to_set = typeof account[param] === 'undefined' ? '' : account[param];\n                if (param_to_set !== 'loginid') {\n                    set(param_to_set, value_to_set, account.loginid);\n                }\n            });\n        });\n    };\n\n    const shouldAcceptTnc = () => {\n        if (get('is_virtual')) return false;\n        const website_tnc_version = State.getResponse('website_status.terms_conditions_version');\n        const client_tnc_status   = State.getResponse('get_settings.client_tnc_status');\n        return typeof client_tnc_status !== 'undefined' && client_tnc_status !== website_tnc_version;\n    };\n\n    const clearAllAccounts = () => {\n        current_loginid = undefined;\n        client_object   = {};\n        LocalStore.setObject(storage_key, client_object);\n    };\n\n    const setNewAccount = (options) => {\n        if (!options.email || !options.loginid || !options.token) {\n            return false;\n        }\n\n        SocketCache.clear();\n        localStorage.setItem('GTM_new_account', '1');\n\n        set('token',      options.token,       options.loginid);\n        set('email',      options.email,       options.loginid);\n        set('is_virtual', +options.is_virtual, options.loginid);\n        set('loginid',    options.loginid);\n\n        return true;\n    };\n\n    const currentLandingCompany = () => {\n        const landing_company_response = State.getResponse('landing_company') || {};\n        const this_shortcode           = get('landing_company_shortcode');\n        const landing_company_prop     = Object.keys(landing_company_response).find((key) => (\n            this_shortcode === landing_company_response[key].shortcode\n        ));\n        return landing_company_response[landing_company_prop] || {};\n    };\n\n    const shouldCompleteTax = () => isAccountOfType('financial') &&\n        !/crs_tin_information/.test((State.getResponse('get_account_status') || {}).status);\n\n    // remove manager id or master distinction from group\n    // remove EUR or GBP distinction from group\n    const getMT5AccountType = group => (group ? group.replace('\\\\', '_').replace(/_(\\d+|master|EUR|GBP)/, '') : '');\n\n    const getBasicUpgradeInfo = () => {\n        const upgradeable_landing_companies = State.getResponse('authorize.upgradeable_landing_companies');\n\n        let can_open_multi = false;\n        let type,\n            can_upgrade_to;\n        if ((upgradeable_landing_companies || []).length) {\n            const current_landing_company = get('landing_company_shortcode');\n\n            can_open_multi = upgradeable_landing_companies.indexOf(current_landing_company) !== -1;\n\n            // only show upgrade message to landing companies other than current\n            const canUpgrade = (...landing_companies) => landing_companies.find(landing_company => (\n                landing_company !== current_landing_company &&\n                upgradeable_landing_companies.indexOf(landing_company) !== -1\n            ));\n\n            can_upgrade_to = canUpgrade('svg', 'iom', 'malta', 'maltainvest');\n            if (can_upgrade_to) {\n                type = can_upgrade_to === 'maltainvest' ? 'financial' : 'real';\n            }\n        }\n\n        return {\n            type,\n            can_upgrade: !!can_upgrade_to,\n            can_upgrade_to,\n            can_open_multi,\n        };\n    };\n\n    const getLandingCompanyValue = (loginid, landing_company, key) => {\n        let landing_company_object;\n        if (loginid.financial || isAccountOfType('financial', loginid)) {\n            landing_company_object = getPropertyValue(landing_company, 'financial_company');\n        } else if (loginid.real || isAccountOfType('real', loginid)) {\n            landing_company_object = getPropertyValue(landing_company, 'gaming_company');\n\n            // handle accounts that don't have gaming company\n            if (!landing_company_object) {\n                landing_company_object = getPropertyValue(landing_company, 'financial_company');\n            }\n        } else {\n            const financial_company = (getPropertyValue(landing_company, 'financial_company') || {})[key] || [];\n            const gaming_company    = (getPropertyValue(landing_company, 'gaming_company') || {})[key] || [];\n            landing_company_object  = financial_company.concat(gaming_company);\n            return landing_company_object;\n        }\n        return (landing_company_object || {})[key];\n    };\n\n    const getRiskAssessment = () => {\n        const status       = State.getResponse('get_account_status.status');\n        const is_high_risk = /high/.test(State.getResponse('get_account_status.risk_classification'));\n\n        return (\n            isAccountOfType('financial') ?\n                /(financial_assessment|trading_experience)_not_complete/.test(status) :\n                (is_high_risk && /financial_assessment_not_complete/.test(status))\n        );\n    };\n\n    // API_V3: send a list of accounts the client can transfer to\n    const canTransferFunds = (account) => {\n        if (account) {\n            // this specific account can be used to transfer funds to\n            return canTransferFundsTo(account.loginid);\n        }\n        // at least one account can be used to transfer funds to\n        return Object.keys(client_object).some(loginid => canTransferFundsTo(loginid));\n    };\n\n    const canTransferFundsTo = (to_loginid) => {\n        if (to_loginid === current_loginid || get('is_virtual', to_loginid) || get('is_virtual') ||\n            get('is_disabled', to_loginid)) {\n            return false;\n        }\n        const from_currency = get('currency');\n        const to_currency   = get('currency', to_loginid);\n        if (!from_currency || !to_currency) {\n            return false;\n        }\n        // only transfer to other accounts that have the same currency as current account if one is maltainvest and one is malta\n        if (from_currency === to_currency) {\n            // these landing companies are allowed to transfer funds to each other if they have the same currency\n            const same_cur_allowed = {\n                maltainvest: 'malta',\n                malta      : 'maltainvest',\n            };\n            const from_landing_company = get('landing_company_shortcode');\n            const to_landing_company   = get('landing_company_shortcode', to_loginid);\n            // if same_cur_allowed[from_landing_company] is undefined and to_landing_company is also undefined, it will return true\n            // so we should compare '' === undefined instead\n            return (same_cur_allowed[from_landing_company] || '') === to_landing_company;\n        }\n        // or for other clients if current account is cryptocurrency it should only transfer to fiat currencies and vice versa\n        const is_from_crypto = isCryptocurrency(from_currency);\n        const is_to_crypto   = isCryptocurrency(to_currency);\n        return (is_from_crypto ? !is_to_crypto : is_to_crypto);\n    };\n\n    const hasSvgAccount = () => !!(getAllLoginids().find(loginid => /^CR/.test(loginid)));\n\n    const canChangeCurrency = (statement, mt5_login_list, is_current = true) => {\n        const currency             = get('currency');\n        const has_no_mt5           = mt5_login_list.length === 0;\n        const has_no_transaction   = (statement.count === 0 && statement.transactions.length === 0);\n        const has_account_criteria = has_no_transaction && has_no_mt5;\n\n        // Current API requirements for currently logged-in user successfully changing their account's currency:\n        // 1. User must not have made any transactions\n        // 2. User must not have any MT5 account\n        // 3. Not be a crypto account\n        // 4. Not be a virtual account\n        return is_current ? currency && !get('is_virtual') && has_account_criteria && !isCryptocurrency(currency) : has_account_criteria;\n    };\n\n    return {\n        init,\n        isLoggedIn,\n        isValidLoginid,\n        set,\n        get,\n        getAllLoginids,\n        getAccountType,\n        isAccountOfType,\n        getAccountOfType,\n        hasAccountType,\n        hasCurrencyType,\n        getAccountTitle,\n        responseAuthorize,\n        shouldAcceptTnc,\n        clearAllAccounts,\n        setNewAccount,\n        currentLandingCompany,\n        shouldCompleteTax,\n        getAllAccountsObject,\n        getMT5AccountType,\n        getBasicUpgradeInfo,\n        getLandingCompanyValue,\n        getRiskAssessment,\n        canTransferFunds,\n        hasSvgAccount,\n        canChangeCurrency,\n    };\n})();\n\nmodule.exports = ClientBase;\n","const moment       = require('moment');\nconst BinarySocket = require('./socket_base');\nconst PromiseClass = require('../utility').PromiseClass;\n\nconst ServerTime = (() => {\n    let clock_started = false;\n    const pending = new PromiseClass();\n    let server_time,\n        performance_request_time,\n        get_time_interval,\n        update_time_interval,\n        onTimeUpdated;\n\n    const init = (fncTimeUpdated) => {\n        if (!clock_started) {\n            onTimeUpdated = fncTimeUpdated;\n            requestTime();\n            clearInterval(get_time_interval);\n            get_time_interval = setInterval(requestTime, 30000);\n            clock_started = true;\n        }\n    };\n\n    const requestTime = () => {\n        performance_request_time = performance.now();\n        BinarySocket.send({ time: 1 }).then(timeCounter);\n    };\n\n    const timeCounter = (response) => {\n        if (response.error) return;\n\n        if (!clock_started) {\n            init();\n            return;\n        }\n\n        clearInterval(update_time_interval);\n\n        const start_timestamp = response.time;\n        const performance_response_time = performance.now();\n        const time_taken = performance_response_time - performance_request_time;\n        const server_time_at_response = ((start_timestamp * 1000) + time_taken);\n\n        const updateTime = () => {\n            const time_since_response = performance.now() - performance_response_time;\n            server_time = moment(server_time_at_response + time_since_response).utc();\n\n            if (typeof onTimeUpdated === 'function') {\n                onTimeUpdated();\n            }\n        };\n        updateTime();\n        pending.resolve();\n        update_time_interval = setInterval(updateTime, 1000);\n    };\n\n    const get = () => server_time ? server_time.clone() : undefined;\n\n    return {\n        init,\n        get,\n        timePromise: pending.promise,\n    };\n})();\n\nmodule.exports = ServerTime;\n","const Client              = require('./client_base');\nconst getElementById      = require('../common_functions').getElementById;\nconst getLanguage         = require('../language').get;\nconst isMobile            = require('../os_detect').isMobile;\nconst isStorageSupported  = require('../storage').isStorageSupported;\nconst LocalStore          = require('../storage').LocalStore;\nconst urlForCurrentDomain = require('../url').urlForCurrentDomain;\nconst domain_app_ids      = require('../../config').domain_app_ids;\nconst getAppId            = require('../../config').getAppId;\n\nconst Login = (() => {\n    const redirectToLogin = () => {\n        if (!Client.isLoggedIn() && !isLoginPages() && isStorageSupported(sessionStorage)) {\n            sessionStorage.setItem('redirect_url', window.location.href);\n            window.location.href = loginUrl();\n        }\n    };\n\n    const loginUrl = () => {\n        const server_url         = localStorage.getItem('config.server_url');\n        const language           = getLanguage();\n        const signup_device      = LocalStore.get('signup_device') || (isMobile() ? 'mobile' : 'desktop');\n        const date_first_contact = LocalStore.get('date_first_contact');\n        const marketing_queries  = `&signup_device=${signup_device}${date_first_contact ? `&date_first_contact=${date_first_contact}` : ''}`;\n        const default_binary_url = `https://oauth.binary.com/oauth2/authorize?app_id=${getAppId()}&l=${language}${marketing_queries}`;\n\n        if (server_url && /qa/.test(server_url)) {\n            return `https://${server_url}/oauth2/authorize?app_id=${getAppId()}&l=${language}${marketing_queries}`;\n        }\n        if (getAppId === domain_app_ids['deriv.app']) {\n            return default_binary_url;\n        }\n\n        return urlForCurrentDomain(default_binary_url);\n    };\n\n    // TODO: update this to handle logging into /app/ url\n    const isLoginPages = () => /logged_inws|redirect/i.test(window.location.pathname);\n\n    const socialLoginUrl = brand => (`${loginUrl()}&social_signup=${brand}`);\n\n    const initOneAll = () => {\n        ['google', 'facebook'].forEach(provider => {\n            const el_button = getElementById(`#button_${provider}`);\n            el_button.removeEventListener('click');\n            el_button.addEventListener('click', (e) => {\n                e.preventDefault();\n                window.location.href = socialLoginUrl(provider);\n            });\n        });\n    };\n\n    return {\n        redirectToLogin,\n        isLoginPages,\n        initOneAll,\n    };\n})();\n\nmodule.exports = Login;\n"],"sourceRoot":""}