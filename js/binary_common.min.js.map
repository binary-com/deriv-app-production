{"version":3,"sources":["webpack:///./src/javascript/_common/base/socket_cache.js","webpack:///./src/javascript/_common/base/login.js","webpack:///./src/javascript/_common/string_util.js","webpack:///./src/javascript/_common/base/gtm.js","webpack:///./src/javascript/_common/base/currency_base.js","webpack:///./src/javascript/_common/storage.js","webpack:///./src/javascript/_common/url.js","webpack:///./src/javascript/_common/localize.js","webpack:///./src/javascript/_common/check_new_release.js","webpack:///./src/javascript/_common/lib/polyfills/element.matches.js","webpack:///./src/javascript/_common/base/network_monitor_base.js","webpack:///./src/javascript/_common/base/subscription_manager.js","webpack:///./src/javascript/_common/os_detect.js","webpack:///./src/javascript/_common/language.js","webpack:///./src/javascript/_common/base/socket_base.js","webpack:///./src/javascript/_common/base/client_base.js","webpack:///./src/javascript/_common/base/server_time.js","webpack:///./src/javascript/_common/utility.js","webpack:///./src/javascript/_common/common_functions.js"],"names":["moment","require","getLanguage","get","LocalStore","getPropertyValue","getStaticHash","isEmptyObject","SocketCache","config","payout_currencies","expire","active_symbols","map_to","contracts_for","exchange_rates","data_obj","request","msg_type","response","getObject","static_hash","clear","key","makeKey","response_obj","isBefore","expires","value","remove","source_obj","arguments","length","undefined","Object","keys","find","type","forEach","map_key","should_match_all","data_key","indexOf","setObject","set","cashed_response","echo_req","error","window","location","reload","add","valueOf","module","exports","Client","getElementById","isMobile","isStorageSupported","urlForCurrentDomain","domain_app_ids","getAppId","Login","loginUrl","server_url","localStorage","getItem","language","signup_device","date_first_contact","marketing_queries","default_binary_url","test","isLoginPages","pathname","redirectToLogin","isLoggedIn","sessionStorage","setItem","href","initOneAll","provider","el_button","removeEventListener","addEventListener","e","preventDefault","brand","socialLoginUrl","padLeft","txt","len","char","text","String","Array","join","numberToString","n","toTitleCase","str","replace","charAt","toUpperCase","substr","toLowerCase","compareBigUnsignedInt","a","b","first_num","second_num","max_length","Math","max","order","Cookies","ClientBase","ServerTime","BinarySocket","isVisible","State","GTM","isGtmApplicable","pushDataLayer","data","dataLayer","push","_extends","country_ip","getResponse","pageTitle","pjax","url","document","URL","visitorId","bom_email","t","exec","title","eventHandler","get_settings","login_event","is_new_account","removeItem","affiliate_token","getJSON","bom_affiliate_token","moment_now","time","utc","bom_account_type","getAccountType","bom_currency","bom_country","country","bom_country_abbrev","country_code","email","bom_today","unix","event","bom_date_joined","bom_age","diff","date_of_birth","bom_firstname","first_name","bom_lastname","last_name","bom_phone","phone","wait","then","mt5_login_list","obj","acc_type","getMT5AccountType","group","login","send","statement","limit","last_transaction_timestamp","bom_transaction_in_last_30d","isAfter","subtract","pushPurchaseData","buy","req","passthrough","bom_ui","bom_symbol","symbol","bom_market","currency","bom_contract_type","contract_type","bom_contract_id","contract_id","bom_transaction_id","transaction_id","bom_buy_price","buy_price","bom_payout","payout","assign","bom_amount","amount","bom_basis","basis","bom_expiry_type","bom_duration","duration","bom_duration_unit","duration_unit","bom_barrier","barrier","bom_barrier_high","bom_barrier_low","barrier2","bom_prediction","pushTransactionData","extra_data","transaction","action","includes","gtm_transactions","JSON","parse","prototype","hasOwnProperty","call","timestamp","transactions_arr","transactions","id","transaction_time","balance","stringify","mt5NewAccount","mt5_new_account","mt5_account_type","account_type","gtm_data","mt5_last_signup","getAccountOfType","loginid","setLoginFlag","event_name","localize","currencies_config","formatCurrency","addComma","num","decimal_points","is_crypto","number","toFixed","parseFloat","toString","$0","$1","$2","getDecimalPlaces","isCryptocurrency","calcDecimalPlaces","CryptoConfig","crypto_config","BTC","name","min_withdrawal","pa_max_withdrawal","pa_min_withdrawal","BCH","ETH","ETC","LTC","UST","USB","getMinWithdrawal","formatMoney","currency_value","exclude_currency","decimals","minimumFractionDigits","money","sign","Number","decimal_places","isNaN","abs","Intl","options","maximumFractionDigits","NumberFormat","format","setCurrencies","website_status","getCurrencyName","getTransferLimits","which","transfer_limits","min","getTransferFee","currency_from","currency_to","transfer_fee","getMinimumTransferFee","pow","getTextFormat","getMinPayout","getPaWithdrawalLimit","getCurrencies","isProduction","this","Storage","storage","Store","InScriptStore","object","store","k","isArray","slice","_this","_len","_key","has","path","split","concat","CookieStorage","cookie_name","cookie_domain","hostname","initialized","domain","Date","read","cookie_value","write","val","expireDate","isSecure","secure","SessionStore","removeCookies","_len2","cookie_names","_key2","domains","parent_path","c","RegExp","cookie","urlForLanguage","urlFor","urlLang","getCurrentProductionDomain","Url","location_url","static_host","paramsHash","param_hash","arr_params","parsed","search","p_l","param","params","host_map","bot.binary.com","developers.binary.com","academy.binary.com","tech.binary.com","blog.binary.com","reset","pars","should_change_to_legacy","lang","url_lang","substring","new_url","normalizePath","current_domain","url_object","urlForStatic","querySelector","getAttribute","websiteUrl","protocol","getHostMap","resetStaticHost","template","Localize","localized_texts","doLocalize","index","map","localizeKeepPlaceholders","_toConsumableArray","Set","match","sort","forLang","texts_json","locale","shouldForceReload","last_reload","checkNewRelease","current_hash","xhttp","XMLHttpRequest","onreadystatechange","readyState","status","latest_hash","responseText","open","random","Element","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","ownerDocument","querySelectorAll","i","item","NetworkMonitorBase","_pending_timeouts","StatusConfig","status_config","online","class","tooltip","offline","blinking","pendings","pending_keys","ws_init","ws_request","pending_timeouts","_defineProperty","ws_config","network_status","updateUI","isOnline","navigator","onLine","setStatus","hasReadyState","init","ping","ws_events_map","setPending","clearPendings","message","close","wsEvent","setTimeout","clearTimeout","socket_general_functions","fncUpdateUI","__webpack_require__","_utility","SubscriptionManager","subscriptions","forget_requested","subscription_id","dispatch","sub_id","stream_id","subscription","sub_info","subscribers","fnc","forgetStream","forget","fncCallback","match_values","Error","forgets_list","filter","hasCallbackFunction","hasValues","splice","Promise","all","resolve","request_obj","values_obj","_typeof","every","addSubscriptionFromRequest","send_request","subscribe_request","subscription_props","is_stream","callback","prop","cloneObject","subscribe","isDeepEqual","forgetAll","msg_types","types_to_forget","sub_ids","forget_all","userAgent","Language","all_languages","ACH","EN","DE","ES","FR","ID","IT","PL","PT","RU","TH","VI","ZH_CN","ZH_TW","lang_regex","languageFromUrl","custom_url","current_lang","crowdin_lang","body","classList","getAll","setCookie","trim","PromiseClass","getSocketURL","BinarySocketBase","binary_socket","buffered_sends","req_id","wrong_app_id","is_available","is_disconnect_called","is_connected_before","socket_url","timeouts","promises","no_duplicate_requests","sent_requests","items","waiting_list","promise_obj","this_promises","pr","another_exists","some","clearTimeouts","isReady","states","sendBufferedRequests","req_obj","shift","is_resolved","last_response","promise","forced","WebSocket","onopen","authorize","onOpen","onReconnect","onmessage","msg","this_req_id","onMessage","onclose","onDisconnect","availability","sendBuffered","setOnDisconnect","setOnReconnect","removeOnReconnect","removeOnDisconnect","client_object","current_loginid","getAllAccountsObject","current_client","getAllLoginids","isAccountOfType","only_enabled","this_type","TypesMapConfig","types_map_config","default","financial","gaming","virtual","updateAccountList","account_list","account","excluded_until","param_to_set","value_to_set","canTransferFundsTo","to_loginid","from_currency","to_currency","from_landing_company","to_landing_company","maltainvest","malta","is_from_crypto","is_to_crypto","isValidLoginid","valid_login_ids","hasAccountType","hasCurrencyType","loginids","getAccountTitle","types_map","responseAuthorize","is_virtual","parseInt","landing_company_name","shouldAcceptTnc","website_tnc_version","client_tnc_status","clearAllAccounts","setNewAccount","token","currentLandingCompany","landing_company_response","this_shortcode","landing_company_prop","shortcode","shouldCompleteTax","getBasicUpgradeInfo","upgradeable_landing_companies","can_open_multi","can_upgrade_to","current_landing_company","landing_companies","landing_company","canUpgrade","can_upgrade","getLandingCompanyValue","landing_company_object","real","financial_company","gaming_company","getRiskAssessment","is_high_risk","canTransferFunds","hasSvgAccount","canChangeCurrency","is_current","has_no_mt5","has_account_criteria","count","clock_started","pending","server_time","performance_request_time","get_time_interval","update_time_interval","onTimeUpdated","fncTimeUpdated","requestTime","clearInterval","setInterval","performance","now","timeCounter","start_timestamp","performance_response_time","server_time_at_response","updateTime","time_since_response","clone","timePromise","extend","is_empty","isEqualArray","isEqualObject","arr1","arr2","idx","obj1","obj2","string","content","to_replace","unique","array","findIndex","createElement","tag_name","attributes","el","attr","textContent","html","setAttribute","_classCallCheck","reject","elem","offsetWidth","offsetHeight","id_selector"],"mappings":"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","file":"binary_common.min.js","sourcesContent":["const moment           = require('moment');\nconst getLanguage      = require('../language').get;\nconst LocalStore       = require('../storage').LocalStore;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst getStaticHash    = require('../utility').getStaticHash;\nconst isEmptyObject    = require('../utility').isEmptyObject;\n\n/*\n * Caches WS responses to reduce delay time and number of requests\n * Stores data in LocalStore which is the first one available in: localStorage, sessionStorage, InScriptStore\n *\n * 1. It caches only the response of those calls which determined in `config`\n * 2. It doesn't cache responses which returned error\n * 3. The value is requested by BinarySocket,\n *    if this returns a value according to the logic here, socket code take it as response\n *    but also triggers an async `send` request, to keep the cache updated for next time\n * 4. Uses client's time to set and check for expiry, as the expire durations are not so long to need a more precise one\n *    (And doesn't worth to wait for the response of time call)\n * 5. Some responses should be cached by a particular value from request (e.g. contracts_for_frxAUDJPY)\n *    so there can be more than one value for a particular call\n * 6. Clears the whole cache regardless their expire time on the following events:\n *    6.1. Client changes: login / logout / switch loginid\n *    6.2. Detect a new release (static hash changed)\n */\nconst SocketCache = (() => {\n    // keys are msg_type\n    // expire: how long to keep the value (in minutes)\n    // map_to: to store different responses of the same key, should be array of:\n    //     string  : the property value from echo_req\n    //     function: return value of the function\n    const config = {\n        payout_currencies: { expire: 10 },\n        active_symbols   : { expire: 10, map_to: ['product_type', 'landing_company', getLanguage] },\n        contracts_for    : { expire: 10, map_to: ['contracts_for', 'product_type', 'currency'] },\n        exchange_rates   : { expire: 60, map_to: ['base_currency'] },\n    };\n\n    const storage_key = 'ws_cache';\n\n    let data_obj = {};\n\n    const set = (response) => {\n        const msg_type = response.msg_type;\n\n        if (!config[msg_type]) return;\n\n        // prevent unwanted page behaviour\n        // if a cached version already exists but it gives an error after being called for updating the cache\n        const cashed_response = get(response.echo_req);\n        if ((response.error || !response[msg_type]) && cashed_response && !cashed_response.error) {\n            clear();\n            window.location.reload();\n            return;\n        }\n\n        const key      = makeKey(response.echo_req, msg_type);\n        const expires  = moment().add(config[msg_type].expire, 'm').valueOf();\n\n        if (!data_obj.static_hash) {\n            data_obj.static_hash = getStaticHash();\n        }\n\n        data_obj[key] = { value: response, expires };\n        LocalStore.setObject(storage_key, data_obj);\n    };\n\n    const get = (request, msg_type) => {\n        let response;\n\n        if (isEmptyObject(data_obj)) {\n            data_obj = LocalStore.getObject(storage_key);\n            if (isEmptyObject(data_obj)) return undefined;\n        }\n\n        if (data_obj.static_hash !== getStaticHash()) { // new release\n            clear();\n        }\n\n        const key          = makeKey(request, msg_type);\n        const response_obj = getPropertyValue(data_obj, key) || {};\n\n        if (moment().isBefore(response_obj.expires)) {\n            response = response_obj.value;\n        } else { // remove if expired\n            remove(key);\n        }\n\n        return response;\n    };\n\n    const makeKey = (source_obj = {}, msg_type = '') => {\n        let key = msg_type || Object.keys(source_obj).find(type => config[type]);\n\n        if (key && !isEmptyObject(source_obj)) {\n            ((config[key] || {}).map_to || []).forEach((map_key) => {\n                const value = typeof map_key === 'function' ? map_key() : source_obj[map_key];\n                key += map_key ? `_${value || ''}` : '';\n            });\n        }\n\n        return key;\n    };\n\n    const remove = (key, should_match_all) => {\n        if (should_match_all) {\n            Object.keys(data_obj).forEach((data_key) => {\n                if (data_key.indexOf(key) !== -1) {\n                    delete data_obj[data_key];\n                }\n            });\n        } else if (key in data_obj) {\n            delete data_obj[key];\n        }\n        LocalStore.setObject(storage_key, data_obj);\n    };\n\n    const clear = () => {\n        LocalStore.remove(storage_key);\n        data_obj = {};\n    };\n\n    return {\n        set,\n        get,\n        remove,\n        clear,\n    };\n})();\n\nmodule.exports = SocketCache;\n","const Client              = require('./client_base');\nconst getElementById      = require('../common_functions').getElementById;\nconst getLanguage         = require('../language').get;\nconst isMobile            = require('../os_detect').isMobile;\nconst isStorageSupported  = require('../storage').isStorageSupported;\nconst LocalStore          = require('../storage').LocalStore;\nconst urlForCurrentDomain = require('../url').urlForCurrentDomain;\nconst domain_app_ids      = require('../../config').domain_app_ids;\nconst getAppId            = require('../../config').getAppId;\n\nconst Login = (() => {\n    const redirectToLogin = () => {\n        if (!Client.isLoggedIn() && !isLoginPages() && isStorageSupported(sessionStorage)) {\n            sessionStorage.setItem('redirect_url', window.location.href);\n            window.location.href = loginUrl();\n        }\n    };\n\n    const loginUrl = () => {\n        const server_url         = localStorage.getItem('config.server_url');\n        const language           = getLanguage();\n        const signup_device      = LocalStore.get('signup_device') || (isMobile() ? 'mobile' : 'desktop');\n        const date_first_contact = LocalStore.get('date_first_contact');\n        const marketing_queries  = `&signup_device=${signup_device}${date_first_contact ? `&date_first_contact=${date_first_contact}` : ''}`;\n        const default_binary_url = `https://oauth.binary.com/oauth2/authorize?app_id=${getAppId()}&l=${language}${marketing_queries}`;\n\n        return ((server_url && /qa/.test(server_url)) ?\n            `https://${server_url}/oauth2/authorize?app_id=${getAppId()}&l=${language}${marketing_queries}` :\n            getAppId() === domain_app_ids['deriv.app'] ?\n                default_binary_url\n                : urlForCurrentDomain(default_binary_url)\n        );\n    };\n\n    // TODO: update this to handle logging into /app/ url\n    const isLoginPages = () => /logged_inws|redirect/i.test(window.location.pathname);\n\n    const socialLoginUrl = brand => (`${loginUrl()}&social_signup=${brand}`);\n\n    const initOneAll = () => {\n        ['google', 'facebook'].forEach(provider => {\n            const el_button = getElementById(`#button_${provider}`);\n            el_button.removeEventListener('click');\n            el_button.addEventListener('click', (e) => {\n                e.preventDefault();\n                window.location.href = socialLoginUrl(provider);\n            });\n        });\n    };\n\n    return {\n        redirectToLogin,\n        isLoginPages,\n        initOneAll,\n    };\n})();\n\nmodule.exports = Login;\n","const toTitleCase = str => (\n    (str || '').replace(/\\w[^\\s/\\\\]*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase())\n);\n\nconst padLeft = (txt, len, char) => {\n    const text = String(txt || '');\n    return text.length >= len ? text : `${Array((len - text.length) + 1).join(char)}${text}`;\n};\n\nconst compareBigUnsignedInt = (a, b) => {\n    let first_num  = numberToString(a);\n    let second_num = numberToString(b);\n    if (!first_num || !second_num) {\n        return '';\n    }\n    const max_length = Math.max(first_num.length, second_num.length);\n    first_num        = padLeft(first_num, max_length, '0');\n    second_num       = padLeft(second_num, max_length, '0');\n\n    // lexicographical comparison\n    let order = 0;\n    if (first_num !== second_num) {\n        order = first_num > second_num ? 1 : -1;\n    }\n\n    return order;\n};\n\nconst numberToString = n => (typeof n === 'number' ? String(n) : n);\n\nmodule.exports = {\n    toTitleCase,\n    padLeft,\n    numberToString,\n    compareBigUnsignedInt,\n};\n","const Cookies          = require('js-cookie');\nconst moment           = require('moment');\nconst ClientBase       = require('./client_base');\nconst Login            = require('./login');\nconst ServerTime       = require('./server_time');\nconst BinarySocket     = require('./socket_base');\nconst getElementById   = require('../common_functions').getElementById;\nconst isVisible        = require('../common_functions').isVisible;\nconst getLanguage      = require('../language').get;\nconst State            = require('../storage').State;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst getAppId         = require('../../config').getAppId;\n\nconst GTM = (() => {\n    const isGtmApplicable = () => (/^(1|1098|14473|15284|16303|15265|16929)$/.test(getAppId()));\n\n    const getCommonVariables = () => ({\n        country_ip: State.getResponse('website_status.clients_country'),\n        language  : getLanguage(),\n        pageTitle : pageTitle(),\n        pjax      : State.get('is_loaded_by_pjax'),\n        url       : document.URL,\n        ...ClientBase.isLoggedIn() && {\n            visitorId: ClientBase.get('loginid'),\n            bom_email: ClientBase.get('email'),\n        },\n    });\n\n    const pushDataLayer = (data) => {\n        if (isGtmApplicable() && !Login.isLoginPages()) {\n            dataLayer.push({\n                ...getCommonVariables(),\n                ...data,\n            });\n        }\n    };\n\n    const pageTitle = () => {\n        const t = /^.+[:-]\\s*(.+)$/.exec(document.title);\n        return t && t[1] ? t[1] : document.title;\n    };\n\n    const eventHandler = (get_settings) => {\n        if (!isGtmApplicable()) return;\n        const login_event       = localStorage.getItem('GTM_login');\n        const is_new_account    = localStorage.getItem('GTM_new_account') === '1';\n\n        localStorage.removeItem('GTM_login');\n        localStorage.removeItem('GTM_new_account');\n\n        const affiliate_token = Cookies.getJSON('affiliate_tracking');\n        if (affiliate_token) {\n            pushDataLayer({ bom_affiliate_token: affiliate_token.t });\n        }\n\n        // Get current time (moment, set by server), else fallback to client time\n        const moment_now = window.time || moment().utc();\n        const data = {\n            visitorId         : ClientBase.get('loginid'),\n            bom_account_type  : ClientBase.getAccountType(),\n            bom_currency      : ClientBase.get('currency'),\n            bom_country       : get_settings.country,\n            bom_country_abbrev: get_settings.country_code,\n            bom_email         : get_settings.email,\n            url               : window.location.href,\n            bom_today         : moment_now.unix(),\n        };\n\n        if (is_new_account) {\n            data.event = 'new_account';\n            data.bom_date_joined = data.bom_today;\n        }\n\n        if (!ClientBase.get('is_virtual')) {\n            data.bom_age       = moment_now.diff(moment.unix(get_settings.date_of_birth).utc(), 'year');\n            data.bom_firstname = get_settings.first_name;\n            data.bom_lastname  = get_settings.last_name;\n            data.bom_phone     = get_settings.phone;\n        }\n\n        if (login_event) {\n            data.event = login_event;\n            BinarySocket.wait('mt5_login_list').then((response) => {\n                (response.mt5_login_list || []).forEach((obj) => {\n                    const acc_type = (ClientBase.getMT5AccountType(obj.group) || '')\n                        .replace('real_vanuatu', 'financial').replace('vanuatu_', '').replace(/costarica|svg/, 'gaming'); // i.e. financial_cent, demo_cent, demo_gaming, real_gaming\n                        // TODO [->svg]\n                    if (acc_type) {\n                        data[`mt5_${acc_type}_id`] = obj.login;\n                    }\n                });\n                pushDataLayer(data);\n            });\n        } else {\n            pushDataLayer(data);\n        }\n\n        // check if there are any transactions in the last 30 days for UX interview selection\n        BinarySocket.send({ statement: 1, limit: 1 }).then((response) => {\n            const last_transaction_timestamp = getPropertyValue(response, ['statement', 'transactions', '0', 'transaction_time']);\n            pushDataLayer({\n                bom_transaction_in_last_30d: !!last_transaction_timestamp && moment(last_transaction_timestamp * 1000).isAfter(ServerTime.get().subtract(30, 'days')),\n            });\n        });\n    };\n\n    const pushPurchaseData = (response) => {\n        if (!isGtmApplicable() || ClientBase.get('is_virtual')) return;\n        const buy = response.buy;\n        if (!buy) return;\n        const req  = response.echo_req.passthrough;\n        const data = {\n            event             : 'buy_contract',\n            bom_ui            : 'legacy',\n            bom_symbol        : req.symbol,\n            bom_market        : getElementById('contract_markets').value,\n            bom_currency      : req.currency,\n            bom_contract_type : req.contract_type,\n            bom_contract_id   : buy.contract_id,\n            bom_transaction_id: buy.transaction_id,\n            bom_buy_price     : buy.buy_price,\n            bom_payout        : buy.payout,\n        };\n        Object.assign(data, {\n            bom_amount     : req.amount,\n            bom_basis      : req.basis,\n            bom_expiry_type: getElementById('expiry_type').value,\n        });\n        if (data.bom_expiry_type === 'duration') {\n            Object.assign(data, {\n                bom_duration     : req.duration,\n                bom_duration_unit: req.duration_unit,\n            });\n        }\n        if (isVisible(getElementById('barrier'))) {\n            data.bom_barrier = req.barrier;\n        } else if (isVisible(getElementById('barrier_high'))) {\n            data.bom_barrier_high = req.barrier;\n            data.bom_barrier_low  = req.barrier2;\n        }\n        if (isVisible(getElementById('prediction'))) {\n            data.bom_prediction = req.barrier;\n        }\n\n        pushDataLayer(data);\n    };\n\n    const mt5NewAccount = (response) => {\n        const acc_type = response.mt5_new_account.mt5_account_type ?\n            `${response.mt5_new_account.account_type}_${response.mt5_new_account.mt5_account_type}` : // financial_cent, demo_cent, ...\n            `${response.mt5_new_account.account_type === 'demo' ? 'demo' : 'real'}_gaming`;           // demo_gaming, real_gaming\n\n        const gtm_data = {\n            event          : 'mt5_new_account',\n            bom_email      : ClientBase.get('email'),\n            bom_country    : State.getResponse('get_settings.country'),\n            mt5_last_signup: acc_type,\n        };\n\n        gtm_data[`mt5_${acc_type}_id`] = response.mt5_new_account.login;\n\n        if (/demo/.test(acc_type) && !ClientBase.get('is_virtual')) {\n            gtm_data.visitorId = ClientBase.getAccountOfType('virtual').loginid;\n        }\n\n        pushDataLayer(gtm_data);\n    };\n\n    // Pushes deposit & withdrawal data from transaction-stream to GTM\n    const pushTransactionData = (response, extra_data = {}) => {\n        if (!isGtmApplicable() || ClientBase.get('is_virtual')) return;\n        if (!response.transaction || !response.transaction.action) return;\n        if (!['deposit', 'withdrawal'].includes(response.transaction.action)) return;\n \n        const moment_now  = window.time || moment().utc();\n        const storage_key = 'GTM_transactions';\n        \n        // Remove values from prev days so localStorage doesn't grow to infinity\n        let gtm_transactions = JSON.parse(localStorage.getItem(storage_key)) || {};\n        if (Object.prototype.hasOwnProperty.call(gtm_transactions, 'timestamp')) {\n            if (moment_now.isAfter(moment.unix(gtm_transactions.timestamp).utc(), 'day')) {\n                localStorage.removeItem(storage_key);\n                gtm_transactions = { timestamp: moment_now.unix() };\n            }\n        }\n        const transactions_arr = gtm_transactions.transactions || [];\n        if (!transactions_arr.includes(response.transaction.transaction_id)) {\n            const data = {\n                event           : 'transaction',\n                bom_account_type: ClientBase.getAccountType(),\n                bom_today       : moment_now.unix(),\n                transaction     : {\n                    id     : response.transaction.transaction_id,\n                    type   : response.transaction.action,\n                    time   : response.transaction.transaction_time,\n                    amount : response.transaction.amount,\n                    balance: response.transaction.balance,\n                },\n            };\n            Object.assign(data, extra_data);\n            pushDataLayer(data);\n\n            transactions_arr.push(response.transaction.transaction_id);\n            gtm_transactions.transactions = transactions_arr;\n            gtm_transactions.timestamp    = gtm_transactions.timestamp || moment_now.unix();\n\n            localStorage.setItem(storage_key, JSON.stringify(gtm_transactions));\n        }\n    };\n\n    return {\n        pushDataLayer,\n        eventHandler,\n        pushPurchaseData,\n        pushTransactionData,\n        mt5NewAccount,\n        setLoginFlag: (event_name) => { if (isGtmApplicable()) localStorage.setItem('GTM_login', event_name); },\n    };\n})();\n\nmodule.exports = GTM;\n","const getLanguage      = require('../language').get;\nconst localize         = require('../localize').localize;\nconst getPropertyValue = require('../utility').getPropertyValue;\n\nlet currencies_config = {};\n\nconst getTextFormat = (number, currency) => `${currency} ${addComma(number, getDecimalPlaces(currency), isCryptocurrency(currency))}`;\n\nconst formatMoney = (currency_value, amount, exclude_currency, decimals = 0, minimumFractionDigits = 0) => {\n    let money = amount;\n    if (money) money = String(money).replace(/,/g, '');\n    const sign           = money && Number(money) < 0 ? '-' : '';\n    const decimal_places = decimals || getDecimalPlaces(currency_value);\n\n    money = isNaN(money) ? 0 : Math.abs(money);\n    if (typeof Intl !== 'undefined') {\n        const options = {\n            minimumFractionDigits: minimumFractionDigits || decimal_places,\n            maximumFractionDigits: decimal_places,\n        };\n        money = new Intl.NumberFormat(getLanguage().toLowerCase().replace('_', '-'), options).format(money);\n    } else {\n        money = addComma(money, decimal_places);\n    }\n\n    return sign + (exclude_currency ? '' : formatCurrency(currency_value)) + money;\n};\n\nconst formatCurrency = currency => `<span class=\"symbols ${(currency || '').toLowerCase()}\"></span>`;\n\nconst addComma = (num, decimal_points, is_crypto) => {\n    let number = String(num || 0).replace(/,/g, '');\n    if (typeof decimal_points !== 'undefined') {\n        number = (+number).toFixed(decimal_points);\n    }\n    if (is_crypto) {\n        number = parseFloat(+number);\n    }\n\n    return number.toString().replace(/(^|[^\\w.])(\\d{4,})/g, ($0, $1, $2) => (\n        $1 + $2.replace(/\\d(?=(?:\\d\\d\\d)+(?!\\d))/g, '$&,')\n    ));\n};\n\nconst calcDecimalPlaces = (currency) => isCryptocurrency(currency) ? 8 : 2;\n\nconst getDecimalPlaces = (currency) => (\n    // need to check currencies_config[currency] exists instead of || in case of 0 value\n    currencies_config[currency] ? getPropertyValue(currencies_config, [currency, 'fractional_digits']) : calcDecimalPlaces(currency)\n);\n\nconst setCurrencies = (website_status) => {\n    currencies_config = website_status.currencies_config;\n};\n\n// (currency in crypto_config) is a back-up in case website_status doesn't include the currency config, in some cases where it's disabled\nconst isCryptocurrency = currency => /crypto/i.test(getPropertyValue(currencies_config, [currency, 'type'])) || (currency in CryptoConfig.get());\n\nconst CryptoConfig = (() => {\n    let crypto_config;\n\n    const initCryptoConfig = () => ({\n        BTC: { name: localize('Bitcoin'),       min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        BCH: { name: localize('Bitcoin Cash'),  min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        ETH: { name: localize('Ether'),         min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        ETC: { name: localize('Ether Classic'), min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        LTC: { name: localize('Litecoin'),      min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        UST: { name: localize('Tether'),        min_withdrawal: 0.02,  pa_max_withdrawal: 2000, pa_min_withdrawal: 10 },\n        USB: { name: localize('Binary Coin'),   min_withdrawal: 0.02,  pa_max_withdrawal: 2000, pa_min_withdrawal: 10 },\n    });\n\n    return {\n        get: () => {\n            if (!crypto_config) {\n                crypto_config = initCryptoConfig();\n            }\n            return crypto_config;\n        },\n    };\n})();\n\nconst getMinWithdrawal = currency => (isCryptocurrency(currency) ? (getPropertyValue(CryptoConfig.get(), [currency, 'min_withdrawal']) || 0.002) : 1);\n\n/**\n * Returns the transfer limits for the account.\n * @param currency\n * @param {string} max|undefined\n * @returns numeric|undefined\n */\nconst getTransferLimits = (currency, which) => {\n    const transfer_limits = getPropertyValue(currencies_config, [currency, 'transfer_between_accounts', 'limits']) || getMinWithdrawal(currency);\n    const decimals        = getDecimalPlaces(currency);\n    if (which === 'max') {\n        return transfer_limits.max ? transfer_limits.max.toFixed(decimals) : undefined;\n    }\n\n    return transfer_limits.min ? transfer_limits.min.toFixed(decimals) : undefined;\n};\n\nconst getTransferFee = (currency_from, currency_to) => {\n    const transfer_fee = getPropertyValue(currencies_config, [currency_from, 'transfer_between_accounts', 'fees', currency_to]);\n    return `${typeof transfer_fee === 'undefined' ? '1' : transfer_fee}%`;\n};\n\n// returns in a string format, e.g. '0.00000001'\nconst getMinimumTransferFee = (currency) => {\n    const decimals = getDecimalPlaces(currency);\n    return `${currency} ${(1 / Math.pow(10, decimals)).toFixed(decimals)}`; // we need toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\n};\n\n// @param {String} limit = max|min\nconst getPaWithdrawalLimit = (currency, limit) => {\n    if (isCryptocurrency(currency)) {\n        return getPropertyValue(CryptoConfig.get(), [currency, `pa_${limit}_withdrawal`]); // pa_min_withdrawal and pa_max_withdrawal used here\n    }\n    return limit === 'max' ? 2000 : 10; // limits for fiat currency\n};\n\nconst getCurrencyName = currency => getPropertyValue(CryptoConfig.get(), [currency, 'name']) || '';\n\nconst getMinPayout = currency => getPropertyValue(currencies_config, [currency, 'stake_default']);\n\nmodule.exports = {\n    formatMoney,\n    formatCurrency,\n    addComma,\n    getDecimalPlaces,\n    setCurrencies,\n    isCryptocurrency,\n    getCurrencyName,\n    getMinWithdrawal,\n    getTransferLimits,\n    getTransferFee,\n    getMinimumTransferFee,\n    getTextFormat,\n    getMinPayout,\n    getPaWithdrawalLimit,\n    getCurrencies: () => currencies_config,\n};\n","const Cookies          = require('js-cookie');\nconst getPropertyValue = require('./utility').getPropertyValue;\nconst isEmptyObject    = require('./utility').isEmptyObject;\nconst isProduction     = require('../config').isProduction;\n\nconst getObject = function (key) {\n    return JSON.parse(this.getItem(key) || '{}');\n};\n\nconst setObject = function (key, value) {\n    if (value && value instanceof Object) {\n        this.setItem(key, JSON.stringify(value));\n    }\n};\n\nif (typeof Storage !== 'undefined') {\n    Storage.prototype.getObject = getObject;\n    Storage.prototype.setObject = setObject;\n}\n\nconst isStorageSupported = (storage) => {\n    if (typeof storage === 'undefined') {\n        return false;\n    }\n\n    const test_key = 'test';\n    try {\n        storage.setItem(test_key, '1');\n        storage.removeItem(test_key);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nconst Store = function (storage) {\n    this.storage           = storage;\n    this.storage.getObject = getObject;\n    this.storage.setObject = setObject;\n};\n\nStore.prototype = {\n    get(key) {\n        return this.storage.getItem(key) || undefined;\n    },\n    set(key, value) {\n        if (typeof value !== 'undefined') {\n            this.storage.setItem(key, value);\n        }\n    },\n    getObject(key) {\n        return typeof this.storage.getObject === 'function' // Prevent runtime error in IE\n            ? this.storage.getObject(key)\n            : JSON.parse(this.storage.getItem(key) || '{}');\n    },\n    setObject(key, value) {\n        if (typeof this.storage.setObject === 'function') { // Prevent runtime error in IE\n            this.storage.setObject(key, value);\n        } else {\n            this.storage.setItem(key, JSON.stringify(value));\n        }\n    },\n    remove(key) { this.storage.removeItem(key); },\n    clear()     { this.storage.clear(); },\n};\n\nconst InScriptStore = function (object) {\n    this.store = typeof object !== 'undefined' ? object : {};\n};\n\nInScriptStore.prototype = {\n    get(key) {\n        return getPropertyValue(this.store, key);\n    },\n    set(k, value, obj = this.store) {\n        let key = k;\n        if (!Array.isArray(key)) key = [key];\n        if (key.length > 1) {\n            if (!(key[0] in obj) || isEmptyObject(obj[key[0]])) obj[key[0]] = {};\n            this.set(key.slice(1), value, obj[key[0]]);\n        } else {\n            obj[key[0]] = value;\n        }\n    },\n    getObject(key) {\n        return JSON.parse(this.get(key) || '{}');\n    },\n    setObject(key, value) {\n        this.set(key, JSON.stringify(value));\n    },\n    remove(...keys) {\n        keys.forEach((key) => { delete this.store[key]; });\n    },\n    clear()   { this.store = {}; },\n    has(key)  { return this.get(key) !== undefined; },\n    keys()    { return Object.keys(this.store); },\n    call(key) { if (typeof this.get(key) === 'function') this.get(key)(); },\n};\n\nconst State     = new InScriptStore();\nState.prototype = InScriptStore.prototype;\n/**\n * Shorthand function to get values from response object of State\n *\n * @param {String} pathname\n *     e.g. getResponse('authorize.currency') == get(['response', 'authorize', 'authorize', 'currency'])\n */\nState.prototype.getResponse = function (pathname) {\n    let path = pathname;\n    if (typeof path === 'string') {\n        const keys = path.split('.');\n        path = ['response', keys[0]].concat(keys);\n    }\n    return this.get(path);\n};\nState.set('response', {});\n\nconst CookieStorage = function (cookie_name, cookie_domain) {\n    const hostname = window.location.hostname;\n\n    this.initialized = false;\n    this.cookie_name = cookie_name;\n    this.domain      = cookie_domain || (isProduction() ? `.${hostname.split('.').slice(-2).join('.')}` : hostname);\n    this.path        = '/';\n    this.expires     = new Date('Thu, 1 Jan 2037 12:00:00 GMT');\n    this.value       = {};\n};\n\nCookieStorage.prototype = {\n    read() {\n        const cookie_value = Cookies.get(this.cookie_name);\n        try {\n            this.value = cookie_value ? JSON.parse(cookie_value) : {};\n        } catch (e) {\n            this.value = {};\n        }\n        this.initialized = true;\n    },\n    write(val, expireDate, isSecure) {\n        if (!this.initialized) this.read();\n        this.value = val;\n        if (expireDate) this.expires = expireDate;\n        Cookies.set(this.cookie_name, this.value, {\n            expires: this.expires,\n            path   : this.path,\n            domain : this.domain,\n            secure : !!isSecure,\n        });\n    },\n    get(key) {\n        if (!this.initialized) this.read();\n        return this.value[key];\n    },\n    set(key, val) {\n        if (!this.initialized) this.read();\n        this.value[key] = val;\n        Cookies.set(this.cookie_name, this.value, {\n            expires: new Date(this.expires),\n            path   : this.path,\n            domain : this.domain,\n        });\n    },\n    remove() {\n        Cookies.remove(this.cookie_name, {\n            path  : this.path,\n            domain: this.domain,\n        });\n    },\n};\n\nconst removeCookies = (...cookie_names) => {\n    const domains = [\n        `.${document.domain.split('.').slice(-2).join('.')}`,\n        `.${document.domain}`,\n    ];\n\n    let parent_path = window.location.pathname.split('/', 2)[1];\n    if (parent_path !== '') {\n        parent_path = `/${parent_path}`;\n    }\n\n    cookie_names.forEach((c) => {\n        Cookies.remove(c, { path: '/', domain: domains[0] });\n        Cookies.remove(c, { path: '/', domain: domains[1] });\n        Cookies.remove(c);\n        if (new RegExp(c).test(document.cookie) && parent_path) {\n            Cookies.remove(c, { path: parent_path, domain: domains[0] });\n            Cookies.remove(c, { path: parent_path, domain: domains[1] });\n            Cookies.remove(c, { path: parent_path });\n        }\n    });\n};\n\nlet SessionStore,\n    LocalStore;\n\nif (isStorageSupported(window.localStorage)) {\n    LocalStore = new Store(window.localStorage);\n}\nif (isStorageSupported(window.sessionStorage)) {\n    SessionStore = new Store(window.sessionStorage);\n}\n\nif (!LocalStore) {\n    LocalStore = new InScriptStore();\n}\nif (!SessionStore) {\n    SessionStore = new InScriptStore();\n}\n\nmodule.exports = {\n    isStorageSupported,\n    CookieStorage,\n    removeCookies,\n    State,\n    SessionStore,\n    LocalStore,\n};\n","const urlForLanguage             = require('./language').urlFor;\nconst urlLang                    = require('./language').urlLang;\nconst getCurrentProductionDomain = require('../config').getCurrentProductionDomain;\nrequire('url-polyfill');\n\nconst Url = (() => {\n    let location_url,\n        static_host;\n\n    const reset = () => {\n        location_url = window ? window.location : location_url;\n    };\n\n    const params = (href) => {\n        const arr_params = [];\n        const parsed     = ((href ? new URL(href) : location_url).search || '').substr(1).split('&');\n        let p_l          = parsed.length;\n        while (p_l--) {\n            const param = parsed[p_l].split('=');\n            arr_params.push(param);\n        }\n        return arr_params;\n    };\n\n    const paramsHash = (href) => {\n        const param_hash = {};\n        const arr_params = params(href);\n        let param        = arr_params.length;\n        while (param--) {\n            if (arr_params[param][0]) {\n                param_hash[arr_params[param][0]] = arr_params[param][1] || '';\n            }\n        }\n        return param_hash;\n    };\n\n    const normalizePath = path => (path ? path.replace(/(^\\/|\\/$|[^a-zA-Z0-9-_/])/g, '') : '');\n\n    const urlFor = (path, pars, language, should_change_to_legacy = false) => {\n        const lang = (language || urlLang()).toLowerCase();\n        // url language might differ from passed language, so we will always replace using the url language\n        const url_lang = (language ? urlLang().toLowerCase() : lang);\n        const url = window.location.href;\n        let domain = url.substring(0, url.indexOf(`/${url_lang}/`) + url_lang.length + 2);\n        if (should_change_to_legacy) {\n            domain = domain.replace(/deriv\\.app/, 'binary\\.com');\n        }\n        const new_url = `${domain}${(normalizePath(path) || 'home')}.html${(pars ? `?${pars}` : '')}`;\n        // replace old lang with new lang\n        return urlForLanguage(lang, new_url);\n    };\n\n    const default_domain = 'binary.com';\n    const host_map = { // the exceptions regarding updating the URLs\n        'bot.binary.com'       : 'www.binary.bot',\n        'developers.binary.com': 'developers.binary.com', // same, shouldn't change\n        'academy.binary.com'   : 'academy.binary.com',\n        'tech.binary.com'      : 'tech.binary.com',\n        'blog.binary.com'      : 'blog.binary.com',\n    };\n\n    const urlForCurrentDomain = (href) => {\n        const current_domain = getCurrentProductionDomain();\n\n        if (!current_domain) {\n            return href; // don't change when domain is not supported\n        }\n\n        const url_object = new URL(href);\n        if (Object.keys(host_map).includes(url_object.hostname)) {\n            url_object.hostname = host_map[url_object.hostname];\n        } else if (url_object.hostname.indexOf(default_domain) !== -1) {\n            // to keep all non-Binary links unchanged, we use default domain for all Binary links in the codebase (javascript and templates)\n            url_object.hostname = url_object.hostname.replace(new RegExp(`\\\\.${default_domain}`, 'i'), `.${current_domain}`);\n        } else {\n            return href;\n        }\n\n        return url_object.href;\n    };\n\n    const urlForStatic = (path = '') => {\n        if (!static_host || static_host.length === 0) {\n            static_host = document.querySelector('script[src*=\"vendor.min.js\"]');\n            if (static_host) {\n                static_host = static_host.getAttribute('src');\n            }\n\n            if (static_host && static_host.length > 0) {\n                static_host = static_host.substr(0, static_host.indexOf('/js/') + 1);\n            } else {\n                static_host = Url.websiteUrl();\n            }\n        }\n\n        return static_host + path.replace(/(^\\/)/g, '');\n    };\n\n    return {\n        reset,\n        paramsHash,\n        urlFor,\n        urlForCurrentDomain,\n        urlForStatic,\n\n        param          : name => paramsHash()[name],\n        websiteUrl     : () => `${location.protocol}//${location.hostname}/`,\n        getHostMap     : () => host_map,\n        resetStaticHost: () => { static_host = undefined; },\n    };\n})();\n\nmodule.exports = Url;\n","const moment   = require('moment');\nconst template = require('./utility').template;\n\nconst Localize = (() => {\n    let localized_texts;\n\n    const localizeForLang = (lang) => {\n        localized_texts = texts_json[lang.toUpperCase()];\n        moment.locale(lang.toLowerCase());\n    };\n\n    const doLocalize = (txt, params) => {\n        let text = txt;\n\n        const index = text.replace(/[\\s|.]/g, '_');\n\n        text = (localized_texts && localized_texts[index]) || text;\n\n        // only use template when explicitly required\n        return params ? template(text, params) : text;\n    };\n\n    const localize = (text, params) => (\n        Array.isArray(text) ? text.map(t => doLocalize(t, params)) : doLocalize(text, params)\n    );\n\n    /**\n     * Localizes the text, but doesn't replace placeholders\n     * The localized text through this method should replace the placeholders later. e.g. using template()\n     * @param  {String} text - text to be localized\n     * @return {String} the localized text having the original placeholders ([_1], ...)\n     */\n    const localizeKeepPlaceholders = (text) => (\n        localize(\n            text /* localize-ignore */,\n            [...new Set(text.match(/\\[_(\\d+)]/g).sort())]\n        )\n    );\n\n    return {\n        localize,\n        localizeKeepPlaceholders,\n        forLang: localizeForLang,\n    };\n})();\n\nmodule.exports = Localize;\n","const moment        = require('moment');\nconst urlForStatic  = require('./url').urlForStatic;\nconst getStaticHash = require('./utility').getStaticHash;\n\n// only reload if it's more than 10 minutes since the last reload\nconst shouldForceReload = last_reload => !last_reload || +last_reload + (10 * 60 * 1000) < moment().valueOf();\n\n// calling this method is handled by GTM tags\nconst checkNewRelease = () => {\n    const last_reload = localStorage.getItem('new_release_reload_time');\n    if (!shouldForceReload(last_reload)) return false;\n    localStorage.setItem('new_release_reload_time', moment().valueOf());\n\n    const current_hash = getStaticHash();\n    const xhttp        = new XMLHttpRequest();\n\n    xhttp.onreadystatechange = () => {\n        if (+xhttp.readyState === 4 && +xhttp.status === 200) {\n            const latest_hash = xhttp.responseText;\n            if (latest_hash && current_hash && latest_hash !== current_hash) {\n                window.location.reload(true);\n            }\n        }\n    };\n    xhttp.open('GET', urlForStatic(`version?${Math.random().toString(36).slice(2)}`), true);\n    xhttp.send();\n\n    return true;\n};\n\nmodule.exports = {\n    shouldForceReload,\n    checkNewRelease,\n};\n","if (!Element.prototype.matches) {\n    Element.prototype.matches =\n        Element.prototype.matchesSelector ||\n        Element.prototype.mozMatchesSelector ||\n        Element.prototype.msMatchesSelector ||\n        Element.prototype.oMatchesSelector ||\n        Element.prototype.webkitMatchesSelector ||\n        function(s) {\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n}\n","const BinarySocket = require('./socket_base');\nconst localize     = require('../localize').localize;\n\n/*\n * Monitors the network status and initialises the WebSocket connection\n * 1. online : check the WS status (init/send: blink after timeout, open/message: online)\n * 2. offline: it is offline\n */\nconst NetworkMonitorBase = (() => {\n    const StatusConfig = (() => {\n        let status_config;\n\n        const initStatusConfig = () => ({\n            online  : { class: 'online',  tooltip: localize('Online') },\n            offline : { class: 'offline', tooltip: localize('Offline') },\n            blinking: { class: 'blinker', tooltip: localize('Connecting to server') },\n        });\n\n        return {\n            get: (status) => {\n                if (!status_config) {\n                    status_config = initStatusConfig();\n                }\n                return status_config[status];\n            },\n        };\n    })();\n\n    const pendings = {};\n    const pending_keys = {\n        ws_init   : 'ws_init',\n        ws_request: 'ws_request',\n    };\n    const pending_timeouts = {\n        [pending_keys.ws_init]   : 5000,\n        [pending_keys.ws_request]: 10000,\n    };\n\n    let ws_config,\n        network_status,\n        updateUI;\n\n    const init = (socket_general_functions, fncUpdateUI) => {\n        updateUI  = fncUpdateUI;\n        ws_config = Object.assign({ wsEvent, isOnline }, socket_general_functions);\n\n        if ('onLine' in navigator) {\n            window.addEventListener('online',  setStatus);\n            window.addEventListener('offline', setStatus);\n        } else { // if not supported, default to online and fallback to WS checks\n            navigator.onLine = true;\n        }\n\n        if (isOnline()) {\n            BinarySocket.init(ws_config);\n        }\n\n        setStatus(isOnline() ? 'online' : 'offline');\n    };\n\n    const isOnline = () => navigator.onLine;\n\n    const wsReconnect = () => {\n        if (isOnline() && BinarySocket.hasReadyState(2, 3)) { // CLOSING or CLOSED\n            BinarySocket.init(ws_config);\n        } else {\n            BinarySocket.send({ ping: 1 }); // trigger a request to get stable status sooner\n        }\n    };\n\n    const setStatus = (status) => {\n        if (!isOnline()) {\n            network_status = 'offline';\n        } else if (pending_keys[status] || network_status === 'offline') {\n            network_status = 'blinking';\n            wsReconnect();\n        } else {\n            network_status = 'online';\n        }\n\n        if (typeof updateUI === 'function') {\n            updateUI(StatusConfig.get(network_status), isOnline());\n        }\n    };\n\n    const ws_events_map = {\n        init   : () => setPending(pending_keys.ws_init),\n        open   : () => clearPendings(pending_keys.ws_init),\n        send   : () => setPending(pending_keys.ws_request),\n        message: () => clearPendings(),\n        close  : () => setPending(pending_keys.ws_init),\n    };\n\n    const wsEvent = (event) => {\n        if (typeof ws_events_map[event] === 'function') {\n            ws_events_map[event]();\n        }\n    };\n\n    const setPending = (key) => {\n        if (!pendings[key]) {\n            pendings[key] = setTimeout(() => {\n                pendings[key] = undefined;\n                setStatus(key);\n            }, pending_timeouts[key]);\n        }\n    };\n\n    const clearPendings = (key) => {\n        const clear = (k) => {\n            clearTimeout(pendings[k]);\n            pendings[k] = undefined;\n            if (k === pending_keys.ws_request) {\n                setStatus('online');\n            }\n        };\n\n        if (key) {\n            clear(key);\n        } else {\n            Object.keys(pendings).forEach(clear);\n        }\n    };\n\n    return {\n        init,\n        wsEvent,\n    };\n})();\n\nmodule.exports = NetworkMonitorBase;\n","import BinarySocket   from './socket_base';\nimport {\n    cloneObject,\n    getPropertyValue,\n    isDeepEqual,\n    isEmptyObject }   from '../utility';\n\n/**\n * A layer over BinarySocket to handle subscribing to streaming calls\n * in order to keep track of subscriptions, manage forget, prevent multiple subscription at the same time, ...\n *\n * structure of the the subscription object is:\n * {\n *     1: { msg_type: 'proposal', request: { ... }, stream_id: '...', subscribers: [ ... ] },\n *     2: ...\n * }\n * object keys: subscription_id that assigned to each subscription\n * msg_type   : msg_type of the request for faster filtering\n * request    : the request object, used to subscribe to the same stream when there is a new subscribe request with exactly the same values\n * stream_id  : id of the stream which stored from its response and used to forget the stream when needed\n * subscribers: an array of callbacks to dispatch the response to\n */\nconst SubscriptionManager = (() => {\n    const subscriptions    = {};\n    const forget_requested = {};\n\n    let subscription_id = 0;\n\n    /**\n     * To submit request for a new subscription\n     *\n     * @param {String}   msg_type             msg_type of the request\n     * @param {Object}   request_obj          the whole object of the request to be made\n     * @param {Function} fncCallback          callback function to pass the responses to\n     * @param {Boolean}  should_forget_first  when it's true: forgets the previous subscription, then subscribes after receiving the forget response (if any)\n     */\n    const subscribe = (msg_type, request_obj, fncCallback, should_forget_first = false) => {\n        if (should_forget_first) {\n            forget(msg_type, fncCallback).then(() => {\n                subscribe(msg_type, request_obj, fncCallback);\n            });\n            return;\n        }\n\n        let sub_id = Object.keys(subscriptions).find(id => isDeepEqual(request_obj, subscriptions[id].request));\n\n        if (!sub_id) {\n            sub_id = ++subscription_id;\n\n            subscriptions[sub_id] = {\n                msg_type,\n                request    : cloneObject(request_obj),\n                stream_id  : '',             // stream_id will be updated after receiving the response\n                subscribers: [fncCallback],\n            };\n\n            BinarySocket.send(request_obj, {\n                callback: (response) => dispatch(response, sub_id),\n            });\n        } else if (!hasCallbackFunction(sub_id, fncCallback)) {\n            // there is already an active subscription for the very same request which fncCallback is not subscribed to it yet\n            subscriptions[sub_id].subscribers.push(fncCallback);\n        }\n    };\n\n    /**\n     * Add subscription without subscribers from request\n     * E.g. open subscription to proposal_open_contract on buy request\n     * @param {String}   msg_type               msg_type of the subscription\n     * @param {Object}   send_request           the object of the request to be made\n     * @param {Object}   subscribe_request      the object of the subscription request\n     * @param {Array}    subscription_props     Array of prop strings to add to subscribe_request from initial request, e.g. contract_id\n     */\n    const addSubscriptionFromRequest = (msg_type, send_request, subscribe_request, subscription_props) =>\n        new Promise((resolve) => {\n            let sub_id;\n            let is_stream = false;\n\n            BinarySocket.send(send_request, {\n                callback: (response) => {\n                    if (response.error) {\n                        return resolve(response);\n                    }\n                    if (!is_stream) {\n                        is_stream = true;\n                        sub_id    = ++subscription_id;\n\n                        if (subscription_props && Array.isArray(subscription_props)) {\n                            subscription_props.forEach((prop) => {\n                                if (response[response.msg_type][prop]) {\n                                    subscribe_request[prop] = response[response.msg_type][prop];\n                                }\n                            });\n                        }\n\n                        subscriptions[sub_id] = {\n                            msg_type,\n                            request    : cloneObject(subscribe_request),\n                            stream_id  : '',             // stream_id will be updated after receiving the response\n                            subscribers: [],\n                        };\n                        return resolve(response);\n                    }\n                    return dispatch(response, sub_id);\n                },\n            });\n        });\n\n    // dispatches the response to subscribers of the specific subscription id (internal use only)\n    const dispatch = (response, sub_id) => {\n        const stream_id = getPropertyValue(response, [response.msg_type, 'id']) || getPropertyValue(response.subscription, ['id']);\n\n        if (!subscriptions[sub_id]) {\n            if (!forget_requested[stream_id]) {\n                forgetStream(stream_id);\n            }\n            return;\n        }\n\n        const sub_info = subscriptions[sub_id];\n        // set the stream_id\n        if (!sub_info.stream_id && stream_id) {\n            sub_info.stream_id = stream_id;\n        }\n\n        // callback subscribers\n        const subscribers = sub_info.subscribers;\n        if (subscribers.length) {\n            if (\n                // it is the first response\n                !sub_info.stream_id &&\n                    (\n                        // the first response returned error\n                        response.error\n                        || (\n                            // not a subscription (i.e. subscribed proposal_open_contract for an expired contract)\n                            // also to filter out streams with no stream id but later it will continue streaming (i.e. proposal_open_contract without contract id)\n                            !isEmptyObject(response[response.msg_type]) &&\n                            // check msg_type to filter out those calls which don't return stream `id` on first response (tick_history, ...)\n                            response.msg_type === sub_info.msg_type\n                        )\n                    )\n                ||\n                // remove when response isn't first and response has no stream_id\n                !stream_id && sub_info.stream_id\n            ) {\n                delete subscriptions[sub_id];\n            }\n            sub_info.subscribers.forEach((fnc) => {\n                fnc(response);\n            });\n        } else {\n            delete subscriptions[sub_id];\n            forgetStream(sub_info.stream_id);\n        }\n    };\n\n    /**\n     * To forget a subscription which submitted for a specific callback function\n     *\n     * @param  {String}   msg_type      msg_type to forget\n     * @param  {Function} fncCallback   the same function passed to subscribe()\n     *     (this is the way to distinguish between different subscribers of the same stream at the same time)\n     * @param  {Object}   match_values  optional, to only forget subscriptions having request that \"contains\" provided values\n     * @return {Promise}  the promise object of all possible forget requests\n     */\n    const forget = (msg_type, fncCallback, match_values) => {\n        if (typeof fncCallback !== 'function') {\n            throw new Error(`Missing callback function. To forget all subscriptions of msg_type: ${msg_type}, please call forgetAll().`);\n        }\n\n        // find corresponding id(s)\n        const sub_ids = Object.keys(subscriptions).filter(id => (\n            subscriptions[id].msg_type === msg_type &&\n            hasCallbackFunction(id, fncCallback)\n        ));\n\n        const forgets_list = [];\n        sub_ids.forEach((id) => {\n            if (match_values && !hasValues(subscriptions[id].request, match_values)) {\n                return;\n            }\n            const stream_id = subscriptions[id].stream_id;\n            if (stream_id && subscriptions[id].subscribers.length === 1) {\n                delete subscriptions[id];\n                forgets_list.push(forgetStream(stream_id));\n            } else {\n                // there are other subscribers, or for some reason there is no stream_id:\n                // (i.e. returned an error, or forget() being called before the first response)\n                subscriptions[id].subscribers.splice(subscriptions[id].subscribers.indexOf(fncCallback), 1);\n            }\n        });\n        return Promise.all(forgets_list);\n    };\n\n    /**\n     * To forget all active subscriptions of a list of msg_types\n     *\n     * @param  {String}  msg_types  list of msg_types to forget\n     * @return {Promise} the promise object of all possible forget_all requests\n     */\n    const forgetAll = (...msg_types) => {\n        const types_to_forget = {};\n\n        msg_types.forEach((msg_type) => {\n            const sub_ids = Object.keys(subscriptions).filter(id => subscriptions[id].msg_type === msg_type);\n            if (sub_ids.length) {\n                sub_ids.forEach((id) => {\n                    delete subscriptions[id];\n                });\n                types_to_forget[msg_type] = true;\n            }\n        });\n\n        return Promise.resolve(\n            !isEmptyObject(types_to_forget) ?\n                BinarySocket.send({ forget_all: Object.keys(types_to_forget) }) :\n                {}\n        );\n    };\n\n    const forgetStream = (stream_id) => {\n        forget_requested[stream_id] = true; // to prevent forgetting multiple times\n        return Promise.resolve(\n            stream_id ?\n                BinarySocket.send({ forget: stream_id }).then(() => { delete forget_requested[stream_id]; }) :\n                {}\n        );\n    };\n\n    const hasCallbackFunction = (sub_id, fncCallback) =>\n        (subscriptions[sub_id] && subscriptions[sub_id].subscribers.indexOf(fncCallback) !== -1);\n\n    const hasValues = (request_obj, values_obj) => (\n        typeof request_obj === 'object' &&\n        typeof values_obj  === 'object' &&\n        Object.keys(values_obj).every(key => request_obj[key] === values_obj[key])\n    );\n\n    return {\n        addSubscriptionFromRequest,\n        subscribe,\n        forget,\n        forgetAll,\n    };\n})();\n\nexport default SubscriptionManager;\n","const isMobile = () => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\nmodule.exports = {\n    isMobile,\n};\n","const Cookies       = require('js-cookie');\nconst CookieStorage = require('./storage').CookieStorage;\n\nconst Language = (() => {\n    const all_languages = {\n        ACH  : 'Translations',\n        EN   : 'English',\n        DE   : 'Deutsch',\n        ES   : 'Español',\n        FR   : 'Français',\n        ID   : 'Indonesia',\n        IT   : 'Italiano',\n        PL   : 'Polish',\n        PT   : 'Português',\n        RU   : 'Русский',\n        TH   : 'Thai',\n        VI   : 'Tiếng Việt',\n        ZH_CN: '简体中文',\n        ZH_TW: '繁體中文',\n    };\n    const default_language = 'EN';\n\n    const setCookieLanguage = (lang) => {\n        if (!Cookies.get('language') || lang) {\n            const cookie = new CookieStorage('language');\n            cookie.write((lang || getLanguage()).toUpperCase());\n        }\n    };\n\n    let url_lang = null;\n\n    const lang_regex = new RegExp(`^(${Object.keys(all_languages).join('|')})$`, 'i');\n\n    const languageFromUrl = (custom_url) => {\n        if (url_lang && !custom_url) return url_lang;\n        const url_params = (custom_url || window.location.href).split('/').slice(3);\n        const language   = (url_params.find(lang => lang_regex.test(lang)) || '');\n        if (!custom_url) {\n            url_lang = language;\n        }\n        return language;\n    };\n\n    let current_lang = null;\n\n    const getLanguage = () => {\n        if (/ach/i.test(current_lang) || /ach/i.test(languageFromUrl())) {\n            const crowdin_lang_key = 'jipt_language_code_binary-static';\n            const crowdin_lang     = localStorage.getItem(crowdin_lang_key) || Cookies.get(crowdin_lang_key); // selected language for in-context translation\n            if (crowdin_lang) {\n                current_lang = crowdin_lang.toUpperCase().replace('-', '_').toUpperCase();\n                if (document.body) {\n                    document.body.classList.add(current_lang); // set the body class removed by crowdin code\n                }\n            }\n        }\n        current_lang = (current_lang || (languageFromUrl() || Cookies.get('language') || default_language).toUpperCase());\n        return current_lang;\n    };\n\n    const urlForLanguage = (lang, url = window.location.href) =>\n        url.replace(new RegExp(`/${getLanguage()}/`, 'i'), `/${(lang || default_language).trim().toLowerCase()}/`);\n\n    return {\n        getAll   : () => all_languages,\n        setCookie: setCookieLanguage,\n        get      : getLanguage,\n        urlFor   : urlForLanguage,\n        urlLang  : languageFromUrl,\n        reset    : () => { url_lang = null; current_lang = null; },\n    };\n})();\n\nmodule.exports = Language;\n","const ClientBase       = require('./client_base');\nconst SocketCache      = require('./socket_cache');\nconst getLanguage      = require('../language').get;\nconst State            = require('../storage').State;\nconst cloneObject      = require('../utility').cloneObject;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst isEmptyObject    = require('../utility').isEmptyObject;\nconst PromiseClass     = require('../utility').PromiseClass;\nconst getAppId         = require('../../config').getAppId;\nconst getSocketURL     = require('../../config').getSocketURL;\n\n/*\n * An abstraction layer over native javascript WebSocket,\n * which provides additional functionality like\n * reopen the closed connection and process the buffered requests\n */\nconst BinarySocketBase = (() => {\n    let binary_socket;\n\n    let config               = {};\n    let buffered_sends       = [];\n    let req_id               = 0;\n    let wrong_app_id         = 0;\n    let is_available         = true;\n    let is_disconnect_called = false;\n    let is_connected_before  = false;\n\n    const socket_url = `${getSocketURL()}?app_id=${getAppId()}&l=${getLanguage()}`;\n    const timeouts   = {};\n    const promises   = {};\n\n    const no_duplicate_requests = [\n        'authorize',\n        'get_settings',\n        'residence_list',\n        'landing_company',\n        'payout_currencies',\n        'asset_index',\n    ];\n\n    const sent_requests = {\n        items : [],\n        clear : () => { sent_requests.items = []; },\n        has   : msg_type => sent_requests.items.indexOf(msg_type) >= 0,\n        add   : (msg_type) => { if (!sent_requests.has(msg_type)) sent_requests.items.push(msg_type); },\n        remove: (msg_type) => {\n            if (sent_requests.has(msg_type)) sent_requests.items.splice(sent_requests.items.indexOf(msg_type, 1));\n        },\n    };\n\n    const waiting_list = {\n        items: {},\n        add  : (msg_type, promise_obj) => {\n            if (!waiting_list.items[msg_type]) {\n                waiting_list.items[msg_type] = [];\n            }\n            waiting_list.items[msg_type].push(promise_obj);\n        },\n        resolve: (response) => {\n            const msg_type      = response.msg_type;\n            const this_promises = waiting_list.items[msg_type];\n            if (this_promises && this_promises.length) {\n                this_promises.forEach((pr) => {\n                    if (!waiting_list.another_exists(pr, msg_type)) {\n                        pr.resolve(response);\n                    }\n                });\n                waiting_list.items[msg_type] = [];\n            }\n        },\n        another_exists: (pr, msg_type) => (\n            Object.keys(waiting_list.items)\n                .some(type => (\n                    type !== msg_type &&\n                    waiting_list.items[type].indexOf(pr) !== -1\n                ))\n        ),\n    };\n\n    const clearTimeouts = () => {\n        Object.keys(timeouts).forEach((key) => {\n            clearTimeout(timeouts[key]);\n            delete timeouts[key];\n        });\n    };\n\n    const isReady = () => hasReadyState(1);\n\n    const isClose = () => !binary_socket || hasReadyState(2, 3);\n\n    const hasReadyState = (...states) => binary_socket && states.some(s => binary_socket.readyState === s);\n\n    const sendBufferedRequests = () => {\n        while (buffered_sends.length > 0 && is_available) {\n            const req_obj = buffered_sends.shift();\n            send(req_obj.request, req_obj.options);\n        }\n    };\n\n    const wait = (...msg_types) => {\n        const promise_obj = new PromiseClass();\n        let is_resolved   = true;\n        msg_types.forEach((msg_type) => {\n            const last_response = State.get(['response', msg_type]);\n            if (!last_response) {\n                if (msg_type !== 'authorize' || ClientBase.isLoggedIn()) {\n                    waiting_list.add(msg_type, promise_obj);\n                    is_resolved = false;\n                }\n            } else if (msg_types.length === 1) {\n                promise_obj.resolve(last_response);\n            }\n        });\n        if (is_resolved) {\n            promise_obj.resolve();\n        }\n        return promise_obj.promise;\n    };\n\n    /**\n     * @param {Object} data: request object\n     * @param {Object} options:\n     *      forced  : {boolean}  sends the request regardless the same msg_type has been sent before\n     *      msg_type: {string}   specify the type of request call\n     *      callback: {function} to call on response of streaming requests\n     */\n    const send = function (data, options = {}) {\n        const promise_obj = options.promise || new PromiseClass();\n\n        if (!data || isEmptyObject(data)) return promise_obj.promise;\n\n        const msg_type = options.msg_type || no_duplicate_requests.find(c => c in data);\n\n        // Fetch from cache\n        if (!options.forced) {\n            const response = SocketCache.get(data, msg_type);\n            if (response) {\n                State.set(['response', msg_type], cloneObject(response));\n                if (isReady() && is_available) { // make the request to keep the cache updated\n                    binary_socket.send(JSON.stringify(data));\n                }\n                promise_obj.resolve(response);\n                return promise_obj.promise;\n            }\n        }\n\n        // Fetch from state\n        if (!options.forced && msg_type && no_duplicate_requests.indexOf(msg_type) !== -1) {\n            const last_response = State.get(['response', msg_type]);\n            if (last_response) {\n                promise_obj.resolve(last_response);\n                return promise_obj.promise;\n            } else if (sent_requests.has(msg_type)) {\n                return wait(msg_type).then((response) => {\n                    promise_obj.resolve(response);\n                    return promise_obj.promise;\n                });\n            }\n        }\n\n        if (!data.req_id) {\n            data.req_id = ++req_id;\n        }\n        promises[data.req_id] = {\n            callback: (response) => {\n                if (typeof options.callback === 'function') {\n                    options.callback(response);\n                } else {\n                    promise_obj.resolve(response);\n                }\n            },\n            subscribe: !!data.subscribe,\n        };\n\n        if (isReady() && is_available && config.isOnline()) {\n            is_disconnect_called = false;\n            if (!getPropertyValue(data, 'passthrough') && !getPropertyValue(data, 'verify_email')) {\n                data.passthrough = {};\n            }\n\n            binary_socket.send(JSON.stringify(data));\n            config.wsEvent('send');\n            if (msg_type && !sent_requests.has(msg_type)) {\n                sent_requests.add(msg_type);\n            }\n        } else if (+data.time !== 1) { // Do not buffer all time requests\n            buffered_sends.push({ request: data, options: Object.assign(options, { promise: promise_obj }) });\n        }\n\n        return promise_obj.promise;\n    };\n\n    const init = (options) => {\n        if (wrong_app_id === getAppId()) {\n            return;\n        }\n        if (typeof options === 'object' && config !== options) {\n            config         = options;\n            buffered_sends = [];\n        }\n        clearTimeouts();\n        config.wsEvent('init');\n\n        if (isClose()) {\n            binary_socket = new WebSocket(socket_url);\n            State.set('response', {});\n        }\n\n        binary_socket.onopen = () => {\n            config.wsEvent('open');\n            if (ClientBase.isLoggedIn()) {\n                send({ authorize: ClientBase.get('token') }, { forced: true });\n            } else {\n                sendBufferedRequests();\n            }\n\n            if (typeof config.onOpen === 'function') {\n                config.onOpen(isReady());\n            }\n\n            if (typeof config.onReconnect === 'function' && is_connected_before) {\n                config.onReconnect();\n            }\n\n            if (!is_connected_before) {\n                is_connected_before = true;\n            }\n        };\n\n        binary_socket.onmessage = (msg) => {\n            config.wsEvent('message');\n            const response = msg.data ? JSON.parse(msg.data) : undefined;\n            if (response) {\n                SocketCache.set(response);\n                const msg_type = response.msg_type;\n\n                // store in State\n                if (!getPropertyValue(response, ['echo_req', 'subscribe']) || /balance|website_status/.test(msg_type)) {\n                    State.set(['response', msg_type], cloneObject(response));\n                }\n                // resolve the send promise\n                const this_req_id = response.req_id;\n                const pr          = this_req_id ? promises[this_req_id] : null;\n                if (pr && typeof pr.callback === 'function') {\n                    pr.callback(response);\n                    if (!pr.subscribe) {\n                        delete promises[this_req_id];\n                    }\n                }\n                // resolve the wait promise\n                waiting_list.resolve(response);\n\n                if (getPropertyValue(response, ['error', 'code']) === 'InvalidAppID') {\n                    wrong_app_id = getAppId();\n                }\n\n                if (typeof config.onMessage === 'function') {\n                    config.onMessage(response);\n                }\n            }\n        };\n\n        binary_socket.onclose = () => {\n            sent_requests.clear();\n            clearTimeouts();\n            config.wsEvent('close');\n\n            if (wrong_app_id !== getAppId() && typeof config.onDisconnect === 'function' && !is_disconnect_called) {\n                config.onDisconnect();\n                is_disconnect_called = true;\n            }\n        };\n    };\n\n    const clear = (msg_type) => {\n        buffered_sends = [];\n        if (msg_type) {\n            State.set(['response', msg_type], undefined);\n            sent_requests.remove(msg_type);\n        }\n    };\n\n    const availability = (status) => {\n        if (typeof status !== 'undefined') {\n            is_available = !!status;\n        }\n        return is_available;\n    };\n\n    return {\n        init,\n        wait,\n        send,\n        clear,\n        clearTimeouts,\n        availability,\n        hasReadyState,\n        sendBuffered      : sendBufferedRequests,\n        get               : () => binary_socket,\n        setOnDisconnect   : (onDisconnect) => { config.onDisconnect = onDisconnect; },\n        setOnReconnect    : (onReconnect) => { config.onReconnect = onReconnect; },\n        removeOnReconnect : () => { delete config.onReconnect; },\n        removeOnDisconnect: () => { delete config.onDisconnect; },\n    };\n})();\n\nmodule.exports = BinarySocketBase;\n","const moment           = require('moment');\nconst isCryptocurrency = require('./currency_base').isCryptocurrency;\nconst SocketCache      = require('./socket_cache');\nconst localize         = require('../localize').localize;\nconst LocalStore       = require('../storage').LocalStore;\nconst State            = require('../storage').State;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst isEmptyObject    = require('../utility').isEmptyObject;\n\nconst ClientBase = (() => {\n    const storage_key = 'client.accounts';\n    let client_object = {};\n    let current_loginid;\n\n    const init = () => {\n        current_loginid = LocalStore.get('active_loginid');\n        client_object   = getAllAccountsObject();\n    };\n\n    const isLoggedIn = () => (\n        !isEmptyObject(getAllAccountsObject()) &&\n        get('loginid') &&\n        get('token')\n    );\n\n    const isValidLoginid = () => {\n        if (!isLoggedIn()) return true;\n        const valid_login_ids = new RegExp('^(MX|MF|VRTC|MLT|CR|FOG)[0-9]+$', 'i');\n        return getAllLoginids().every(loginid => valid_login_ids.test(loginid));\n    };\n\n    /**\n     * Stores the client information in local variable and localStorage\n     *\n     * @param {String} key                 The property name to set\n     * @param {String|Number|Object} value The regarding value\n     * @param {String|null} loginid        The account to set the value for\n     */\n    const set = (key, value, loginid = current_loginid) => {\n        if (key === 'loginid' && value !== current_loginid) {\n            LocalStore.set('active_loginid', value);\n            current_loginid = value;\n        } else {\n            if (!(loginid in client_object)) {\n                client_object[loginid] = {};\n            }\n            client_object[loginid][key] = value;\n            LocalStore.setObject(storage_key, client_object);\n        }\n    };\n\n    /**\n     * Returns the client information\n     *\n     * @param {String|null} key     The property name to return the value from, if missing returns the account object\n     * @param {String|null} loginid The account to return the value from\n     */\n    const get = (key, loginid = current_loginid) => {\n        let value;\n        if (key === 'loginid') {\n            value = loginid || LocalStore.get('active_loginid');\n        } else {\n            const current_client = client_object[loginid] || getAllAccountsObject()[loginid] || client_object;\n\n            value = key ? current_client[key] : current_client;\n        }\n        if (!Array.isArray(value) && (+value === 1 || +value === 0 || value === 'true' || value === 'false')) {\n            value = JSON.parse(value || false);\n        }\n        return value;\n    };\n\n    const getAllAccountsObject = () => LocalStore.getObject(storage_key);\n\n    const getAllLoginids = () => Object.keys(getAllAccountsObject());\n\n    const getAccountType = (loginid = current_loginid) => {\n        let account_type;\n        if (/^VR/.test(loginid))          account_type = 'virtual';\n        else if (/^MF/.test(loginid))     account_type = 'financial';\n        else if (/^MLT|MX/.test(loginid)) account_type = 'gaming';\n        return account_type;\n    };\n\n    const isAccountOfType = (type, loginid = current_loginid, only_enabled = false) => {\n        const this_type   = getAccountType(loginid);\n        return ((\n            (type === 'virtual' && this_type === 'virtual') ||\n            (type === 'real'    && this_type !== 'virtual') ||\n            type === this_type) &&\n            (only_enabled ? !get('is_disabled', loginid) : true));\n    };\n\n    const getAccountOfType = (type, only_enabled) => {\n        const id = getAllLoginids().find(loginid => isAccountOfType(type, loginid, only_enabled));\n        return id ? Object.assign({ loginid: id }, get(null, id)) : {};\n    };\n\n    const hasAccountType = (type, only_enabled) => !isEmptyObject(getAccountOfType(type, only_enabled));\n\n    // only considers currency of real money accounts\n    // @param {String} type = crypto|fiat\n    const hasCurrencyType = (type) => {\n        const loginids = getAllLoginids();\n        if (type === 'crypto') {\n            // find if has crypto currency account\n            return loginids.find(loginid =>\n                !get('is_virtual', loginid) && isCryptocurrency(get('currency', loginid)));\n        }\n        // else find if have fiat currency account\n        return loginids.find(loginid =>\n            !get('is_virtual', loginid) && !isCryptocurrency(get('currency', loginid)));\n    };\n\n    const TypesMapConfig = (() => {\n        let types_map_config;\n\n        const initTypesMap = () => ({\n            default  : localize('Real'),\n            financial: localize('Investment'),\n            gaming   : localize('Gaming'),\n            virtual  : localize('Virtual'),\n        });\n\n        return {\n            get: () => {\n                if (!types_map_config) {\n                    types_map_config = initTypesMap();\n                }\n                return types_map_config;\n            },\n        };\n    })();\n\n    const getAccountTitle = loginid => {\n        const types_map = TypesMapConfig.get();\n        return (types_map[getAccountType(loginid)] || types_map.default);\n    };\n\n    const responseAuthorize = (response) => {\n        const authorize = response.authorize;\n        set('email',      authorize.email);\n        set('currency',   authorize.currency);\n        set('is_virtual', +authorize.is_virtual);\n        set('session_start', parseInt(moment().valueOf() / 1000));\n        set('landing_company_shortcode', authorize.landing_company_name);\n        updateAccountList(authorize.account_list);\n    };\n\n    const updateAccountList = (account_list) => {\n        account_list.forEach((account) => {\n            set('excluded_until', account.excluded_until || '', account.loginid);\n            Object.keys(account).forEach((param) => {\n                const param_to_set = param === 'country' ? 'residence' : param;\n                const value_to_set = typeof account[param] === 'undefined' ? '' : account[param];\n                if (param_to_set !== 'loginid') {\n                    set(param_to_set, value_to_set, account.loginid);\n                }\n            });\n        });\n    };\n\n    const shouldAcceptTnc = () => {\n        if (get('is_virtual')) return false;\n        const website_tnc_version = State.getResponse('website_status.terms_conditions_version');\n        const client_tnc_status   = State.getResponse('get_settings.client_tnc_status');\n        return typeof client_tnc_status !== 'undefined' && client_tnc_status !== website_tnc_version;\n    };\n\n    const clearAllAccounts = () => {\n        current_loginid = undefined;\n        client_object   = {};\n        LocalStore.setObject(storage_key, client_object);\n    };\n\n    const setNewAccount = (options) => {\n        if (!options.email || !options.loginid || !options.token) {\n            return false;\n        }\n\n        SocketCache.clear();\n        localStorage.setItem('GTM_new_account', '1');\n\n        set('token',      options.token,       options.loginid);\n        set('email',      options.email,       options.loginid);\n        set('is_virtual', +options.is_virtual, options.loginid);\n        set('loginid',    options.loginid);\n\n        return true;\n    };\n\n    const currentLandingCompany = () => {\n        const landing_company_response = State.getResponse('landing_company') || {};\n        const this_shortcode           = get('landing_company_shortcode');\n        const landing_company_prop     = Object.keys(landing_company_response).find((key) => (\n            this_shortcode === landing_company_response[key].shortcode\n        ));\n        return landing_company_response[landing_company_prop] || {};\n    };\n\n    const shouldCompleteTax = () => isAccountOfType('financial') &&\n        !/crs_tin_information/.test((State.getResponse('get_account_status') || {}).status);\n\n    // remove manager id or master distinction from group\n    // remove EUR or GBP distinction from group\n    const getMT5AccountType = group => (group ? group.replace('\\\\', '_').replace(/_(\\d+|master|EUR|GBP)/, '') : '');\n\n    const getBasicUpgradeInfo = () => {\n        const upgradeable_landing_companies = State.getResponse('authorize.upgradeable_landing_companies');\n\n        let can_open_multi = false;\n        let type,\n            can_upgrade_to;\n        if ((upgradeable_landing_companies || []).length) {\n            const current_landing_company = get('landing_company_shortcode');\n\n            can_open_multi = upgradeable_landing_companies.indexOf(current_landing_company) !== -1;\n\n            // only show upgrade message to landing companies other than current\n            const canUpgrade = (...landing_companies) => landing_companies.find(landing_company => (\n                landing_company !== current_landing_company &&\n                upgradeable_landing_companies.indexOf(landing_company) !== -1\n            ));\n\n            // TODO [->svg]\n            can_upgrade_to = canUpgrade('costarica', 'svg', 'iom', 'malta', 'maltainvest');\n            if (can_upgrade_to) {\n                type = can_upgrade_to === 'maltainvest' ? 'financial' : 'real';\n            }\n        }\n\n        return {\n            type,\n            can_upgrade: !!can_upgrade_to,\n            can_upgrade_to,\n            can_open_multi,\n        };\n    };\n\n    const getLandingCompanyValue = (loginid, landing_company, key) => {\n        let landing_company_object;\n        if (loginid.financial || isAccountOfType('financial', loginid)) {\n            landing_company_object = getPropertyValue(landing_company, 'financial_company');\n        } else if (loginid.real || isAccountOfType('real', loginid)) {\n            landing_company_object = getPropertyValue(landing_company, 'gaming_company');\n\n            // handle accounts that don't have gaming company\n            if (!landing_company_object) {\n                landing_company_object = getPropertyValue(landing_company, 'financial_company');\n            }\n        } else {\n            const financial_company = (getPropertyValue(landing_company, 'financial_company') || {})[key] || [];\n            const gaming_company    = (getPropertyValue(landing_company, 'gaming_company') || {})[key] || [];\n            landing_company_object  = financial_company.concat(gaming_company);\n            return landing_company_object;\n        }\n        return (landing_company_object || {})[key];\n    };\n\n    const getRiskAssessment = () => {\n        const status       = State.getResponse('get_account_status.status');\n        const is_high_risk = /high/.test(State.getResponse('get_account_status.risk_classification'));\n\n        return (\n            isAccountOfType('financial') ?\n                /(financial_assessment|trading_experience)_not_complete/.test(status) :\n                (is_high_risk && /financial_assessment_not_complete/.test(status))\n        );\n    };\n\n    // API_V3: send a list of accounts the client can transfer to\n    const canTransferFunds = (account) => {\n        if (account) {\n            // this specific account can be used to transfer funds to\n            return canTransferFundsTo(account.loginid);\n        }\n        // at least one account can be used to transfer funds to\n        return Object.keys(client_object).some(loginid => canTransferFundsTo(loginid));\n    };\n\n    const canTransferFundsTo = (to_loginid) => {\n        if (to_loginid === current_loginid || get('is_virtual', to_loginid) || get('is_virtual') ||\n            get('is_disabled', to_loginid)) {\n            return false;\n        }\n        const from_currency = get('currency');\n        const to_currency   = get('currency', to_loginid);\n        if (!from_currency || !to_currency) {\n            return false;\n        }\n        // only transfer to other accounts that have the same currency as current account if one is maltainvest and one is malta\n        if (from_currency === to_currency) {\n            // these landing companies are allowed to transfer funds to each other if they have the same currency\n            const same_cur_allowed = {\n                maltainvest: 'malta',\n                malta      : 'maltainvest',\n            };\n            const from_landing_company = get('landing_company_shortcode');\n            const to_landing_company   = get('landing_company_shortcode', to_loginid);\n            // if same_cur_allowed[from_landing_company] is undefined and to_landing_company is also undefined, it will return true\n            // so we should compare '' === undefined instead\n            return (same_cur_allowed[from_landing_company] || '') === to_landing_company;\n        }\n        // or for other clients if current account is cryptocurrency it should only transfer to fiat currencies and vice versa\n        const is_from_crypto = isCryptocurrency(from_currency);\n        const is_to_crypto   = isCryptocurrency(to_currency);\n        return (is_from_crypto ? !is_to_crypto : is_to_crypto);\n    };\n\n    const hasSvgAccount = () => !!(getAllLoginids().find(loginid => /^CR/.test(loginid)));\n\n    const canChangeCurrency = (statement, mt5_login_list, is_current = true) => {\n        const currency             = get('currency');\n        const has_no_mt5           = mt5_login_list.length === 0;\n        const has_no_transaction   = (statement.count === 0 && statement.transactions.length === 0);\n        const has_account_criteria = has_no_transaction && has_no_mt5;\n\n        // Current API requirements for currently logged-in user successfully changing their account's currency:\n        // 1. User must not have made any transactions\n        // 2. User must not have any MT5 account\n        // 3. Not be a crypto account\n        // 4. Not be a virtual account\n        return is_current ? currency && !get('is_virtual') && has_account_criteria && !isCryptocurrency(currency) : has_account_criteria;\n    };\n\n    return {\n        init,\n        isLoggedIn,\n        isValidLoginid,\n        set,\n        get,\n        getAllLoginids,\n        getAccountType,\n        isAccountOfType,\n        getAccountOfType,\n        hasAccountType,\n        hasCurrencyType,\n        getAccountTitle,\n        responseAuthorize,\n        shouldAcceptTnc,\n        clearAllAccounts,\n        setNewAccount,\n        currentLandingCompany,\n        shouldCompleteTax,\n        getAllAccountsObject,\n        getMT5AccountType,\n        getBasicUpgradeInfo,\n        getLandingCompanyValue,\n        getRiskAssessment,\n        canTransferFunds,\n        hasSvgAccount,\n        canChangeCurrency,\n    };\n})();\n\nmodule.exports = ClientBase;\n","const moment       = require('moment');\nconst BinarySocket = require('./socket_base');\nconst PromiseClass = require('../utility').PromiseClass;\n\nconst ServerTime = (() => {\n    let clock_started = false;\n    const pending = new PromiseClass();\n    let server_time,\n        performance_request_time,\n        get_time_interval,\n        update_time_interval,\n        onTimeUpdated;\n\n    const init = (fncTimeUpdated) => {\n        if (!clock_started) {\n            onTimeUpdated = fncTimeUpdated;\n            requestTime();\n            clearInterval(get_time_interval);\n            get_time_interval = setInterval(requestTime, 30000);\n            clock_started = true;\n        }\n    };\n\n    const requestTime = () => {\n        performance_request_time = performance.now();\n        BinarySocket.send({ time: 1 }).then(timeCounter);\n    };\n\n    const timeCounter = (response) => {\n        if (response.error) return;\n\n        if (!clock_started) {\n            init();\n            return;\n        }\n\n        clearInterval(update_time_interval);\n\n        const start_timestamp = response.time;\n        const performance_response_time = performance.now();\n        const time_taken = performance_response_time - performance_request_time;\n        const server_time_at_response = ((start_timestamp * 1000) + time_taken);\n\n        const updateTime = () => {\n            const time_since_response = performance.now() - performance_response_time;\n            server_time = moment(server_time_at_response + time_since_response).utc();\n\n            if (typeof onTimeUpdated === 'function') {\n                onTimeUpdated();\n            }\n        };\n        updateTime();\n        pending.resolve();\n        update_time_interval = setInterval(updateTime, 1000);\n    };\n\n    const get = () => server_time ? server_time.clone() : undefined;\n\n    return {\n        init,\n        get,\n        timePromise: pending.promise,\n    };\n})();\n\nmodule.exports = ServerTime;\n","const extend = require('extend');\nrequire('./lib/polyfills/element.matches');\n\nconst template = (string, content) => {\n    let to_replace = content;\n    if (content && !Array.isArray(content)) {\n        to_replace = [content];\n    }\n    return string.replace(/\\[_(\\d+)]/g, (s, index) => to_replace[(+index) - 1]);\n};\n\nconst isEmptyObject = (obj) => {\n    let is_empty = true;\n    if (obj && obj instanceof Object) {\n        Object.keys(obj).forEach((key) => {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) is_empty = false;\n        });\n    }\n    return is_empty;\n};\n\nconst cloneObject = obj => (!isEmptyObject(obj) ? extend(true, Array.isArray(obj) ? [] : {}, obj) : obj);\n\nconst isDeepEqual = (a, b) => {\n    if (typeof a !== typeof b) {\n        return false;\n    } else if (Array.isArray(a)) {\n        return isEqualArray(a, b);\n    } else if (a && b && typeof a === 'object') {\n        return isEqualObject(a, b);\n    }\n    // else\n    return a === b;\n};\n\nconst isEqualArray = (arr1, arr2) => (\n    arr1 === arr2 ||\n    (\n        arr1.length === arr2.length &&\n        arr1.every((value, idx) => isDeepEqual(value, arr2[idx]))\n    )\n);\n\nconst isEqualObject = (obj1, obj2) => (\n    obj1 === obj2 ||\n    (\n        Object.keys(obj1).length === Object.keys(obj2).length &&\n        Object.keys(obj1).every(key => isDeepEqual(obj1[key], obj2[key]))\n    )\n);\n\n// Filters out duplicates in an array of objects by key\nconst unique = (array, key) => array.filter((e, idx) =>\n    array.findIndex((a, i) => a[key] ? a[key] === e[key] : i === idx) === idx);\n\nconst getPropertyValue = (obj, k) => {\n    let keys = k;\n    if (!Array.isArray(keys)) keys = [keys];\n    if (!isEmptyObject(obj) && keys[0] in obj && keys && keys.length > 1) {\n        return getPropertyValue(obj[keys[0]], keys.slice(1));\n    }\n    // else return clone of object to avoid overwriting data\n    return obj ? cloneObject(obj[keys[0]]) : undefined;\n};\n\n/**\n * Creates a DOM element and adds any attributes to it.\n *\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\n * @return the created DOM element\n */\nconst createElement = (tag_name, attributes = {}) => {\n    const el = document.createElement(tag_name);\n    Object.keys(attributes).forEach((attr) => {\n        const value = attributes[attr];\n        if (attr === 'text') {\n            el.textContent = value;\n        } else if (attr === 'html') {\n            el.html(value);\n        } else {\n            el.setAttribute(attr, value);\n        }\n    });\n    return el;\n};\n\nlet static_hash;\nconst getStaticHash = () => {\n    static_hash = static_hash || (document.querySelector('script[src*=\"binary\"]').getAttribute('src') || '').split('?')[1];\n    return static_hash;\n};\n\nclass PromiseClass {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.reject  = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nmodule.exports = {\n    template,\n    isEmptyObject,\n    cloneObject,\n    isDeepEqual,\n    unique,\n    getPropertyValue,\n    createElement,\n    getStaticHash,\n    PromiseClass,\n};\n","const createElement = require('./utility').createElement;\n\n/*\n * function to check if element is visible or not\n *\n */\nconst isVisible = elem => !(!elem || (elem.offsetWidth === 0 && elem.offsetHeight === 0));\n\n/*\n * @param  {String}  id_selector   the selector for the element\n * @param  {Element} parent        optional selector to use for parent, defaults to document\n * @return {Element}               return element if it exists, if it doesn't return a dummy element\n */\nconst getElementById = (id_selector, parent = document) => parent.getElementById(id_selector) || createElement('div');\n\nmodule.exports = {\n    isVisible,\n    getElementById,\n};\n"],"sourceRoot":""}