{"version":3,"sources":["webpack:///./App/Containers/CashierModal/error.jsx","webpack:///./App/Containers/CashierModal/transfer-no-balance.jsx","webpack:///./App/Containers/CashierModal/PaymentAgentTransfer/payment-agent-transfer-form.jsx","webpack:///./App/Containers/CashierModal/PaymentAgentTransfer/payment-agent-transfer-receipt.jsx","webpack:///./App/Containers/CashierModal/payment-agent-transfer.jsx"],"names":["Error","onClickButton","props","error","link","window","open","urlFor","undefined","setErrorMessage","className","icon","Array","isArray","this","message","map","idx","key","button_text","has_effect","text","onClick","React","Component","propTypes","PropTypes","object","func","connect","modules","cashier","render","website_name","localize","TransferNoBalance","setModalIndex","errors","amount","type","decimals","CurrencyUtils","getDecimalPlaces","transfer_limit","getPreBuildDVRs","number","values","PaymentAgentTransferForm","validateTransfer","balance","onTransferPassthrough","requestPaymentAgentTransfer","currency","description","transfer_to","loginid","payment_agent_transfer","actions","setSubmitting","validateTransferPassthrough","isSubmitting","handleChange","field","touched","error_message","client","statement","resetPaymentAgentTransfer","PaymentAgentTransferReceipt","name","receipt","client_name","toggleCashierModal","PaymentAgentTransfer","setActiveTab","container","onMount","onUnMount","Fragment","is_loading","has_no_balance","is_transfer_successful","string","bool","ui","config","onMountPaymentAgentTransfer"],"mappings":"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","file":"js/4.bc7b064c6fa5082a9403.js","sourcesContent":["import PropTypes    from 'prop-types';\nimport React        from 'react';\nimport Button       from 'deriv-components/lib/button';\nimport { urlFor }   from '_common/url';\nimport Icon         from 'Assets/icon.jsx';\nimport { connect }  from 'Stores/connect';\n\nclass Error extends React.Component {\n    onClickButton = () => {\n        if (this.props.error.link) {\n            window.open(urlFor(this.props.error.link, undefined, undefined, true));\n        } else if (typeof this.props.error.onClickButton === 'function') {\n            this.props.error.onClickButton();\n        }\n        this.props.setErrorMessage('');\n    };\n\n    render() {\n        return (\n            <div className='cashier__wrapper'>\n                <Icon icon='IconCashierError' className='cashier-error__icon' />\n                {Array.isArray(this.props.error.message) ?\n                    this.props.error.message.map((message, idx) =>\n                        <p className='cashier-error__text' key={idx}>{message}</p>\n                    )\n                    :\n                    <p className='cashier-error__text'>{this.props.error.message}</p>\n                }\n                {this.props.error.button_text &&\n                <Button\n                    className='btn--primary--default cashier-error__button'\n                    has_effect\n                    text={this.props.error.button_text}\n                    onClick={this.onClickButton}\n                />\n                }\n            </div>\n        );\n    }\n}\n\nError.propTypes = {\n    error          : PropTypes.object,\n    setErrorMessage: PropTypes.func,\n};\n\nexport default connect(\n    ({ modules }) => ({\n        setErrorMessage: modules.cashier.setErrorMessage,\n    })\n)(Error);\n","import PropTypes        from 'prop-types';\nimport React            from 'react';\nimport { Button }       from 'deriv-components';\nimport Icon             from 'Assets/icon.jsx';\nimport Localize         from 'App/Components/Elements/localize.jsx';\nimport { website_name } from 'App/Constants/app-config';\nimport { localize }     from 'App/i18n';\n\nclass TransferNoBalance extends React.Component {\n    onClickDeposit = () => {\n        // index of deposit tab in the cashier modal is 0\n        this.props.setModalIndex(0);\n    };\n\n    render = () => {\n        return (\n            <div className='cashier__wrapper account-transfer__no-balance'>\n                <Icon icon='IconNoBalance' className='account-transfer__no-balance-icon' />\n                <h2 className='withdraw__header'><Localize i18n_default_text='You have no funds in your {{website_name}} account' values={{ website_name }} /></h2>\n                <p className='cashier__text'><Localize i18n_default_text='Please make a deposit to enable fund transfers.' /></p>\n                <Button\n                    className='btn--primary--default account-transfer__no-balance-button'\n                    has_effect\n                    text={localize('Deposit now')}\n                    onClick={this.onClickDeposit}\n                />\n            </div>\n        );\n    }\n}\n\nTransferNoBalance.propTypes = {\n    setModalIndex: PropTypes.func,\n};\n\nexport default TransferNoBalance;\n","import classNames             from 'classnames';\nimport PropTypes              from 'prop-types';\nimport React                  from 'react';\nimport {\n    Button,\n    Input }                   from 'deriv-components';\nimport {\n    Field,\n    Formik,\n    Form }                    from 'formik';\nimport CurrencyUtils          from 'deriv-shared/utils/currency';\nimport Localize               from 'App/Components/Elements/localize.jsx';\nimport { localize }           from 'App/i18n';\nimport Icon                   from 'Assets/icon.jsx';\nimport { connect }            from 'Stores/connect';\nimport {\n    getPreBuildDVRs,\n    validNumber }             from 'Utils/Validator/declarative-validation-rules';\n\nconst validateTransfer = (values, { balance, currency, transfer_limit }) => {\n    const errors = {};\n\n    if (!values.loginid  || !/^[A-Za-z]+[0-9]+$/.test(values.loginid)) {\n        errors.loginid = localize('Please enter a valid client login ID.');\n    }\n\n    if (!values.amount) {\n        errors.amount = localize('This field is required.');\n    } else if (\n        !validNumber(values.amount, {\n            type    : 'float',\n            decimals: CurrencyUtils.getDecimalPlaces(currency),\n            ...(transfer_limit.min && {\n                min: transfer_limit.min,\n                max: transfer_limit.max,\n            }),\n        })) {\n        errors.amount = getPreBuildDVRs().number.message;\n    } else if (+balance < +values.amount) {\n        errors.amount = localize('Insufficient balance.');\n    }\n\n    if (values.description && !/^[0-9A-Za-z .,'-]{0,250}$/.test(values.description.replace(/\\n/g, ' '))) {\n        errors.description = localize('Please enter a valid description.');\n    }\n\n    return errors;\n};\n\nclass PaymentAgentTransferForm extends React.Component {\n    validateTransferPassthrough = (values) => (\n        validateTransfer(values, {\n            balance       : this.props.balance,\n            currency      : this.props.currency,\n            transfer_limit: this.props.transfer_limit,\n        })\n    );\n\n    onTransferPassthrough = async (values, actions) => {\n        const payment_agent_transfer = await this.props.requestPaymentAgentTransfer({\n            amount     : values.amount,\n            currency   : this.props.currency,\n            description: values.description.replace(/\\n/g, ' '),\n            transfer_to: values.loginid,\n        });\n        if (payment_agent_transfer.error) {\n            actions.setSubmitting(false);\n        }\n    };\n\n    render() {\n        return (\n            <div className='cashier__wrapper--align-left'>\n                <h2 className='cashier__header payment-agent-transfer__header'>\n                    <Localize i18n_default_text='Transfer to client' />\n                </h2>\n                <Formik\n                    initialValues={{\n                        loginid    : '',\n                        amount     : '',\n                        description: '',\n                    }}\n                    validate={this.validateTransferPassthrough}\n                    onSubmit={this.onTransferPassthrough}\n                >\n                    {\n                        ({ errors, isSubmitting, isValid, touched, handleChange }) => (\n                            <Form noValidate>\n                                <Field name='loginid'>\n                                    {({ field }) => (\n                                        <Input\n                                            { ...field }\n                                            onChange={(e) => {\n                                                this.props.setErrorMessage('');\n                                                handleChange(e);\n                                            }}\n                                            className='payment-agent-transfer__input'\n                                            type='text'\n                                            label={localize('Client login ID')}\n                                            error={ touched.loginid && errors.loginid }\n                                            required\n                                            autoComplete='off'\n                                            maxLength='20'\n                                        />\n                                    )}\n                                </Field>\n                                <Field name='amount'>\n                                    {({ field }) => (\n                                        <Input\n                                            { ...field }\n                                            onChange={(e) => {\n                                                this.props.setErrorMessage('');\n                                                handleChange(e);\n                                            }}\n                                            className='payment-agent-transfer__input dc-input--no-placeholder'\n                                            type='text'\n                                            label={localize('Amount')}\n                                            error={ touched.amount && errors.amount }\n                                            required\n                                            leading_icon={\n                                                <span className={classNames('cashier__amount-symbol', 'symbols', `symbols--${(this.props.currency || '').toLowerCase()}`)} />\n                                            }\n                                            autoComplete='off'\n                                            maxLength='30'\n                                        />\n                                    )}\n                                </Field>\n                                <Field name='description'>\n                                    {({ field }) => (\n                                        <Input\n                                            { ...field }\n                                            onChange={(e) => {\n                                                this.props.setErrorMessage('');\n                                                handleChange(e);\n                                            }}\n                                            type='textarea'\n                                            label={localize('Description')}\n                                            error={ touched.description && errors.description }\n                                            required\n                                            autoComplete='off'\n                                            maxLength='250'\n                                        />\n                                    )}\n                                </Field>\n                                <div className='cashier__form-submit'>\n                                    {this.props.error_message &&\n                                    <React.Fragment>\n                                        <Icon icon='IconEmergency' className='cashier__form-error-icon' />\n                                        <Icon icon='IconError' className='cashier__form-error-small-icon' />\n                                        <p className='cashier__form-error'>\n                                            {this.props.error_message}\n                                        </p>\n                                    </React.Fragment>\n                                    }\n                                    <Button\n                                        className='cashier__form-submit-button btn--primary--default'\n                                        type='submit'\n                                        is_disabled={!isValid || isSubmitting}\n                                    >\n                                        <Localize i18n_default_text='Transfer' />\n                                    </Button>\n                                </div>\n                            </Form>\n                        )\n                    }\n                </Formik>\n            </div>\n        );\n    }\n}\n\nPaymentAgentTransferForm.propTypes = {\n    balance                    : PropTypes.string,\n    currency                   : PropTypes.string,\n    error                      : PropTypes.object,\n    requestPaymentAgentTransfer: PropTypes.func,\n    setErrorMessage            : PropTypes.func,\n    transfer_limit             : PropTypes.object,\n};\n\nexport default connect(\n    ({ client, modules }) => ({\n        balance                    : client.balance,\n        currency                   : client.currency,\n        error_message              : modules.cashier.config.payment_agent_transfer.error.message,\n        requestPaymentAgentTransfer: modules.cashier.requestPaymentAgentTransfer,\n        setErrorMessage            : modules.cashier.setErrorMessage,\n        transfer_limit             : modules.cashier.config.payment_agent_transfer.transfer_limit,\n    })\n)(PaymentAgentTransferForm);\n","import classNames     from 'classnames';\nimport PropTypes      from 'prop-types';\nimport React          from 'react';\nimport { withRouter } from 'react-router';\nimport { Button }     from 'deriv-components';\nimport CurrencyUtils  from 'deriv-shared/utils/currency';\nimport Localize       from 'App/Components/Elements/localize.jsx';\nimport { localize }   from 'App/i18n';\nimport Icon           from 'Assets/icon.jsx';\nimport routes         from 'Constants/routes';\nimport { connect }    from 'Stores/connect';\n\nclass PaymentAgentTransferReceipt extends React.Component {\n    openStatement = () => {\n        this.props.history.push(routes.statement);\n        this.props.resetPaymentAgentTransfer();\n        this.props.toggleCashierModal();\n    };\n\n    render() {\n        return (\n            <div className='cashier__wrapper account-transfer__receipt'>\n                <div className='cashier__success'>\n                    <h2 className='cashier__header'>\n                        <Localize i18n_default_text='Your funds have been transferred to {{name}}.' values={{ name: this.props.receipt.client_name }} />\n                    </h2>\n                    <div className='cashier__transferred-amount cashier__text--bold'>\n                        <span\n                            className={classNames('symbols', `symbols--${this.props.currency.toLowerCase()}`)}\n                        />\n                        {CurrencyUtils.formatMoney(this.props.currency, this.props.receipt.amount_transferred, true)}\n                    </div>\n                    <div className='cashier__transferred-details-wrapper'>\n                        <span className='account-transfer__transfer-details-from'>\n                            <Icon\n                                icon='IconAccountsCurrency'\n                                type={this.props.currency.toLowerCase()}\n                                height={16}\n                                width={16}\n                            />\n                            <span className='cashier__transferred-details'>\n                                <span className='cashier__text--bold'>{this.props.currency.toUpperCase()}</span>&nbsp;({this.props.loginid})\n                            </span>\n                        </span>\n                        <Icon className='cashier__transferred-icon' icon='IconBack' />\n                        <span className='account-transfer__transfer-details-to'>\n                            <Icon icon='IconUser' />\n                            <span className='cashier__transferred-details'>\n                                <span className='cashier__text--bold'>{this.props.receipt.client_name}</span>&nbsp;({this.props.receipt.client_id})\n                            </span>\n                        </span>\n                    </div>\n                    <div className='cashier__form-submit payment-agent-transfer__buttons'>\n                        <Button\n                            className='btn--tertiary--default payment-agent__statement-button'\n                            has_effect\n                            text={localize('View in statement')}\n                            onClick={this.openStatement}\n                        />\n                        <Button\n                            className='btn--primary--default payment-agent__done-button payment-agent-transfer__done-button'\n                            has_effect\n                            text={localize('Done')}\n                            onClick={this.props.resetPaymentAgentTransfer}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nPaymentAgentTransferReceipt.propTypes = {\n    currency                 : PropTypes.string,\n    loginid                  : PropTypes.string,\n    receipt                  : PropTypes.object,\n    resetPaymentAgentTransfer: PropTypes.func,\n    toggleCashierModal       : PropTypes.func,\n};\n\nexport default withRouter(connect(\n    ({ client, modules, ui }) => ({\n        currency                 : client.currency,\n        loginid                  : client.loginid,\n        receipt                  : modules.cashier.config.payment_agent_transfer.receipt,\n        resetPaymentAgentTransfer: modules.cashier.resetPaymentAgentTransfer,\n        toggleCashierModal       : ui.toggleCashierModal,\n    })\n)(PaymentAgentTransferReceipt));\n","import PropTypes                   from 'prop-types';\nimport React                       from 'react';\nimport { connect }                 from 'Stores/connect';\nimport PaymentAgentTransferForm    from './PaymentAgentTransfer/payment-agent-transfer-form.jsx';\nimport PaymentAgentTransferReceipt from './PaymentAgentTransfer/payment-agent-transfer-receipt.jsx';\nimport TransferNoBalance           from './transfer-no-balance.jsx';\nimport Error                       from './error.jsx';\nimport Loading                     from '../../../templates/_common/components/loading.jsx';\n\nclass PaymentAgentTransfer extends React.Component {\n    componentDidMount() {\n        this.props.setActiveTab(this.props.container);\n        this.props.onMount();\n    }\n\n    componentWillUnmount() {\n        this.props.onUnMount();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.props.is_loading ?\n                    <Loading className='cashier__loader' />\n                    :\n                    <React.Fragment>\n                        {/* for errors with CTA hide the form and show the error,\n                         for others show them at the bottom of the form next to submit button */}\n                        {this.props.error.button_text ?\n                            <Error error={this.props.error} />\n                            :\n                            (this.props.has_no_balance ?\n                                <TransferNoBalance setModalIndex={this.props.setModalIndex} />\n                                :\n                                (this.props.is_transfer_successful ?\n                                    <PaymentAgentTransferReceipt />\n                                    :\n                                    <PaymentAgentTransferForm error={this.props.error} />\n                                )\n                            )\n                        }\n                    </React.Fragment>\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nPaymentAgentTransfer.propTypes = {\n    container             : PropTypes.string,\n    error                 : PropTypes.object,\n    has_no_balance        : PropTypes.bool,\n    is_loading            : PropTypes.bool,\n    is_transfer_successful: PropTypes.bool,\n    onMount               : PropTypes.func,\n    setActiveTab          : PropTypes.func,\n    setModalIndex         : PropTypes.func,\n};\n\nexport default connect(\n    ({ modules, ui }) => ({\n        container             : modules.cashier.config.payment_agent_transfer.container,\n        error                 : modules.cashier.config.payment_agent_transfer.error,\n        has_no_balance        : modules.cashier.config.payment_agent_transfer.has_no_balance,\n        is_loading            : modules.cashier.is_loading,\n        is_transfer_successful: modules.cashier.config.payment_agent_transfer.is_transfer_successful,\n        onMount               : modules.cashier.onMountPaymentAgentTransfer,\n        onUnMount             : modules.cashier.resetPaymentAgentTransfer,\n        setActiveTab          : modules.cashier.setActiveTab,\n        setModalIndex         : ui.setModalIndex,\n    })\n)(PaymentAgentTransfer);\n"],"sourceRoot":""}