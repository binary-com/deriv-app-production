{"version":3,"sources":["webpack:///./App/Containers/AccountSignupModal/account-signup-modal.jsx"],"names":["index_of_selection","item","state","has_valid_residence","onSignupComplete","props","enableApp","residence_list","validateSignupPassthrough","toLowerCase","modded_values","onSignup","errors","residence","website_name","AccountSignup","signupInitialValues","onSignupPassthrough","field","a","password","isSubmitting","localize","Component","propTypes","PropTypes","AccountSignupModal","className","text","classNames","type","values","onResidenceSelection","touched","toggleAccountSignupModal","is_loading","disableApp","is_visible","client"],"mappings":"8qDA+BK,IAFD,EAEO,CACH,SAAMA,GAAkD,UACpDC,I,WAYRC,G,mBAKoBC,G,4FACnB,C,gBAEDC,YAAmB,aAAW,qBAC1B,kB,OAII,mDAGJ,O,0DAEA,EAAKC,SAAMC,C,8DAGN,iBACaC,sBADb,GAGL,EAAMC,mB,YA4GR,O,kOAnIEL,GAAqB,G,EAyBuC,G,EAC1CM,EAD0C,IAA7B,S,iBAI3B,MAAMC,KAAN,a,aACAC,EAASD,EAAoBN,eAeM,WAAS,cAAC,OAAb,UACI,kBAAU,kBAAkB,KAA5B,cAEJ,EAAG,S,YAhBvC,OA1CIJ,SAA6BO,EAAeP,GAC5CY,MAAOC,GAhBnB,GAiBS,+BADsGC,IACtG,2BACJ,eAlBL,YAuBMC,C,+RAmCM,OAegC,SAbRC,SADpB,GAEI,MAAWR,EAFf,uBAGI,OAAQ,EAAGS,kDAEOL,E,+UAAAA,CAAjB,+BACG,yBASkC,YAAV,IALR,EAOI,eAAO,EAAK,SACP,aAAGM,EAAH,gBACG,UAEI,SAAAC,EAAA,cAFJ,yEA+BH,yBALT,UAeI,sCAAG,kBAAU,KAAb,UACI,2BACI,kBAAkB,KAF1B,kBAMA,8CACI,IAAS,cAAa,KAAyB,kBAA1B,SADzB,GAEI,IAAI,EAAC,EAFT,MAGI,WAAc,cAAQC,IAAqBA,EAA7B,GAAyCC,GACvD,UAAMC,iCACN,MAAO,wCAjE/B,MADH,uBAPb,kB,mFAlC0BC,kB,2IAwHlCR,UAAcS,IAAY,uBACNC,iCADM,4BAA1B,c,yCAKMC,wBAAqB,iBACvBpB,SAOE,KA9E8C,yBAGIqB,UAAS,uCACT,kBAAgB,KAChB,UAAK,2BACL,IAAK,cAAY,KACjB,kBAAgBd,qCAChB,kBARJ,KASI,kCACA,kBACI,mDAAUe,kBAAV,gCAXR,IADH,UART,OAyBI,kBAAC,IAAD,QACI,aAAWC,MAAoC,4CADnD,yBAEIC,KAAK,OACL,yBAAeC,kBACf,MAAS,EAAKC,aAJlB,UAKI,UAAO,EACP,WAAc,EAhC1B,gBAoCI,YAAK,MAAU,QACX,SAAG,OAAU,gCADjB,IAII,mBAAO,UAAK,2BACP,0EAGO,aAAU,2BACV,QAAOV,uBACP,SAAQW,EACR,wBAAQ,sB,2BAwC5DC,E,CAEA,eAGQ,EAAU,UAFd,CAGI,aAAW5B,KACX,eAAY6B,IAAU,OAIlB,MADJ,YAEI,MAAc,EAAE5B,UAChB,EAAc,EAAE2B,WAChB,EAAW5B,aAZvB,eATJ,a,mBA2BAoB,EAA+B,2BAC3BU,WAAgBX,cADW,KAE3BnB,WAAgBmB,EAChBU,WAAgBV,EAChBY,UAAgBZ,EAChBd,WAAgBc,IALW,SAM3BlB,qBAAgBkB,GANpB,oBAAa,CASb,WACI,4CAAqB,MAIjBW,EAA6BA,UAJZ,CAKjBD,WAAU,IAAmBA,KAC7BxB,UAAS,IAAwBA,KACjCJ,eAA0B+B,KAPT,WAArB,SADW,SAUbZ,IAVF,K","file":"js/AccountSignupModal.1e251c0be77adf5ee0bc.js","sourcesContent":["import classNames        from 'classnames';\nimport {\n    Autocomplete,\n    PasswordInput,\n    Button,\n    Dialog }             from 'deriv-components';\nimport {\n    Field,\n    Formik,\n    Form }               from 'formik';\nimport PropTypes         from 'prop-types';\nimport React             from 'react';\nimport Localize          from 'App/Components/Elements/localize.jsx';\nimport { localize }      from 'App/i18n';\nimport { connect }       from 'Stores/connect';\nimport { validPassword } from 'Utils/Validator/declarative-validation-rules';\nimport { website_name } from 'App/Constants/app-config';\nimport 'Sass/app/modules/account-signup.scss';\n\nconst signupInitialValues = { password: '', residence: '' };\n\nconst validateSignup = (values, residence_list) => {\n    const errors = {};\n    const min_password_length = 6;\n\n    if (values.password && (values.password.length < min_password_length || !validPassword(values.password))) {\n        errors.password = true;\n    }\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(item => (\n            item.text.toLowerCase() === values.residence.toLowerCase()\n        ));\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', { website_name });\n        }\n    }\n\n    return errors;\n};\n\nclass AccountSignup extends React.Component {\n    state = {\n        has_valid_residence: false,\n    };\n\n    onResidenceSelection = () => {\n        this.setState({ has_valid_residence: true });\n    };\n\n    onSignupComplete = (error) => {\n        // Error would be returned on invalid token (and the like) cases.\n        // TODO: Proper error handling (currently we have no place to put the message)\n\n        if (error) {\n            throw Error(error);\n        }\n\n        // Handle lower level modal controls due to overriding modal rendering\n        this.props.isModalVisible(false);\n        this.props.enableApp();\n    };\n\n    render() {\n        const { onSignup, residence_list } = this.props;\n\n        const validateSignupPassthrough = (values) => validateSignup(values, residence_list);\n        const onSignupPassthrough = (values) => {\n            const index_of_selection = residence_list.findIndex(item => (\n                item.text.toLowerCase() === values.residence.toLowerCase()\n            ));\n\n            const modded_values = { ...values, residence: residence_list[index_of_selection].value };\n            onSignup(modded_values, this.onSignupComplete);\n        };\n        return (\n            <div className='account-signup'>\n                <Formik\n                    initialValues={ signupInitialValues }\n                    validate={ validateSignupPassthrough }\n                    onSubmit={ onSignupPassthrough }\n                >\n                    {({ isSubmitting, errors, values, setFieldValue, touched }) => (\n                        <Form>\n                            <React.Fragment>\n                                {\n                                    !this.state.has_valid_residence ?\n                                        <div className='account-signup__residence-selection'>\n                                            <p className='account-signup__heading'>\n                                                <Localize i18n_default_text='Thanks for verifying your email' />\n                                            </p>\n                                            <p className='account-signup__text'>\n                                                <Localize i18n_default_text='Where do you live?' />\n                                            </p>\n                                            <Field name='residence'>\n                                                {({ field }) => (\n                                                    <Autocomplete\n                                                        { ...field }\n                                                        autoComplete='off'\n                                                        className='account-signup__residence-field'\n                                                        dropdown_offset='3.2rem'\n                                                        type='text'\n                                                        label={ localize('Choose country') }\n                                                        error={ touched.residence && errors.residence }\n                                                        required\n                                                        list_items={ residence_list }\n                                                        onItemSelection={\n                                                            ({ value, text }) => setFieldValue('residence', value ? text : '', true)\n                                                        }\n                                                    />\n                                                )}\n                                            </Field>\n                                            <Button\n                                                className={classNames('account-signup__btn', { 'account-signup__btn--disabled': !values.residence || errors.residence })}\n                                                type='button'\n                                                is_disabled={ !values.residence || !!errors.residence }\n                                                onClick={this.onResidenceSelection}\n                                                primary\n                                                text={localize('Next')}\n                                            />\n                                        </div>\n                                        :\n                                        <div className='account-signup__password-selection'>\n                                            <p className='account-signup__heading'>\n                                                <Localize i18n_default_text='Keep your account secure with a password' />\n                                            </p>\n                                            <Field name='password'>\n                                                {({ field }) => (\n                                                    <PasswordInput\n                                                        { ...field }\n                                                        className='account-signup__password-field'\n                                                        label={localize('Create a password')}\n                                                        error={ touched.password && errors.password }\n                                                        required\n                                                    />\n                                                )}\n                                            </Field>\n                                            <p className='account-signup__subtext'>\n                                                <Localize\n                                                    i18n_default_text='Strong passwords contain at least 6 characters, combine uppercase and lowercase letters, numbers, and symbols.'\n                                                />\n                                            </p>\n\n                                            <Button\n                                                className={classNames('account-signup__btn', { 'account-signup__btn--disabled': !values.password || errors.password || isSubmitting })}\n                                                type='submit'\n                                                is_disabled={ !values.password || !!errors.password || isSubmitting }\n                                                text={localize('Start trading')}\n                                                primary\n                                            />\n                                        </div>\n                                }\n                            </React.Fragment>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        );\n    }\n}\n\nAccountSignup.propTypes = {\n    onSignup      : PropTypes.func,\n    residence_list: PropTypes.array,\n};\n\nconst AccountSignupModal = ({\n    enableApp,\n    disableApp,\n    is_loading,\n    is_visible,\n    onSignup,\n    residence_list,\n    toggleAccountSignupModal,\n}) => {\n    return (\n        <Dialog\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_content_centered\n        >\n            <AccountSignup\n                onSignup={onSignup}\n                residence_list={residence_list}\n                isModalVisible={toggleAccountSignupModal}\n                enableApp={enableApp}\n            />\n        </Dialog>\n    );\n};\n\nAccountSignupModal.propTypes = {\n    disableApp    : PropTypes.func,\n    enableApp     : PropTypes.func,\n    is_loading    : PropTypes.bool,\n    is_visible    : PropTypes.bool,\n    onSignup      : PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default connect(\n    ({ ui, client }) => ({\n        is_visible              : ui.is_account_signup_modal_visible,\n        toggleAccountSignupModal: ui.toggleAccountSignupModal,\n        enableApp               : ui.enableApp,\n        disableApp              : ui.disableApp,\n        is_loading              : ui.is_loading,\n        onSignup                : client.onSignup,\n        residence_list          : client.residence_list,\n    }),\n)(AccountSignupModal);\n"],"sourceRoot":""}