{"version":3,"sources":["webpack:///./templates/_common/components/loading.jsx","webpack:///./App/Containers/RealAccountSignup/upgrade-button.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Components/Layout/Header/account-info.jsx"],"names":["Loading","className","is_invisible","theme","id","classNames","invisible","Array","from","map","x","inx","key","icon","onClick","UpgradeButton","text","PropTypes","string","header","AccountList","currency","currency_icon","display_type","has_balance","has_demo_text","is_disabled","onClickAccount","selected_loginid","loginid","undefined","a","account_type","CurrencyUtils","CurrencyDisplay","is_virtual","AccountSwitcher","is_dmt5_visible","setState","section","state","wrapper_ref","this","handleClickOutside","handleLogout","is_positions_drawer_on","togglePositionsDrawer","redirectToMt5","props","toggleAccountsDialog","history","onClickUpgrade","window","updateMt5LoginList","is_loading_mt5","display","sorted_account_list","account","account_loginid","has_add_button","can_upgrade","is_mt5_allowed","sorted_mt5_list","login","redirectToMt5Real","has_mt5_login","localize","obj_total_balance","b_currency","a_currency","a_is_fiat","b_is_crypto","mt5_login_list","React","Component","account_list","accounts","is_logged_in","is_upgrade_enabled","is_visible","toggle","withRouter","connect","client","has_fiat","can_change_currency","switchAccount","logoutClient","logout","openRealAccountSignup","ui","account_switcher","AccountInfo","showDialog","hideDialog","balance","is_dialog_on","toggleDialog","type","toLowerCase","i18n_default_text","in","timeout","enter","enterDone","exit","onEntered","unmountOnExit","propTypes","bool","func"],"mappings":"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","file":"js/core.account-info.08ea203ee107f1554c6b.js","sourcesContent":["import classNames from 'classnames';\nimport React      from 'react';\n\nconst Loading = ({ className, is_invisible, theme, id }) => (\n    <div\n        id={id}\n        className={\n            classNames(\n                'barspinner',\n                `barspinner--${ theme || 'dark'}`,\n                { invisible: is_invisible },\n                className,\n            )\n        }\n    >\n        { Array.from(new Array(5)).map((x, inx) => (\n            <div key={inx} className={`barspinner__rect barspinner__rect--${inx + 1} rect${inx + 1}`} />\n        ))}\n    </div>\n);\n\nexport default Loading;\n","import { Button } from 'deriv-components';\nimport PropTypes  from 'prop-types';\nimport React      from 'react';\n\nconst UpgradeButton = ({ children, onClick, icon }) => (\n    <div className='acc-switcher__new-account'>\n        <Button\n            id='upgrade-account'\n            onClick={onClick}\n            className='acc-switcher__new-account-link'\n            tertiary\n            icon={icon}\n        >\n            {children}\n        </Button>\n    </div>\n);\n\nUpgradeButton.propTypes = {\n    icon   : PropTypes.node,\n    onClick: PropTypes.func,\n    text   : PropTypes.string,\n};\n\nexport default UpgradeButton;\n","import classNames         from 'classnames';\nimport PropTypes          from 'prop-types';\nimport React              from 'react';\nimport { withRouter }     from 'react-router';\nimport {\n    Money,\n    Popover,\n    ThemedScrollbars }    from 'deriv-components';\nimport CurrencyUtils      from 'deriv-shared/utils/currency';\nimport { localize }       from 'App/i18n';\nimport { urlFor }         from '_common/url';\nimport UpgradeButton      from 'App/Containers/RealAccountSignup/upgrade-button.jsx';\nimport Icon               from 'Assets/icon.jsx';\nimport { connect }        from 'Stores/connect';\nimport Localize           from 'App/Components/Elements/localize.jsx';\nimport routes             from 'Constants/routes';\nimport {\n    getMT5AccountDisplay,\n    getMT5AccountType }   from 'Stores/Helpers/client';\nimport Loading            from '../../../templates/_common/components/loading.jsx';\n\nconst AccountWrapper = ({\n    children,\n    header,\n    is_visible,\n    toggleVisibility,\n}) => (\n    <React.Fragment>\n        <div\n            className={classNames('acc-switcher', { 'acc-info--show': !is_visible })}\n            onClick={toggleVisibility}\n        >\n            <span className='acc-switcher__list-title'>\n                {header}\n            </span>\n            <Icon icon='IconArrow' className='acc-info__select-arrow' />\n        </div>\n        {is_visible &&\n            <React.Fragment>\n                {children}\n            </React.Fragment>\n        }\n    </React.Fragment>\n);\n\nconst AccountList = ({\n    account_type,\n    balance,\n    currency,\n    currency_icon,\n    display_type,\n    has_balance,\n    has_demo_text,\n    is_disabled,\n    is_virtual,\n    loginid,\n    onClickAccount,\n    selected_loginid,\n}) => (\n    <Popover alignment='left' message={loginid}>\n        <div\n            id={`dt_${loginid}`}\n            className={classNames('acc-switcher__account', {\n                'acc-switcher__account--selected' : loginid === selected_loginid,\n                'acc-switcher__account--disabled' : is_disabled,\n                'acc-switcher__account--demo-text': has_demo_text,\n            })}\n            onClick={is_disabled ? undefined : onClickAccount}\n        >\n            <span className={'acc-switcher__id'}>\n                <Icon\n                    icon='IconAccountsCurrency'\n                    className={`acc-switcher__id-icon acc-switcher__id-icon--${currency_icon}`}\n                    type={currency_icon}\n                />\n                <span>\n                    {display_type === 'currency'\n                        ? <CurrencyDisplay is_virtual={is_virtual} currency={currency_icon} />\n                        : <AccountDisplay is_virtual={has_demo_text} account_type={account_type} />\n                    }\n                </span>\n                {has_balance &&\n                <span className={classNames('acc-switcher__balance', { 'acc-switcher__balance--virtual': is_virtual || has_demo_text })}>\n                    {currency &&\n                    <Money\n                        currency={currency}\n                        amount={CurrencyUtils.formatMoney(currency, balance, true)}\n                        should_format={false}\n                    />\n                    }\n                    {!currency &&\n                    <span className='no-currency'>\n                        <Localize i18n_default_text='No currency assigned' />\n                    </span>\n                    }\n                </span>\n                }\n            </span>\n        </div>\n    </Popover>\n);\n\nconst CurrencyDisplay = ({\n    currency,\n    is_virtual,\n}) => {\n    if (is_virtual) {\n        return <Localize i18n_default_text='Demo' />;\n    }\n    if (currency.toUpperCase() === 'REAL') {\n        return <Localize i18n_default_text='Real' />;\n    }\n    return currency.toUpperCase();\n};\n\nconst AccountDisplay = ({\n    account_type,\n    is_virtual,\n}) => (\n    <React.Fragment>\n        {is_virtual &&\n        <div className='acc-switcher__demo-text'>\n            <Localize i18n_default_text='Demo' />\n        </div>\n        }\n        <div>\n            {getMT5AccountDisplay(account_type)}\n        </div>\n    </React.Fragment>\n);\n\nconst ButtonAddAccount = ({\n    onClick,\n    text,\n}) => (\n    <UpgradeButton\n        onClick={onClick}\n        icon={<Icon icon='IconAdd' />}\n    >\n        {text}\n    </UpgradeButton>\n);\n\nclass AccountSwitcher extends React.Component {\n    state = {\n        is_deriv_visible: true,\n        is_dmt5_visible : true,\n    };\n\n    toggleVisibility = (section) => {\n        this.setState({ [`is_${section}_visible`]: !this.state[`is_${section}_visible`] });\n    };\n\n    setWrapperRef = (node) => {\n        this.wrapper_ref = node;\n    };\n\n    handleClickOutside = (event) => {\n        const accounts_toggle_btn = !(event.target.classList.contains('acc-info'));\n        if (this.wrapper_ref && !this.wrapper_ref.contains(event.target)\n            && this.props.is_visible && accounts_toggle_btn) {\n            this.props.toggle();\n        }\n    };\n\n    handleLogout = () => {\n        this.props.toggle();\n        if (this.props.is_positions_drawer_on) {\n            this.props.togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n        }\n        this.props.logoutClient();\n    };\n\n    redirectToMt5 = (account_type) => {\n        this.props.toggleAccountsDialog();\n        this.props.history.push(`${routes.mt5}#${account_type}`);\n    };\n\n    redirectToMt5Real = () => {\n        this.redirectToMt5('real');\n    };\n\n    redirectToMt5Demo = () => {\n        this.redirectToMt5('demo');\n    };\n\n    onClickUpgrade = () => {\n        if (this.props.can_upgrade_to === 'svg') {\n            this.props.openRealAccountSignup();\n        } else {\n            window.open(urlFor('new_account/maltainvestws', undefined, undefined, true));\n        }\n    };\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n        this.props.updateMt5LoginList();\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n        this.props.hideDialog();\n    }\n\n    async doSwitch(loginid) {\n        this.props.toggle();\n        if (this.props.account_loginid === loginid) return;\n        await this.props.switchAccount(loginid);\n    }\n\n    get can_manage_currency () {\n        return this.props.can_change_currency ||\n            (!this.props.is_virtual && !this.props.has_fiat && this.props.can_upgrade_to);\n    }\n\n    get sorted_account_list() {\n        // sort accounts as follows:\n        // top is fiat, then crypto (each alphabetically by currency), then demo\n        return this.props.account_list.slice().sort((a, b) => {\n            const a_currency = this.props.accounts[a.loginid].currency;\n            const b_currency = this.props.accounts[b.loginid].currency;\n            const a_is_crypto = CurrencyUtils.isCryptocurrency(a_currency);\n            const b_is_crypto = CurrencyUtils.isCryptocurrency(b_currency);\n            const a_is_fiat = !a_is_crypto;\n            const b_is_fiat = !b_is_crypto;\n            if (a.is_virtual || b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if ((a_is_crypto && b_is_crypto) || (a_is_fiat && b_is_fiat)) {\n                return a_currency < b_currency ? -1 : 1;\n            } else if (a_is_fiat && b_is_crypto) {\n                return -1;\n            }\n            return 1;\n        });\n    }\n\n    get sorted_mt5_list() {\n        // for MT5, standard, advanced, then synthetic indices\n        return this.props.mt5_login_list.slice().sort((a, b) => {\n            if (/demo/.test(a.group) && !/demo/.test(b.group)) {\n                return 1;\n            }\n            if (/demo/.test(b.group) && !/demo/.test(a.group)) {\n                return -1;\n            }\n            if (/vanuatu/.test(a.group)) {\n                return -1;\n            }\n            if (/svg/.test(a.group)) {\n                return 1;\n            }\n            return -1;\n        });\n    }\n\n    get can_upgrade () {\n        return !!(this.props.is_upgrade_enabled && this.props.is_virtual && this.props.can_upgrade_to);\n    }\n\n    get has_add_button() {\n        return this.can_upgrade || this.can_manage_currency;\n    }\n\n    get total_assets() {\n        return this.props.obj_total_balance.amount_real + this.props.obj_total_balance.amount_mt5;\n    }\n\n    render() {\n        if (!this.props.is_logged_in) return false;\n\n        return (\n            <div className='acc-switcher__list' ref={this.setWrapperRef} style={{ display: this.props.display }}>\n                <ThemedScrollbars\n                    autoHeight\n                    autoHide\n                    autoHeightMax={462}\n                    renderTrackHorizontal={props => <div {...props} className='track-horizontal' style={{ display: 'none' }} />}\n                    renderThumbHorizontal={props => <div {...props} className='thumb-horizontal' style={{ display: 'none' }} />}\n                >\n                    <div className='acc-switcher__list-wrapper'>\n                        <div>\n                            <AccountWrapper\n                                header={<Localize i18n_default_text='Deriv Accounts' />}\n                                is_visible={this.state.is_deriv_visible}\n                                toggleVisibility={() => { this.toggleVisibility('deriv'); }}\n                            >\n                                <div className='acc-switcher__accounts'>\n                                    {this.sorted_account_list.map((account) => (\n                                        <AccountList\n                                            key={account.loginid}\n                                            balance={this.props.accounts[account.loginid].balance}\n                                            currency={this.props.accounts[account.loginid].currency}\n                                            currency_icon={account.icon}\n                                            display_type={'currency'}\n                                            has_balance={'balance' in this.props.accounts[account.loginid]}\n                                            is_disabled={account.is_disabled}\n                                            is_virtual={account.is_virtual}\n                                            loginid={account.loginid}\n                                            onClickAccount={account.is_disabled\n                                                ? undefined\n                                                : this.doSwitch.bind(this, account.loginid)}\n                                            selected_loginid={this.props.account_loginid}\n                                        />\n                                    ))}\n                                </div>\n                                {this.has_add_button &&\n                                <ButtonAddAccount\n                                    onClick={this.can_upgrade ? this.onClickUpgrade : this.props.openRealAccountSignup}\n                                    text={<Localize i18n_default_text='Add Deriv account' />}\n                                />\n                                }\n                            </AccountWrapper>\n                        </div>\n                        {this.props.is_mt5_allowed &&\n                            <div>\n                                <AccountWrapper\n                                    header={<Localize i18n_default_text='DMT5 Accounts' />}\n                                    is_visible={this.state.is_dmt5_visible}\n                                    toggleVisibility={() => { this.toggleVisibility('dmt5'); }}\n                                >\n                                    {this.props.is_loading_mt5 ?\n                                        <Loading className='acc-switcher__loader' />\n                                        :\n                                        <React.Fragment>\n                                            {this.props.has_mt5_login ?\n                                                <div className='acc-switcher__accounts'>\n                                                    {this.sorted_mt5_list.map((account) => (\n                                                        <AccountList\n                                                            key={account.login}\n                                                            account_type={account.group}\n                                                            balance={account.balance}\n                                                            currency={account.currency}\n                                                            currency_icon={getMT5AccountType(account.group).replace(/^demo/, 'real')}\n                                                            has_balance={'balance' in account}\n                                                            has_demo_text={/^demo/.test(account.group)}\n                                                            loginid={account.login}\n                                                            onClickAccount={/^demo/.test(account.group) ? this.redirectToMt5Demo : this.redirectToMt5Real}\n                                                        />\n                                                    ))}\n                                                </div>\n                                                :\n                                                <ButtonAddAccount\n                                                    onClick={this.redirectToMt5Real}\n                                                    text={<Localize i18n_default_text='Add DMT5 account' />}\n                                                />\n                                            }\n                                        </React.Fragment>\n                                    }\n                                </AccountWrapper>\n                            </div>\n                        }\n                    </div>\n                </ThemedScrollbars>\n\n                <div className='acc-switcher__separator' />\n\n                <div className='acc-switcher__total'>\n                    <span>\n                        <Localize i18n_default_text='Total assets' />\n                    </span>\n                    <Popover\n                        alignment='bottom'\n                        message={this.props.has_mt5_login\n                            ? localize('Total assets in your Deriv and DMT5 accounts (excluding demo accounts).')\n                            : localize('Total assets in your Deriv accounts (excluding demo accounts).')\n                        }\n                    >\n                        <Icon icon='IconInfoOutline' className='acc-switcher__total-icon' />\n                    </Popover>\n                    <span className='acc-switcher__balance'>\n                        <Money\n                            currency={this.props.obj_total_balance.currency}\n                            amount={\n                                CurrencyUtils.formatMoney(\n                                    this.props.obj_total_balance.currency,\n                                    this.total_assets,\n                                    true\n                                )\n                            }\n                            should_format={false}\n                        />\n                    </span>\n                </div>\n\n                <div className='acc-switcher__separator' />\n\n                <div id='dt_logout_button' className='acc-switcher__logout' onClick={this.handleLogout}>\n                    <span className='acc-switcher__logout-text'>{localize('Log out')}</span>\n                    <Icon icon='IconLogout' className='acc-switcher__logout-icon drawer__icon' />\n                </div>\n            </div>\n        );\n    }\n}\n\nAccountSwitcher.propTypes = {\n    account_list          : PropTypes.array,\n    account_loginid       : PropTypes.string,\n    accounts              : PropTypes.object,\n    display               : PropTypes.string,\n    has_fiat              : PropTypes.bool,\n    has_mt5_login         : PropTypes.bool,\n    hideDialog            : PropTypes.func,\n    is_loading_mt5        : PropTypes.bool,\n    is_logged_in          : PropTypes.bool,\n    is_mt5_allowed        : PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    is_upgrade_enabled    : PropTypes.bool,\n    is_virtual            : PropTypes.bool,\n    is_visible            : PropTypes.bool,\n    mt5_login_list        : PropTypes.array,\n    obj_total_balance     : PropTypes.object,\n    toggle                : PropTypes.func,\n    toggleAccountsDialog  : PropTypes.func,\n    togglePositionsDrawer : PropTypes.func,\n    updateMt5LoginList    : PropTypes.func,\n};\n\nconst account_switcher = withRouter(connect(\n    ({ client, ui }) => ({\n        account_loginid       : client.loginid,\n        accounts              : client.accounts,\n        has_fiat              : client.has_fiat,\n        can_change_currency   : client.can_change_currency,\n        account_list          : client.account_list,\n        can_upgrade           : client.can_upgrade,\n        can_upgrade_to        : client.can_upgrade_to,\n        has_mt5_login         : client.has_mt5_login,\n        is_loading_mt5        : client.is_populating_mt5_account_list,\n        is_logged_in          : client.is_logged_in,\n        is_mt5_allowed        : client.is_mt5_allowed,\n        is_virtual            : client.is_virtual,\n        mt5_login_list        : client.mt5_login_list,\n        obj_total_balance     : client.obj_total_balance,\n        switchAccount         : client.switchAccount,\n        logoutClient          : client.logout,\n        updateMt5LoginList    : client.updateMt5LoginList,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        openRealAccountSignup : ui.openRealAccountSignup,\n        toggleAccountsDialog  : ui.toggleAccountsDialog,\n        togglePositionsDrawer : ui.togglePositionsDrawer,\n    }),\n)(AccountSwitcher));\n\nexport { account_switcher as AccountSwitcher };\n","import classNames          from 'classnames';\nimport PropTypes           from 'prop-types';\nimport React               from 'react';\nimport { CSSTransition }   from 'react-transition-group';\nimport Localize            from 'App/Components/Elements/localize.jsx';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\nimport Icon                from 'Assets/icon.jsx';\n\n// todo fix absolute path\n\nclass AccountInfo extends React.Component {\n    state = {\n        display: 'none',\n    };\n\n    showDialog = () => {\n        this.setState({ display: 'block' });\n    };\n\n    hideDialog = () => {\n        this.setState({ display: 'none' });\n    };\n\n    render() {\n        const {\n            balance,\n            currency,\n            is_dialog_on,\n            is_upgrade_enabled,\n            is_virtual,\n            toggleDialog,\n        } = this.props;\n\n        return (\n            <div className='acc-info__wrapper'>\n                <div className='acc-info__separator' />\n                <div\n                    className={classNames('acc-info', {\n                        'acc-info--show'      : is_dialog_on,\n                        'acc-info--is-virtual': is_virtual,\n                    })}\n                    onClick={toggleDialog}\n                >\n                    <span\n                        className='acc-info__id'\n                    >\n                        <Icon\n                            icon='IconAccountsCurrency'\n                            className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n                            type={is_virtual ? 'virtual' : (currency || 'real').toLowerCase()}\n                        />\n                    </span>\n                    {\n                        typeof balance !== 'undefined' &&\n                        <p className='acc-info__balance'>\n                            <span\n                                className={classNames('symbols', { [`symbols--${(currency || '').toLowerCase()}`]: currency })}\n                            />\n                            {!currency &&\n                            <Localize\n                                i18n_default_text='No currency assigned'\n                            />\n                            }\n                            {currency && balance}\n                        </p>\n                    }\n                    <Icon icon='IconArrowBold' className='acc-info__select-arrow' />\n                </div>\n                <CSSTransition\n                    in={is_dialog_on}\n                    timeout={200}\n                    classNames={{\n                        enter    : 'acc-switcher__wrapper--enter',\n                        enterDone: 'acc-switcher__wrapper--enter-done',\n                        exit     : 'acc-switcher__wrapper--exit',\n                    }}\n                    onEntered={this.showDialog}\n                    unmountOnExit\n                >\n                    <div className='acc-switcher__wrapper'>\n                        <AccountSwitcher\n                            is_visible={is_dialog_on}\n                            hideDialog={this.hideDialog}\n                            display={this.state.display}\n                            toggle={toggleDialog}\n                            is_upgrade_enabled={is_upgrade_enabled}\n                        />\n                    </div>\n                </CSSTransition>\n            </div>\n        );\n    }\n}\n\nAccountInfo.propTypes = {\n    account_type      : PropTypes.string,\n    balance           : PropTypes.string,\n    currency          : PropTypes.string,\n    is_dialog_on      : PropTypes.bool,\n    is_upgrade_enabled: PropTypes.bool,\n    is_virtual        : PropTypes.bool,\n    loginid           : PropTypes.string,\n    toggleDialog      : PropTypes.func,\n};\n\nexport default AccountInfo;\n"],"sourceRoot":""}