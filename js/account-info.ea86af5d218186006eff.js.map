{"version":3,"sources":["webpack:///./App/Containers/RealAccountSignup/upgrade-button.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Components/Layout/Header/account-info.jsx"],"names":["classNames","children","UpgradeButton","text","PropTypes","string","AccountSwitcher","setWrapperRef","node","wrapper_ref","handleClickOutside","event","accounts_toggle_btn","target","classList","contains","props","is_visible","toggle","handleLogout","is_positions_drawer_on","togglePositionsDrawer","requestLogout","then","cleanUp","document","addEventListener","this","removeEventListener","loginid","account_loginid","switchAccount","has_error","clearError","is_logged_in","real_accounts","account_list","filter","acc","is_virtual","vrt_account","find","main_account_title","length","localize","className","ref","map","account","id","key","onClick","doSwitch","bind","icon","type","can_manage_currency","openRealAccountSignup","outlined","i18n_default_text","ObjectUtils","isEmptyObject","virtual_loginid","is_upgrade_enabled","can_upgrade_to","window","open","urlFor","undefined","can_change_currency","has_fiat","React","Component","propTypes","array","func","bool","onClickUpgrade","upgrade_info","object","account_switcher","connect","client","ui","modules","can_upgrade","virtual_account_loginid","contract_trade","AccountInfo","balance","currency","is_dialog_on","toggleDialog","title","toLowerCase","in","timeout","enter","enterDone","exit","unmountOnExit","account_type"],"mappings":"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","file":"js/account-info.ea86af5d218186006eff.js","sourcesContent":["import classNames from 'classnames';\nimport { Button } from 'deriv-components';\nimport PropTypes  from 'prop-types';\nimport React      from 'react';\n\nconst UpgradeButton = ({ children, onClick, outlined }) => (\n    <div className={classNames('acc-switcher__new-account', {\n        'acc-switcher__new-account--outlined': outlined,\n    })}\n    >\n        <Button\n            id='upgrade-account'\n            onClick={onClick}\n            className='acc-switcher__new-account-link'\n        >\n            {children}\n        </Button>\n    </div>\n);\n\nUpgradeButton.propTypes = {\n    onClick : PropTypes.func,\n    outlined: PropTypes.bool,\n    text    : PropTypes.string,\n};\n\nexport default UpgradeButton;\n","import classNames        from 'classnames';\nimport PropTypes         from 'prop-types';\nimport React             from 'react';\nimport ObjectUtils       from 'deriv-shared/utils/object';\nimport { localize }      from 'App/i18n';\nimport { urlFor }        from '_common/url';\nimport UpgradeButton     from 'App/Containers/RealAccountSignup/upgrade-button.jsx';\nimport Icon              from 'Assets/icon.jsx';\nimport { requestLogout } from 'Services/index';\nimport { connect }       from 'Stores/connect';\nimport Localize          from 'App/Components/Elements/localize.jsx';\n\nclass AccountSwitcher extends React.Component {\n    setWrapperRef = (node) => {\n        this.wrapper_ref = node;\n    };\n\n    handleClickOutside = (event) => {\n        const accounts_toggle_btn = !(event.target.classList.contains('acc-info'));\n        if (this.wrapper_ref && !this.wrapper_ref.contains(event.target)\n            && this.props.is_visible && accounts_toggle_btn) {\n            this.props.toggle();\n        }\n    };\n\n    handleLogout = () => {\n        this.props.toggle();\n        if (this.props.is_positions_drawer_on) {\n            this.props.togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n        }\n        requestLogout().then(this.props.cleanUp);\n    };\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    async doSwitch(loginid) {\n        this.props.toggle();\n        if (this.props.account_loginid === loginid) return;\n        await this.props.switchAccount(loginid);\n\n        if (this.props.has_error) {\n            this.props.clearError();\n        }\n    }\n\n    get can_manage_currency () {\n        return this.props.can_change_currency ||\n            (!this.props.is_virtual && !this.props.has_fiat && this.props.can_upgrade_to);\n    }\n\n    render() {\n        if (!this.props.is_logged_in) return false;\n        // TODO: Once we allow other real accounts (apart from CR), assign correct title and group accounts into list with correct account title/types\n        // e.g - Real, Financial, Gaming, Investment\n        const real_accounts = this.props.account_list.filter(acc => !acc.is_virtual);\n        const vrt_account   = this.props.account_list.find(acc => acc.is_virtual);\n\n        const main_account_title = real_accounts.length > 1 ? localize('Real accounts') : localize('Real account');\n\n        return (\n            <div className='acc-switcher__list' ref={this.setWrapperRef}>\n                {\n                    // Make sure this block is not rendered if there are no real accounts\n                    !!(this.props.account_list.length && real_accounts.length) &&\n                    <div className='acc-switcher__list-group'>\n                        <span className='acc-switcher__list-title'>\n                            {main_account_title}\n                        </span>\n                        <div className='acc-switcher__accounts'>\n                            {\n                                real_accounts.map((account) => (\n                                    <div\n                                        id={`dt_${account.loginid}`}\n                                        key={account.loginid}\n                                        className={classNames('acc-switcher__account', {\n                                            'acc-switcher__account--selected': (account.loginid === this.props.account_loginid),\n                                        })}\n                                        onClick={this.doSwitch.bind(this, account.loginid)}\n                                    >\n                                        <span className={'acc-switcher__id'}>\n                                            <Icon\n                                                icon='IconAccountsCurrency'\n                                                className={`acc-switcher__id-icon acc-switcher__id-icon--${account.icon}`}\n                                                type={account.icon}\n                                            />\n                                            {account.loginid}\n                                        </span>\n                                    </div>\n                                ))\n                            }\n                        </div>\n\n                        {this.can_manage_currency &&\n                            <UpgradeButton\n                                onClick={this.props.openRealAccountSignup}\n                                outlined\n                            >\n                                <Icon icon='IconAdd' />\n                                <div className='btn__text'>\n                                    <Localize\n                                        i18n_default_text='Add/manage account'\n                                    />\n                                </div>\n                            </UpgradeButton>\n                        }\n                    </div>\n                }\n                {\n                    !ObjectUtils.isEmptyObject(vrt_account) &&\n                    <div className='acc-switcher__list--virtual'>\n                        <span className='acc-switcher__list-title'>\n                            {localize('Demo account')}\n                        </span>\n                        <div className='acc-switcher__accounts'>\n                            <div\n                                id={`dt_${this.props.virtual_loginid}`}\n                                className={classNames('acc-switcher__account', {\n                                    'acc-switcher__account--selected': (this.props.virtual_loginid === this.props.account_loginid),\n                                })}\n                                onClick={this.doSwitch.bind(this, this.props.virtual_loginid)}\n                            >\n                                <span className={classNames('acc-switcher__id', 'acc-switcher__id--virtual')}>\n                                    {this.props.virtual_loginid}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                }\n                { !!(this.props.is_upgrade_enabled && this.props.is_virtual && this.props.can_upgrade_to) &&\n                <UpgradeButton\n                    onClick={() => {\n                        if (this.props.can_upgrade_to === 'svg') {\n                            this.props.openRealAccountSignup();\n                        } else {\n                            window.open(urlFor('new_account/maltainvestws', undefined, undefined, true));\n                        }\n                    }}\n                    outlined\n                >\n                    <Icon icon='IconAdd' />\n                    <div className='btn__text'>\n                        <Localize\n                            i18n_default_text='Add a real account'\n                        />\n                    </div>\n                </UpgradeButton>\n                }\n                <div id='dt_logout_button' className='acc-switcher__logout' onClick={this.handleLogout}>\n                    <span className='acc-switcher__logout-text'>{localize('Log out')}</span>\n                    <Icon icon='IconLogout' className='acc-switcher__logout-icon drawer__icon' />\n                </div>\n            </div>\n        );\n    }\n}\n\nAccountSwitcher.propTypes = {\n    account_list          : PropTypes.array,\n    account_loginid       : PropTypes.string,\n    cleanUp               : PropTypes.func,\n    clearError            : PropTypes.func,\n    has_error             : PropTypes.bool,\n    has_fiat              : PropTypes.bool,\n    is_logged_in          : PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    is_upgrade_enabled    : PropTypes.bool,\n    is_virtual            : PropTypes.bool,\n    is_visible            : PropTypes.bool,\n    onClickUpgrade        : PropTypes.func,\n    toggle                : PropTypes.func,\n    togglePositionsDrawer : PropTypes.func,\n    upgrade_info          : PropTypes.object,\n    virtual_loginid       : PropTypes.string,\n};\n\nconst account_switcher = connect(\n    ({ client, ui, modules }) => ({\n        has_fiat              : client.has_fiat,\n        can_change_currency   : client.can_change_currency,\n        account_list          : client.account_list,\n        can_upgrade           : client.can_upgrade,\n        can_upgrade_to        : client.can_upgrade_to,\n        account_loginid       : client.loginid,\n        is_logged_in          : client.is_logged_in,\n        is_virtual            : client.is_virtual,\n        switchAccount         : client.switchAccount,\n        upgrade_info          : client.upgrade_info,\n        cleanUp               : client.cleanUp,\n        virtual_loginid       : client.virtual_account_loginid,\n        clearError            : modules.contract_trade.clearError,\n        has_error             : modules.contract_trade.has_error,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        openRealAccountSignup : ui.openRealAccountSignup,\n        togglePositionsDrawer : ui.togglePositionsDrawer,\n    }),\n)(AccountSwitcher);\n\nexport { account_switcher as AccountSwitcher };\n","import classNames          from 'classnames';\nimport PropTypes           from 'prop-types';\nimport React               from 'react';\nimport { CSSTransition }   from 'react-transition-group';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\nimport Icon                from 'Assets/icon.jsx';\n\n// todo fix absolute path\n\nconst AccountInfo = ({\n    balance,\n    currency,\n    loginid,\n    is_dialog_on,\n    is_upgrade_enabled,\n    is_virtual,\n    onClickUpgrade,\n    toggleDialog,\n}) => (\n    <div className='acc-info__wrapper'>\n        <div\n            className={classNames('acc-info', {\n                'acc-info--show'      : is_dialog_on,\n                'acc-info--is-virtual': is_virtual,\n            })}\n            onClick={toggleDialog}\n        >\n            <p\n                className='acc-info__id'\n                title={loginid}\n            >\n                {loginid}&nbsp;\n            </p>\n            {\n                typeof balance !== 'undefined' &&\n                <p className='acc-info__balance'>\n                    <span\n                        className={classNames('symbols', { [`symbols--${(currency || '').toLowerCase()}`]: currency })}\n                    />\n                    {balance}\n                </p>\n            }\n            <Icon icon='IconArrowBold' className='acc-info__select-arrow' />\n        </div>\n        <CSSTransition\n            in={is_dialog_on}\n            timeout={200}\n            classNames={{\n                enter    : 'acc-switcher__wrapper--enter',\n                enterDone: 'acc-switcher__wrapper--enter-done',\n                exit     : 'acc-switcher__wrapper--exit',\n            }}\n            unmountOnExit\n        >\n            <div className='acc-switcher__wrapper'>\n                <AccountSwitcher\n                    is_visible={is_dialog_on}\n                    toggle={toggleDialog}\n                    is_upgrade_enabled={is_upgrade_enabled}\n                    onClickUpgrade={onClickUpgrade}\n                />\n            </div>\n        </CSSTransition>\n    </div>\n);\n\nAccountInfo.propTypes = {\n    account_type      : PropTypes.string,\n    balance           : PropTypes.string,\n    currency          : PropTypes.string,\n    is_dialog_on      : PropTypes.bool,\n    is_upgrade_enabled: PropTypes.bool,\n    is_virtual        : PropTypes.bool,\n    loginid           : PropTypes.string,\n    onClickUpgrade    : PropTypes.func,\n    toggleDialog      : PropTypes.func,\n};\n\nexport default AccountInfo;\n"],"sourceRoot":""}