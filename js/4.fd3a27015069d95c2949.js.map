{"version":3,"sources":["webpack:///./App/Containers/CashierModal/error.jsx","webpack:///./App/Containers/CashierModal/virtual.jsx","webpack:///./App/Containers/CashierModal/no-balance.jsx","webpack:///./App/Containers/CashierModal/PaymentAgentTransfer/payment-agent-transfer-form.jsx","webpack:///./App/Containers/CashierModal/PaymentAgentTransfer/payment-agent-transfer-receipt.jsx","webpack:///./App/Containers/CashierModal/payment-agent-transfer.jsx"],"names":["onClickButton","button_text","footer","className","header","message","button_link","Error","address_line_1","address_postcode","localize","address_state","email","phone","residence","clearErrorMessage","closeCashierModal","toggleCashierModal","acceptTNC","tncApproval","AccountError","props","details","map","error_fields","join","interpolation","escapeValue","propTypes","error","connect","modules","setErrorMessage","this","setTimeout","Virtual","has_real_account","client","openRealAccountSignup","render","currency","NoBalance","setModalIndex","errors","amount","type","decimals","CurrencyUtils","getDecimalPlaces","transfer_limit","getPreBuildDVRs","number","values","PaymentAgentTransferForm","validateTransfer","balance","onTransferPassthrough","requestPaymentAgentTransfer","description","transfer_to","loginid","payment_agent_transfer","actions","setSubmitting","validateTransferPassthrough","isSubmitting","handleChange","field","touched","error_message","Component","statement","resetPaymentAgentTransfer","PaymentAgentTransferReceipt","name","receipt","client_name","PaymentAgentTransfer","setActiveTab","container","onMount","onUnMount","is_virtual","is_loading","is_show_full_page","Fragment","is_transfer_successful","React","PropTypes","string","object","bool","func","cashier","config","onMountPaymentAgentTransfer"],"mappings":"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","file":"js/4.fd3a27015069d95c2949.js","sourcesContent":["import PropTypes    from 'prop-types';\nimport React        from 'react';\nimport { Button }   from 'deriv-components';\nimport Localize     from 'App/Components/Elements/localize.jsx';\nimport ButtonLink   from 'App/Components/Routes/button-link.jsx';\nimport { localize } from 'App/i18n';\nimport Icon         from 'Assets/icon.jsx';\nimport { WS }       from 'Services';\nimport { connect }  from 'Stores/connect';\n\nconst ErrorComponent = ({\n    header,\n    message,\n    button_link,\n    onClickButton,\n    button_text,\n    footer,\n}) => (\n    <div className='cashier__wrapper'>\n        <Icon icon='IconCashierError' className='cashier-error__icon' />\n        {header && <h2 className='cashier-error__header'>{header}</h2>}\n        {message && <p className='cashier__paragraph'>{message}</p>}\n        {button_link &&\n        <ButtonLink\n            className='cashier-error__button'\n            to={button_link}\n            onClick={onClickButton}\n            primary\n        >\n            <span className='btn__text'>{button_text}</span>\n        </ButtonLink>\n        }\n        {!button_link && button_text &&\n            <Button\n                className='cashier-error__button'\n                onClick={onClickButton}\n                text={button_text}\n                primary\n            />\n        }\n        {footer && <h2 className='cashier-error__footer'>{footer}</h2>}\n    </div>\n);\n\nclass Error extends React.Component {\n    error_fields = {\n        address_city    : localize('Town/City'),\n        address_line_1  : localize('First line of home address'),\n        address_postcode: localize('Postal Code/ZIP'),\n        address_state   : localize('State/Province'),\n        email           : localize('Email address'),\n        phone           : localize('Telephone'),\n        residence       : localize('Country of Residence'),\n    };\n\n    onClickButton = () => {\n        if (typeof this.props.error.onClickButton === 'function') {\n            this.props.error.onClickButton();\n        }\n        this.clearErrorMessage();\n    }\n\n    closeCashierModal = () => {\n        this.onClickButton();\n        this.props.toggleCashierModal();\n    }\n\n    clearErrorMessage = () => {\n        this.props.setErrorMessage('');\n    };\n\n    acceptTNC = async () => {\n        await WS.tncApproval();\n        this.onClickButton();\n    };\n\n    render() {\n        let AccountError;\n        switch (this.props.error.code) {\n            case 'InvalidToken':\n                AccountError = (\n                    <ErrorComponent\n                        header={localize('Identity confirmation failed')}\n                        message={<Localize i18n_default_text='It looks like your link is incorrect or no longer valid.' />}\n                        onClickButton={this.onClickButton}\n                        button_text={localize('Request a new link')}\n                    />\n                );\n                break;\n            case 'ASK_TNC_APPROVAL':\n                AccountError = (\n                    <ErrorComponent\n                        header={localize('Our terms and conditions have changed')}\n                        message={\n                            <Localize\n                                i18n_default_text='Please accept our updated <0>terms and conditions</0> to continue.'\n                                components={[ (\n                                    <a\n                                        key={0}\n                                        className='link'\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                        href='https://www.deriv.com/terms-and-conditions/#general'\n                                    />\n                                ) ]}\n                            />\n                        }\n                        onClickButton={this.acceptTNC}\n                        button_text={localize('I accept')}\n                    />\n                );\n                break;\n            case 'ASK_FIX_DETAILS':\n                AccountError = (\n                    <ErrorComponent\n                        header={localize('Update your personal details')}\n                        message={\n                            <React.Fragment>\n                                <Localize i18n_default_text={'We can\\'t validate your personal details because there is some information missing.'} />&nbsp;\n                                {this.props.error.fields ?\n                                    <Localize\n                                        i18n_default_text={'Please update your {{details}} to continue.'}\n                                        values={{\n                                            details      : this.props.error.fields.map(field => (this.error_fields[field] || field)).join(', '),\n                                            interpolation: { escapeValue: false },\n                                        }}\n                                    />\n                                    :\n                                    <Localize i18n_default_text={'Please update your details to continue.'} />\n                                }\n                            </React.Fragment>\n                        }\n                        button_link='/account/personal-details'\n                        onClickButton={this.closeCashierModal}\n                        button_text={localize('Update my details')}\n                        footer={\n                            <Localize\n                                i18n_default_text='Need help? <0>Contact us</0>.'\n                                components={[ (\n                                    <a\n                                        key={0}\n                                        className='link'\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                        href='https://www.deriv.com/help-centre/'\n                                    />\n                                ) ]}\n                            />\n                        }\n                    />\n                );\n                break;\n            case 'WrongResponse':\n                AccountError = (\n                    <ErrorComponent\n                        header={this.props.error.message}\n                        onClickButton={this.onClickButton}\n                        button_text={localize('Try again')}\n                    />\n                );\n                break;\n            default:\n                AccountError = <ErrorComponent header={this.props.error.message} />;\n                break;\n        }\n        return AccountError;\n    }\n}\n\nError.propTypes = {\n    error             : PropTypes.object,\n    setErrorMessage   : PropTypes.func,\n    toggleCashierModal: PropTypes.func,\n};\n\nexport default connect(\n    ({ modules, ui }) => ({\n        setErrorMessage   : modules.cashier.setErrorMessage,\n        toggleCashierModal: ui.toggleCashierModal,\n    })\n)(Error);\n","import PropTypes    from 'prop-types';\nimport React        from 'react';\nimport { Button }   from 'deriv-components';\nimport Localize     from 'App/Components/Elements/localize.jsx';\nimport { localize } from 'App/i18n';\nimport { connect }  from 'Stores/connect';\n\nclass Virtual extends React.Component {\n    onClickSignup = () => {\n        this.props.toggleCashierModal();\n        setTimeout(this.props.openRealAccountSignup, 500);\n    };\n\n    render = () => {\n        return (\n            <div className='cashier__wrapper cashier__center-align-wrapper'>\n                <div className='cashier__center-align-content'>\n                    <h2 className='cashier-error__header cashier__virtual-header'>\n                        <Localize i18n_default_text={'You\\'re currently using a demo account'} />\n                    </h2>\n                    {this.props.has_real_account ?\n                        <React.Fragment>\n                            <p className='cashier__paragraph cashier__text'>\n                                <Localize i18n_default_text='You need to switch to a real money account to use this feature.' />\n                                <br />\n                                <Localize i18n_default_text='You can do this by selecting a real account from the Account Switcher.' />\n                            </p>\n                            <div className='cashier__account-switch-icon' />\n                        </React.Fragment>\n                        :\n                        <React.Fragment>\n                            <p className='cashier__paragraph cashier__text'>\n                                <Localize i18n_default_text={'You need a real money account to use this feature. It\\'s easy to create a real money account and start trading.'} />\n                            </p>\n                            <Button\n                                className='cashier-error__button'\n                                has_effect\n                                text={localize('Create my real account')}\n                                onClick={this.onClickSignup}\n                                primary\n                            />\n                        </React.Fragment>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nVirtual.propTypes = {\n    has_real_account     : PropTypes.bool,\n    openRealAccountSignup: PropTypes.func,\n    toggleCashierModal   : PropTypes.func,\n};\n\nexport default connect(\n    ({ client, ui }) => ({\n        has_real_account     : client.has_any_real_account,\n        openRealAccountSignup: ui.openRealAccountSignup,\n        toggleCashierModal   : ui.toggleCashierModal,\n    })\n)(Virtual);\n\n","import PropTypes        from 'prop-types';\nimport React            from 'react';\nimport { Button }       from 'deriv-components';\nimport Icon             from 'Assets/icon.jsx';\nimport Localize         from 'App/Components/Elements/localize.jsx';\nimport { localize }     from 'App/i18n';\nimport { connect }      from 'Stores/connect';\n\nclass NoBalance extends React.Component {\n    onClickDeposit = () => {\n        // index of deposit tab in the cashier modal is 0\n        this.props.setModalIndex(0);\n    };\n\n    render = () => {\n        return (\n            <div className='cashier__wrapper cashier__no-balance'>\n                <Icon icon='IconNoBalance' className='cashier__no-balance-icon' />\n                <h2 className='withdraw__header'><Localize i18n_default_text='You have no funds in your {{currency}} account' values={{ currency: this.props.currency.toUpperCase() }} /></h2>\n                <p className='cashier__text'><Localize i18n_default_text='Please make a deposit to use this feature.' /></p>\n                <Button\n                    className='cashier__no-balance-button'\n                    has_effect\n                    text={localize('Deposit now')}\n                    onClick={this.onClickDeposit}\n                    primary\n                    large\n                />\n            </div>\n        );\n    }\n}\n\nNoBalance.propTypes = {\n    currency     : PropTypes.string,\n    setModalIndex: PropTypes.func,\n};\n\nexport default connect(\n    ({ client, ui }) => ({\n        currency     : client.currency,\n        setModalIndex: ui.setModalIndex,\n    })\n)(NoBalance);\n\n","import classNames             from 'classnames';\nimport PropTypes              from 'prop-types';\nimport React                  from 'react';\nimport {\n    Button,\n    Input }                   from 'deriv-components';\nimport {\n    Field,\n    Formik,\n    Form }                    from 'formik';\nimport CurrencyUtils          from 'deriv-shared/utils/currency';\nimport Localize               from 'App/Components/Elements/localize.jsx';\nimport { localize }           from 'App/i18n';\nimport Icon                   from 'Assets/icon.jsx';\nimport { connect }            from 'Stores/connect';\nimport {\n    getPreBuildDVRs,\n    validNumber }             from 'Utils/Validator/declarative-validation-rules';\n\nconst validateTransfer = (values, { balance, currency, transfer_limit }) => {\n    const errors = {};\n\n    if (!values.loginid  || !/^[A-Za-z]+[0-9]+$/.test(values.loginid)) {\n        errors.loginid = localize('Please enter a valid client login ID.');\n    }\n\n    if (!values.amount) {\n        errors.amount = localize('This field is required.');\n    } else if (\n        !validNumber(values.amount, {\n            type    : 'float',\n            decimals: CurrencyUtils.getDecimalPlaces(currency),\n            ...(transfer_limit.min && {\n                min: transfer_limit.min,\n                max: transfer_limit.max,\n            }),\n        })) {\n        errors.amount = getPreBuildDVRs().number.message;\n    } else if (+balance < +values.amount) {\n        errors.amount = localize('Insufficient balance.');\n    }\n\n    if (values.description && !/^[0-9A-Za-z .,'-]{0,250}$/.test(values.description.replace(/\\n/g, ' '))) {\n        errors.description = localize('Please enter a valid description.');\n    }\n\n    return errors;\n};\n\nclass PaymentAgentTransferForm extends React.Component {\n    validateTransferPassthrough = (values) => (\n        validateTransfer(values, {\n            balance       : this.props.balance,\n            currency      : this.props.currency,\n            transfer_limit: this.props.transfer_limit,\n        })\n    );\n\n    onTransferPassthrough = async (values, actions) => {\n        const payment_agent_transfer = await this.props.requestPaymentAgentTransfer({\n            amount     : values.amount,\n            currency   : this.props.currency,\n            description: values.description.replace(/\\n/g, ' '),\n            transfer_to: values.loginid,\n        });\n        if (payment_agent_transfer.error) {\n            actions.setSubmitting(false);\n        }\n    };\n\n    render() {\n        return (\n            <div className='cashier__wrapper--align-left'>\n                <h2 className='cashier__header payment-agent-transfer__header'>\n                    <Localize i18n_default_text='Transfer to client' />\n                </h2>\n                <Formik\n                    initialValues={{\n                        loginid    : '',\n                        amount     : '',\n                        description: '',\n                    }}\n                    validate={this.validateTransferPassthrough}\n                    onSubmit={this.onTransferPassthrough}\n                >\n                    {\n                        ({ errors, isSubmitting, isValid, touched, handleChange }) => (\n                            <Form noValidate>\n                                <Field name='loginid'>\n                                    {({ field }) => (\n                                        <Input\n                                            { ...field }\n                                            onChange={(e) => {\n                                                this.props.setErrorMessage('');\n                                                handleChange(e);\n                                            }}\n                                            className='payment-agent-transfer__input'\n                                            type='text'\n                                            label={localize('Client login ID')}\n                                            error={ touched.loginid && errors.loginid }\n                                            required\n                                            autoComplete='off'\n                                            maxLength='20'\n                                        />\n                                    )}\n                                </Field>\n                                <Field name='amount'>\n                                    {({ field }) => (\n                                        <Input\n                                            { ...field }\n                                            onChange={(e) => {\n                                                this.props.setErrorMessage('');\n                                                handleChange(e);\n                                            }}\n                                            className='payment-agent-transfer__input dc-input--no-placeholder'\n                                            type='text'\n                                            label={localize('Amount')}\n                                            error={ touched.amount && errors.amount }\n                                            required\n                                            leading_icon={\n                                                <span className={classNames('cashier__amount-symbol', 'symbols', `symbols--${(this.props.currency || '').toLowerCase()}`)} />\n                                            }\n                                            autoComplete='off'\n                                            maxLength='30'\n                                        />\n                                    )}\n                                </Field>\n                                <Field name='description'>\n                                    {({ field }) => (\n                                        <Input\n                                            { ...field }\n                                            onChange={(e) => {\n                                                this.props.setErrorMessage('');\n                                                handleChange(e);\n                                            }}\n                                            type='textarea'\n                                            label={localize('Description')}\n                                            error={ touched.description && errors.description }\n                                            required\n                                            autoComplete='off'\n                                            maxLength='250'\n                                        />\n                                    )}\n                                </Field>\n                                <div className='cashier__form-submit'>\n                                    {this.props.error_message &&\n                                    <React.Fragment>\n                                        <Icon icon='IconEmergency' className='cashier__form-error-icon' />\n                                        <Icon icon='IconError' className='cashier__form-error-small-icon' />\n                                        <p className='cashier__form-error'>\n                                            {this.props.error_message}\n                                        </p>\n                                    </React.Fragment>\n                                    }\n                                    <Button\n                                        className='cashier__form-submit-button'\n                                        type='submit'\n                                        is_disabled={!isValid || isSubmitting}\n                                        primary\n                                    >\n                                        <Localize i18n_default_text='Transfer' />\n                                    </Button>\n                                </div>\n                            </Form>\n                        )\n                    }\n                </Formik>\n            </div>\n        );\n    }\n}\n\nPaymentAgentTransferForm.propTypes = {\n    balance                    : PropTypes.string,\n    currency                   : PropTypes.string,\n    error                      : PropTypes.object,\n    requestPaymentAgentTransfer: PropTypes.func,\n    setErrorMessage            : PropTypes.func,\n    transfer_limit             : PropTypes.object,\n};\n\nexport default connect(\n    ({ client, modules }) => ({\n        balance                    : client.balance,\n        currency                   : client.currency,\n        error_message              : modules.cashier.config.payment_agent_transfer.error.message,\n        requestPaymentAgentTransfer: modules.cashier.requestPaymentAgentTransfer,\n        setErrorMessage            : modules.cashier.setErrorMessage,\n        transfer_limit             : modules.cashier.config.payment_agent_transfer.transfer_limit,\n    })\n)(PaymentAgentTransferForm);\n","import classNames     from 'classnames';\nimport PropTypes      from 'prop-types';\nimport React          from 'react';\nimport { withRouter } from 'react-router';\nimport { Button }     from 'deriv-components';\nimport CurrencyUtils  from 'deriv-shared/utils/currency';\nimport Localize       from 'App/Components/Elements/localize.jsx';\nimport { localize }   from 'App/i18n';\nimport Icon           from 'Assets/icon.jsx';\nimport routes         from 'Constants/routes';\nimport { connect }    from 'Stores/connect';\n\nclass PaymentAgentTransferReceipt extends React.Component {\n    openStatement = () => {\n        this.props.history.push(routes.statement);\n        this.props.resetPaymentAgentTransfer();\n        this.props.toggleCashierModal();\n    };\n\n    render() {\n        return (\n            <div className='cashier__wrapper account-transfer__receipt'>\n                <div className='cashier__success'>\n                    <h2 className='cashier__header'>\n                        <Localize i18n_default_text='Your funds have been transferred to {{name}}.' values={{ name: this.props.receipt.client_name }} />\n                    </h2>\n                    <div className='cashier__transferred-amount cashier__text--bold'>\n                        <span\n                            className={classNames('symbols', `symbols--${this.props.currency.toLowerCase()}`)}\n                        />\n                        {CurrencyUtils.formatMoney(this.props.currency, this.props.receipt.amount_transferred, true)}\n                    </div>\n                    <div className='cashier__transferred-details-wrapper'>\n                        <span className='account-transfer__transfer-details-from'>\n                            <Icon\n                                icon='IconAccountsCurrency'\n                                type={this.props.currency.toLowerCase()}\n                                height={16}\n                                width={16}\n                            />\n                            <span className='cashier__transferred-details'>\n                                <span className='cashier__text--bold'>{this.props.currency.toUpperCase()}</span>&nbsp;({this.props.loginid})\n                            </span>\n                        </span>\n                        <Icon className='cashier__transferred-icon' icon='IconBack' />\n                        <span className='account-transfer__transfer-details-to'>\n                            <Icon icon='IconUser' />\n                            <span className='cashier__transferred-details'>\n                                <span className='cashier__text--bold'>{this.props.receipt.client_name}</span>&nbsp;({this.props.receipt.client_id})\n                            </span>\n                        </span>\n                    </div>\n                    <div className='cashier__form-submit payment-agent-transfer__buttons'>\n                        <Button\n                            className='payment-agent__statement-button'\n                            has_effect\n                            text={localize('View in statement')}\n                            onClick={this.openStatement}\n                            tertiary\n                        />\n                        <Button\n                            className='payment-agent__done-button payment-agent-transfer__done-button'\n                            has_effect\n                            text={localize('Done')}\n                            onClick={this.props.resetPaymentAgentTransfer}\n                            primary\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nPaymentAgentTransferReceipt.propTypes = {\n    currency                 : PropTypes.string,\n    loginid                  : PropTypes.string,\n    receipt                  : PropTypes.object,\n    resetPaymentAgentTransfer: PropTypes.func,\n    toggleCashierModal       : PropTypes.func,\n};\n\nexport default withRouter(connect(\n    ({ client, modules, ui }) => ({\n        currency                 : client.currency,\n        loginid                  : client.loginid,\n        receipt                  : modules.cashier.config.payment_agent_transfer.receipt,\n        resetPaymentAgentTransfer: modules.cashier.resetPaymentAgentTransfer,\n        toggleCashierModal       : ui.toggleCashierModal,\n    })\n)(PaymentAgentTransferReceipt));\n","import PropTypes                   from 'prop-types';\nimport React                       from 'react';\nimport { connect }                 from 'Stores/connect';\nimport PaymentAgentTransferForm    from './PaymentAgentTransfer/payment-agent-transfer-form.jsx';\nimport PaymentAgentTransferReceipt from './PaymentAgentTransfer/payment-agent-transfer-receipt.jsx';\nimport NoBalance                   from './no-balance.jsx';\nimport Error                       from './error.jsx';\nimport Virtual                     from './virtual.jsx';\nimport Loading                     from '../../../templates/_common/components/loading.jsx';\n\nclass PaymentAgentTransfer extends React.Component {\n    componentDidMount() {\n        this.props.setActiveTab(this.props.container);\n        this.props.onMount();\n    }\n\n    componentWillUnmount() {\n        this.props.onUnMount();\n    }\n\n    render() {\n        if (this.props.is_virtual) {\n            return <Virtual />;\n        }\n        if (this.props.is_loading) {\n            return <Loading className='cashier__loader' />;\n        }\n        if (this.props.error.is_show_full_page) {\n            // for errors with CTA hide the form and show the error,\n            // for others show them at the bottom of the form next to submit button\n            return <Error error={this.props.error} />;\n        }\n        if (!+this.props.balance) {\n            return <NoBalance />;\n        }\n        return (\n            <React.Fragment>\n                {this.props.is_transfer_successful ?\n                    <PaymentAgentTransferReceipt />\n                    :\n                    <PaymentAgentTransferForm error={this.props.error} />\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nPaymentAgentTransfer.propTypes = {\n    balance               : PropTypes.string,\n    container             : PropTypes.string,\n    error                 : PropTypes.object,\n    is_loading            : PropTypes.bool,\n    is_transfer_successful: PropTypes.bool,\n    is_virtual            : PropTypes.bool,\n    onMount               : PropTypes.func,\n    onUnMount             : PropTypes.func,\n    setActiveTab          : PropTypes.func,\n};\n\nexport default connect(\n    ({ client, modules }) => ({\n        balance               : client.balance,\n        is_virtual            : client.is_virtual,\n        container             : modules.cashier.config.payment_agent_transfer.container,\n        error                 : modules.cashier.config.payment_agent_transfer.error,\n        is_loading            : modules.cashier.is_loading,\n        is_transfer_successful: modules.cashier.config.payment_agent_transfer.is_transfer_successful,\n        onMount               : modules.cashier.onMountPaymentAgentTransfer,\n        onUnMount             : modules.cashier.resetPaymentAgentTransfer,\n        setActiveTab          : modules.cashier.setActiveTab,\n    })\n)(PaymentAgentTransfer);\n"],"sourceRoot":""}