{"version":3,"sources":["webpack:///./App/Containers/SetResidenceModal/set-residence-form.jsx","webpack:///./App/Containers/SetResidenceModal/set-residence-modal.jsx"],"names":["children","header_text","errors","touched","setFieldValue","residence_list","class_prefix","localize","residence","value","SetResidenceForm","PropTypes","string","error","onSetResidencePassthrough","index_of_selection","validateResidence","values","isSubmitting","isResidenceText","website_name","onSetResidence","modded_values","Component","SetResidenceModal","disableApp","is_loading","is_visible","toggleSetResidenceModal","length","enableApp","propTypes","client","is_set_residence_modal_visible","ui"],"mappings":"2YAcM,MANFA,SAME,OALFC,iBACAC,OAIE,IAJFA,EAIE,kBAHFC,EAGE,EAHFA,SACAC,EAEE,cADFC,IACE,OACF,EACI,UAAK,EAAS,EAAKC,cACZ,EACH,iBAAG,WAAS,cAAKA,OAAjB,UACKL,GAHT,OAMI,8BAAG,GAAS,IAAKK,cAAL,KAAZ,UACc,YAEd,cAAO,GAAK,uBAAZ,UACK,kIAGO,YACA,MAAS,QACT,yBAJJ,YAKI,aALJ,MAMI,UAAQC,UAAS,EANrB,qBAOI,gBAAgBC,SAChB,YACA,yBAAaH,kBACb,QAAe,WACX,sBAAGI,EAAH,6BAAqBL,SAAgC,GAArD,cAZX,SAiBJJ,OA5BT,gCAiCJU,IAGIT,EAAgBU,UAAUC,CAC1BP,aAAgBM,KAJpB,wBAOA,YAAeD,W,i4CClCX,MAAYF,SAAW,KACnBN,SAAOM,qBAAP,2B,yIAcA,sDACA,EAAIK,GAAO,a,0DAIX,uBAA0B,SAA1B,GACA,K,4TAIwBR,G,EADnB,E,aAEL,MAAMS,WACF,MAAMC,KAAN,a,mBACA,EAAmB,iBAOA,WAAYC,oBAAkBC,CAA9B,UAFf,iBAGI,kBAAWH,KAHf,cAKK,WAAGI,IAAH,4BAnCiDC,SAAV,SAApD,KAEA,KAAIJ,UACmGK,CAAF,IAAjG,2BACH,kBAGL,oCAbJ,oG,oCASYlB,aAAA,E,SAgC0CE,OAAjC,SAVT,Y,+BACAiB,SAAeC,EAAe,MAElC,E,+UACI,OAAK,UAAU,aAEWd,EAAW,+BAQb,SAAQN,GACR,MAFJ,eAGI,IAAeE,OACf,IAAgBC,OAEhB,kBAAG,EAAU,UAAb,OACKE,IAAS,iFAEd,CACI,SAA8C,UAAF,cADhD,EAEI,eAFJ,GAGI,kBAAsBC,KACtB,UAAMD,0BACN,mBAAO,qHAdf,UAHX,0BAPb,8D,kGAlByBgB,S,8CA2DjC,IAAMC,WAQA,EANFC,WAME,mBALFC,KAKE,mBAJFC,OAIE,MADFC,YAEA,IAAIvB,IAAewB,UACnB,EACI,aACI,EAAYF,aACZ,EAAYF,aACZ,EAAWK,EAHf,eAII,EAAYJ,EAAU,eACtB,EAAmB,0BALvB,OAOI,SAAC,EAAD,KACI,kBAAgBL,IADpB,CAEI,aACA,aACAS,UAAWA,EAXnB,WADJ,aAVJ,wB,qBA4BAN,eAAkBO,EACdN,eAAgBd,EAChBmB,eAAgBnB,EAChBe,UAAgBf,MAHU,EAA9B,WASA,eACI,uCAAOqB,KAAP,WAAqB,SACjBL,eAA2B,IAACM,KAC5BL,mBAAuB,QAAKA,aAEjB,mBAAiBH,SAJX,GAKjBC,QAAyBQ,GACzBb,IAAyBW,OACzB3B,OAPJ,4CASFmB,wBAVF,0B,yIAKmB,C","file":"js/core.set-residence-modal.1cd475823caed1285824.js","sourcesContent":["import { Autocomplete } from 'deriv-components';\nimport { Field }        from 'formik';\nimport PropTypes        from 'prop-types';\nimport React            from 'react';\nimport { localize }     from 'App/i18n';\n\nconst SetResidenceForm = ({\n    class_prefix = 'set-residence',\n    children,\n    header_text,\n    errors,\n    touched,\n    setFieldValue,\n    residence_list,\n}) => {\n    return (\n        <div className={`${class_prefix}__residence-selection`}>\n            { !!header_text &&\n            <p className={`${class_prefix}__heading`}>\n                {header_text}\n            </p>\n            }\n            <p className={`${class_prefix}__${header_text ? 'text' : 'heading'}`}>\n                {localize('Where do you live?')}\n            </p>\n            <Field name='residence'>\n                {({ field }) => (\n                    <Autocomplete\n                        { ...field }\n                        autoComplete='off'\n                        className={`${class_prefix}__residence-field`}\n                        dropdown_offset='3.2rem'\n                        type='text'\n                        label={ localize('Choose country') }\n                        error={ touched.residence && errors.residence }\n                        required\n                        list_items={ residence_list }\n                        onItemSelection={\n                            ({ value, text }) => setFieldValue('residence', value ? text : '', true)\n                        }\n                    />\n                )}\n            </Field>\n            {children}\n        </div>\n    );\n};\n\nSetResidenceForm.propTypes = {\n    children      : PropTypes.node,\n    class_prefix  : PropTypes.string,\n    header_text   : PropTypes.string,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default SetResidenceForm;\n","import classNames       from 'classnames';\nimport {\n    Button,\n    Dialog }            from 'deriv-components';\nimport {\n    Formik,\n    Form }              from 'formik';\nimport PropTypes        from 'prop-types';\nimport React            from 'react';\nimport { localize }     from 'App/i18n';\nimport { connect }      from 'Stores/connect';\nimport { website_name } from 'App/Constants/app-config';\nimport ResidenceForm    from './set-residence-form.jsx';\nimport                       'Sass/app/modules/set-residence.scss';\n\n// TODO: Move some of these functions to helpers since some of them are shared with AccountSignUpModal\nconst isResidenceText = (item, values) => item.text.toLowerCase() === values.residence.toLowerCase();\n\nconst validateResidence = (values, residence_list) => {\n    const errors = {};\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex((item) => isResidenceText(item, values));\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', { website_name });\n        }\n    }\n\n    return errors;\n};\n\nclass SetResidence extends React.Component {\n    onSetResidenceComplete = (error) => {\n        // TODO: Proper error handling (currently we have no place to put the message)\n        if (error) {\n            throw Error(error);\n        }\n        // Handle lower level modal controls due to overriding modal rendering\n        this.props.isModalVisible(false);\n        this.props.enableApp();\n    };\n\n    render() {\n        const { onSetResidence, residence_list } = this.props;\n        const onSetResidencePassthrough = (values) => {\n            const index_of_selection = residence_list.findIndex((item) => isResidenceText(item, values));\n            const modded_values = { ...values, residence: residence_list[index_of_selection].value };\n            onSetResidence(modded_values, this.onSetResidenceComplete);\n        };\n        return (\n            <div className='set-residence'>\n                <Formik\n                    initialValues={ { residence: '' } }\n                    validate={ (values) => validateResidence(values, residence_list) }\n                    onSubmit={ onSetResidencePassthrough }\n                >\n                    {({ isSubmitting, errors, values, setFieldValue, touched }) => (\n                        <Form>\n                            <React.Fragment>\n                                <ResidenceForm\n                                    errors={errors}\n                                    touched={touched}\n                                    setFieldValue={setFieldValue}\n                                    residence_list={residence_list}\n                                >\n                                    <p className='set-residence__subtext'>\n                                        {localize('We need this to make sure our service complies with laws and regulations in your country.')}\n                                    </p>\n                                    <Button\n                                        className={classNames('set-residence__btn', { 'set-residence__btn--disabled': !values.residence || errors.residence || isSubmitting })}\n                                        type='submit'\n                                        is_disabled={ !values.residence || !!errors.residence || isSubmitting }\n                                        text={localize('Set residence')}\n                                        primary\n                                    />\n                                </ResidenceForm>\n                            </React.Fragment>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        );\n    }\n}\n\nSetResidence.propTypes = {\n    onSetResidence: PropTypes.func,\n    residence_list: PropTypes.array,\n};\n\nconst SetResidenceModal = ({\n    enableApp,\n    disableApp,\n    is_loading,\n    is_visible,\n    onSetResidence,\n    residence_list,\n    toggleSetResidenceModal,\n}) => {\n    if (residence_list.length < 1) return null;\n    return (\n        <Dialog\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_content_centered\n        >\n            <SetResidence\n                onSetResidence={onSetResidence}\n                residence_list={residence_list}\n                isModalVisible={toggleSetResidenceModal}\n                enableApp={enableApp}\n            />\n        </Dialog>\n    );\n};\n\nSetResidenceModal.propTypes = {\n    disableApp    : PropTypes.func,\n    enableApp     : PropTypes.func,\n    is_loading    : PropTypes.bool,\n    is_visible    : PropTypes.bool,\n    onSetResidence: PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default connect(\n    ({ ui, client }) => ({\n        is_visible             : ui.is_set_residence_modal_visible,\n        toggleSetResidenceModal: ui.toggleSetResidenceModal,\n        enableApp              : ui.enableApp,\n        disableApp             : ui.disableApp,\n        is_loading             : ui.is_loading,\n        onSetResidence         : client.onSetResidence,\n        residence_list         : client.residence_list,\n    }),\n)(SetResidenceModal);\n"],"sourceRoot":""}