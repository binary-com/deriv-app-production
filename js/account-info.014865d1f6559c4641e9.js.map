{"version":3,"sources":["webpack:///./App/Containers/RealAccountSignup/upgrade-button.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Components/Layout/Header/account-info.jsx"],"names":["onClick","children","UpgradeButton","wrapper_ref","accounts_toggle_btn","target","classList","handleLogout","props","requestLogout","cleanUp","document","account_loginid","this","has_error","a_currency","accounts","CurrencyUtils","b_currency","a","is_virtual","a_is_crypto","b_is_crypto","a_is_fiat","setWrapperRef","can_upgrade","can_manage_currency","map","loginid","doSwitch","account","icon","className","classNames","currency","openRealAccountSignup","window","urlFor","obj_total_balance","React","Component","AccountSwitcher","propTypes","clearError","display","PropTypes","bool","has_fiat","hideDialog","is_logged_in","is_positions_drawer_on","is_upgrade_enabled","is_visible","toggle","togglePositionsDrawer","client","modules","can_change_currency","account_list","can_upgrade_to","switchAccount","contract_trade","clearPositions","account_switcher","AccountInfo","state","showDialog","setState","balance","is_dialog_on","toggleDialog","type","toLowerCase","i18n_default_text","in","timeout","enter","enterDone","exit","onEntered","unmountOnExit","account_type","string","func"],"mappings":"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","file":"js/account-info.014865d1f6559c4641e9.js","sourcesContent":["import { Button } from 'deriv-components';\nimport PropTypes  from 'prop-types';\nimport React      from 'react';\n\nconst UpgradeButton = ({ children, onClick }) => (\n    <div className='acc-switcher__new-account'>\n        <Button\n            id='upgrade-account'\n            onClick={onClick}\n            className='acc-switcher__new-account-link'\n        >\n            {children}\n        </Button>\n    </div>\n);\n\nUpgradeButton.propTypes = {\n    onClick: PropTypes.func,\n    text   : PropTypes.string,\n};\n\nexport default UpgradeButton;\n","import classNames        from 'classnames';\nimport PropTypes         from 'prop-types';\nimport React             from 'react';\nimport {\n    Money,\n    Popover }            from 'deriv-components';\nimport CurrencyUtils     from 'deriv-shared/utils/currency';\nimport { localize }      from 'App/i18n';\nimport { urlFor }        from '_common/url';\nimport UpgradeButton     from 'App/Containers/RealAccountSignup/upgrade-button.jsx';\nimport Icon              from 'Assets/icon.jsx';\nimport { requestLogout } from 'Services/index';\nimport { connect }       from 'Stores/connect';\nimport Localize          from 'App/Components/Elements/localize.jsx';\n\nclass AccountSwitcher extends React.Component {\n    setWrapperRef = (node) => {\n        this.wrapper_ref = node;\n    };\n\n    handleClickOutside = (event) => {\n        const accounts_toggle_btn = !(event.target.classList.contains('acc-info'));\n        if (this.wrapper_ref && !this.wrapper_ref.contains(event.target)\n            && this.props.is_visible && accounts_toggle_btn) {\n            this.props.toggle();\n        }\n    };\n\n    handleLogout = () => {\n        this.props.toggle();\n        if (this.props.is_positions_drawer_on) {\n            this.props.togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n        }\n        requestLogout().then(this.props.cleanUp);\n    };\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n        this.props.hideDialog();\n    }\n\n    async doSwitch(loginid) {\n        this.props.toggle();\n        if (this.props.account_loginid === loginid) return;\n        await this.props.clearPositions();\n        await this.props.switchAccount(loginid);\n\n        if (this.props.has_error) {\n            this.props.clearError();\n        }\n    }\n\n    get can_manage_currency () {\n        return this.props.can_change_currency ||\n            (!this.props.is_virtual && !this.props.has_fiat && this.props.can_upgrade_to);\n    }\n\n    render() {\n        if (!this.props.is_logged_in) return false;\n        // TODO: Once we allow other real accounts (apart from CR), assign correct title and group accounts into list with correct account title/types\n        // e.g - Real, Financial, Gaming, Investment\n        const can_upgrade = !!(this.props.is_upgrade_enabled && this.props.is_virtual && this.props.can_upgrade_to);\n\n        // sort accounts as follows:\n        // top is fiat, then crypto (each alphabetically by currency), then demo\n        this.props.account_list.sort((a, b) => {\n            const a_currency = this.props.accounts[a.loginid].currency;\n            const b_currency = this.props.accounts[b.loginid].currency;\n            const a_is_crypto = CurrencyUtils.isCryptocurrency(a_currency);\n            const b_is_crypto = CurrencyUtils.isCryptocurrency(b_currency);\n            const a_is_fiat = !a_is_crypto;\n            const b_is_fiat = !b_is_crypto;\n            if (a.is_virtual || b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if ((a_is_crypto && b_is_crypto) || (a_is_fiat && b_is_fiat)) {\n                return a_currency < b_currency ? -1 : 1;\n            } else if (a_is_fiat && b_is_crypto) {\n                return -1;\n            }\n            return 1;\n        });\n\n        return (\n            <div className='acc-switcher__list' ref={this.setWrapperRef} style={{ display: this.props.display }}>\n                <div className={(can_upgrade || this.can_manage_currency) ? undefined : 'acc-switcher__list-group'}>\n                    <span className='acc-switcher__list-title'>\n                        <Localize i18n_default_text='Accounts' />\n                    </span>\n                    <div className='acc-switcher__accounts'>\n                        {\n                            this.props.account_list.map((account) => (\n                                <Popover\n                                    alignment='left'\n                                    message={account.loginid}\n                                    key={account.loginid}\n                                >\n                                    <div\n                                        id={`dt_${account.loginid}`}\n                                        className={classNames('acc-switcher__account', {\n                                            'acc-switcher__account--selected': (account.loginid === this.props.account_loginid),\n                                        })}\n                                        onClick={this.doSwitch.bind(this, account.loginid)}\n                                    >\n                                        <span className={'acc-switcher__id'}>\n                                            <Icon\n                                                icon='IconAccountsCurrency'\n                                                className={`acc-switcher__id-icon acc-switcher__id-icon--${account.icon}`}\n                                                type={account.icon}\n                                            />\n                                            <span>\n                                                {account.is_virtual ?\n                                                    <Localize i18n_default_text='Demo' /> :\n                                                    account.icon.toUpperCase() === 'REAL' ?\n                                                        <Localize i18n_default_text='Real' /> :\n                                                        account.icon.toUpperCase()\n                                                }\n                                            </span>\n                                            {'balance' in this.props.accounts[account.loginid] &&\n                                            <span className={classNames('acc-switcher__balance', { 'acc-swithcer__balance--virtual': account.is_virtual })}>\n                                                {this.props.accounts[account.loginid].currency &&\n                                                <Money\n                                                    currency={this.props.accounts[account.loginid].currency}\n                                                    amount={\n                                                        CurrencyUtils.formatMoney(\n                                                            this.props.accounts[account.loginid].currency,\n                                                            this.props.accounts[account.loginid].balance,\n                                                            true\n                                                        )\n                                                    }\n                                                    should_format={false}\n                                                />\n                                                }\n                                                {!this.props.accounts[account.loginid].currency &&\n                                                    <span className='no-currency'><Localize\n                                                        i18n_default_text='No currency assigned'\n                                                    />\n                                                    </span>\n                                                }\n                                            </span>\n                                            }\n                                        </span>\n                                    </div>\n                                </Popover>\n                            ))\n                        }\n                    </div>\n\n                    {this.can_manage_currency && !can_upgrade &&\n                        <UpgradeButton\n                            onClick={this.props.openRealAccountSignup}\n                        >\n                            <Icon icon='IconAdd' />\n                            <div className='btn__text'>\n                                <Localize\n                                    i18n_default_text='Add/manage account'\n                                />\n                            </div>\n                        </UpgradeButton>\n                    }\n                </div>\n                { can_upgrade &&\n                <UpgradeButton\n                    onClick={() => {\n                        if (this.props.can_upgrade_to === 'svg') {\n                            this.props.openRealAccountSignup();\n                        } else {\n                            window.open(urlFor('new_account/maltainvestws', undefined, undefined, true));\n                        }\n                    }}\n                >\n                    <Icon icon='IconAdd' />\n                    <div className='btn__text'>\n                        <Localize\n                            i18n_default_text='Add a real account'\n                        />\n                    </div>\n                </UpgradeButton>\n                }\n                <div className='acc-switcher__separator' />\n\n                <div className='acc-switcher__total'>\n                    <Localize i18n_default_text='Total assets' />\n                    <span className='acc-switcher__balance'>\n                        <Money\n                            currency={this.props.obj_total_balance.currency}\n                            amount={\n                                CurrencyUtils.formatMoney(\n                                    this.props.obj_total_balance.currency,\n                                    this.props.obj_total_balance.amount,\n                                    true\n                                )\n                            }\n                            should_format={false}\n                        />\n                    </span>\n                </div>\n\n                <div className='acc-switcher__separator' />\n\n                <div id='dt_logout_button' className='acc-switcher__logout' onClick={this.handleLogout}>\n                    <span className='acc-switcher__logout-text'>{localize('Log out')}</span>\n                    <Icon icon='IconLogout' className='acc-switcher__logout-icon drawer__icon' />\n                </div>\n            </div>\n        );\n    }\n}\n\nAccountSwitcher.propTypes = {\n    account_list          : PropTypes.array,\n    account_loginid       : PropTypes.string,\n    accounts              : PropTypes.object,\n    cleanUp               : PropTypes.func,\n    clearError            : PropTypes.func,\n    clearPositions        : PropTypes.func,\n    display               : PropTypes.string,\n    has_error             : PropTypes.bool,\n    has_fiat              : PropTypes.bool,\n    hideDialog            : PropTypes.func,\n    is_logged_in          : PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    is_upgrade_enabled    : PropTypes.bool,\n    is_virtual            : PropTypes.bool,\n    is_visible            : PropTypes.bool,\n    obj_total_balance     : PropTypes.object,\n    toggle                : PropTypes.func,\n    togglePositionsDrawer : PropTypes.func,\n};\n\nconst account_switcher = connect(\n    ({ client, ui, modules }) => ({\n        accounts              : client.accounts,\n        has_fiat              : client.has_fiat,\n        can_change_currency   : client.can_change_currency,\n        account_list          : client.account_list,\n        can_upgrade           : client.can_upgrade,\n        can_upgrade_to        : client.can_upgrade_to,\n        account_loginid       : client.loginid,\n        is_logged_in          : client.is_logged_in,\n        is_virtual            : client.is_virtual,\n        obj_total_balance     : client.obj_total_balance,\n        switchAccount         : client.switchAccount,\n        cleanUp               : client.cleanUp,\n        clearError            : modules.contract_trade.clearError,\n        has_error             : modules.contract_trade.has_error,\n        clearPositions        : modules.portfolio.clearTable,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        openRealAccountSignup : ui.openRealAccountSignup,\n        togglePositionsDrawer : ui.togglePositionsDrawer,\n    }),\n)(AccountSwitcher);\n\nexport { account_switcher as AccountSwitcher };\n","import classNames          from 'classnames';\nimport PropTypes           from 'prop-types';\nimport React               from 'react';\nimport { CSSTransition }   from 'react-transition-group';\nimport Localize            from 'App/Components/Elements/localize.jsx';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\nimport Icon                from 'Assets/icon.jsx';\n\n// todo fix absolute path\n\nclass AccountInfo extends React.Component {\n    state = {\n        display: 'none',\n    };\n\n    showDialog = () => {\n        this.setState({ display: 'block' });\n    };\n\n    hideDialog = () => {\n        this.setState({ display: 'none' });\n    };\n\n    render() {\n        const {\n            balance,\n            currency,\n            is_dialog_on,\n            is_upgrade_enabled,\n            is_virtual,\n            toggleDialog,\n        } = this.props;\n\n        return (\n            <div className='acc-info__wrapper'>\n                <div className='acc-info__separator' />\n                <div\n                    className={classNames('acc-info', {\n                        'acc-info--show'      : is_dialog_on,\n                        'acc-info--is-virtual': is_virtual,\n                    })}\n                    onClick={toggleDialog}\n                >\n                    <span\n                        className='acc-info__id'\n                    >\n                        <Icon\n                            icon='IconAccountsCurrency'\n                            className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n                            type={is_virtual ? 'virtual' : (currency || 'real').toLowerCase()}\n                        />\n                    </span>\n                    {\n                        typeof balance !== 'undefined' &&\n                        <p className='acc-info__balance'>\n                            <span\n                                className={classNames('symbols', { [`symbols--${(currency || '').toLowerCase()}`]: currency })}\n                            />\n                            {!currency &&\n                            <Localize\n                                i18n_default_text='No currency assigned'\n                            />\n                            }\n                            {currency && balance}\n                        </p>\n                    }\n                    <Icon icon='IconArrowBold' className='acc-info__select-arrow' />\n                </div>\n                <CSSTransition\n                    in={is_dialog_on}\n                    timeout={200}\n                    classNames={{\n                        enter    : 'acc-switcher__wrapper--enter',\n                        enterDone: 'acc-switcher__wrapper--enter-done',\n                        exit     : 'acc-switcher__wrapper--exit',\n                    }}\n                    onEntered={this.showDialog}\n                    unmountOnExit\n                >\n                    <div className='acc-switcher__wrapper'>\n                        <AccountSwitcher\n                            is_visible={is_dialog_on}\n                            hideDialog={this.hideDialog}\n                            display={this.state.display}\n                            toggle={toggleDialog}\n                            is_upgrade_enabled={is_upgrade_enabled}\n                        />\n                    </div>\n                </CSSTransition>\n            </div>\n        );\n    }\n}\n\nAccountInfo.propTypes = {\n    account_type      : PropTypes.string,\n    balance           : PropTypes.string,\n    currency          : PropTypes.string,\n    is_dialog_on      : PropTypes.bool,\n    is_upgrade_enabled: PropTypes.bool,\n    is_virtual        : PropTypes.bool,\n    loginid           : PropTypes.string,\n    toggleDialog      : PropTypes.func,\n};\n\nexport default AccountInfo;\n"],"sourceRoot":""}